
momiu_mcu_no2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f72c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b2c  0800f8d0  0800f8d0  0001f8d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103fc  080103fc  000310ac  2**0
                  CONTENTS
  4 .ARM          00000008  080103fc  080103fc  000203fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010404  08010404  000310ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010404  08010404  00020404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801040c  0801040c  0002040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010ac  20000000  08010410  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da0  200010b0  080114bc  000310b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002e50  080114bc  00032e50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000310ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002304d  00000000  00000000  000310dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405f  00000000  00000000  00054129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  00058188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014d8  00000000  00000000  00059788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b545  00000000  00000000  0005ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a87b  00000000  00000000  000761a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df36  00000000  00000000  00090a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012e956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007058  00000000  00000000  0012e9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200010b0 	.word	0x200010b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f8b4 	.word	0x0800f8b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200010b4 	.word	0x200010b4
 80001dc:	0800f8b4 	.word	0x0800f8b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b96e 	b.w	8000fac <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468c      	mov	ip, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8083 	bne.w	8000dfe <__udivmoddi4+0x116>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4617      	mov	r7, r2
 8000cfc:	d947      	bls.n	8000d8e <__udivmoddi4+0xa6>
 8000cfe:	fab2 f282 	clz	r2, r2
 8000d02:	b142      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	f1c2 0020 	rsb	r0, r2, #32
 8000d08:	fa24 f000 	lsr.w	r0, r4, r0
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4097      	lsls	r7, r2
 8000d10:	ea40 0c01 	orr.w	ip, r0, r1
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d20:	fa1f fe87 	uxth.w	lr, r7
 8000d24:	fb08 c116 	mls	r1, r8, r6, ip
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d3a:	f080 8119 	bcs.w	8000f70 <__udivmoddi4+0x288>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8116 	bls.w	8000f70 <__udivmoddi4+0x288>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d50:	fb08 3310 	mls	r3, r8, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	193c      	adds	r4, r7, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d66:	f080 8105 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f240 8102 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d70:	3802      	subs	r0, #2
 8000d72:	443c      	add	r4, r7
 8000d74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	b11d      	cbz	r5, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c5 4300 	strd	r4, r3, [r5]
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	b902      	cbnz	r2, 8000d92 <__udivmoddi4+0xaa>
 8000d90:	deff      	udf	#255	; 0xff
 8000d92:	fab2 f282 	clz	r2, r2
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	d150      	bne.n	8000e3c <__udivmoddi4+0x154>
 8000d9a:	1bcb      	subs	r3, r1, r7
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f f887 	uxth.w	r8, r7
 8000da4:	2601      	movs	r6, #1
 8000da6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000daa:	0c21      	lsrs	r1, r4, #16
 8000dac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb08 f30c 	mul.w	r3, r8, ip
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0xe2>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	f200 80e9 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x10c>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x10a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80d9 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e7bf      	b.n	8000d7e <__udivmoddi4+0x96>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0x12e>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80b1 	beq.w	8000f6a <__udivmoddi4+0x282>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x1cc>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0x140>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80b8 	bhi.w	8000f98 <__udivmoddi4+0x2b0>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	468c      	mov	ip, r1
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0a8      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000e36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e3a:	e7a5      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f603 	lsr.w	r6, r0, r3
 8000e44:	4097      	lsls	r7, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4e:	40d9      	lsrs	r1, r3
 8000e50:	4330      	orrs	r0, r6
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e58:	fa1f f887 	uxth.w	r8, r7
 8000e5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb06 f108 	mul.w	r1, r6, r8
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e6e:	d909      	bls.n	8000e84 <__udivmoddi4+0x19c>
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e76:	f080 808d 	bcs.w	8000f94 <__udivmoddi4+0x2ac>
 8000e7a:	4299      	cmp	r1, r3
 8000e7c:	f240 808a 	bls.w	8000f94 <__udivmoddi4+0x2ac>
 8000e80:	3e02      	subs	r6, #2
 8000e82:	443b      	add	r3, r7
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b281      	uxth	r1, r0
 8000e88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e94:	fb00 f308 	mul.w	r3, r0, r8
 8000e98:	428b      	cmp	r3, r1
 8000e9a:	d907      	bls.n	8000eac <__udivmoddi4+0x1c4>
 8000e9c:	1879      	adds	r1, r7, r1
 8000e9e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ea2:	d273      	bcs.n	8000f8c <__udivmoddi4+0x2a4>
 8000ea4:	428b      	cmp	r3, r1
 8000ea6:	d971      	bls.n	8000f8c <__udivmoddi4+0x2a4>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4439      	add	r1, r7
 8000eac:	1acb      	subs	r3, r1, r3
 8000eae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eb2:	e778      	b.n	8000da6 <__udivmoddi4+0xbe>
 8000eb4:	f1c6 0c20 	rsb	ip, r6, #32
 8000eb8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ebc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ec0:	431c      	orrs	r4, r3
 8000ec2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ece:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ed2:	431f      	orrs	r7, r3
 8000ed4:	0c3b      	lsrs	r3, r7, #16
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fa1f f884 	uxth.w	r8, r4
 8000ede:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ee2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ee6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eea:	458a      	cmp	sl, r1
 8000eec:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x220>
 8000ef6:	1861      	adds	r1, r4, r1
 8000ef8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000efc:	d248      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000efe:	458a      	cmp	sl, r1
 8000f00:	d946      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4421      	add	r1, r4
 8000f08:	eba1 010a 	sub.w	r1, r1, sl
 8000f0c:	b2bf      	uxth	r7, r7
 8000f0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f1a:	fb00 f808 	mul.w	r8, r0, r8
 8000f1e:	45b8      	cmp	r8, r7
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x24a>
 8000f22:	19e7      	adds	r7, r4, r7
 8000f24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f28:	d22e      	bcs.n	8000f88 <__udivmoddi4+0x2a0>
 8000f2a:	45b8      	cmp	r8, r7
 8000f2c:	d92c      	bls.n	8000f88 <__udivmoddi4+0x2a0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4427      	add	r7, r4
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	eba7 0708 	sub.w	r7, r7, r8
 8000f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3e:	454f      	cmp	r7, r9
 8000f40:	46c6      	mov	lr, r8
 8000f42:	4649      	mov	r1, r9
 8000f44:	d31a      	bcc.n	8000f7c <__udivmoddi4+0x294>
 8000f46:	d017      	beq.n	8000f78 <__udivmoddi4+0x290>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x27a>
 8000f4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f56:	40f2      	lsrs	r2, r6
 8000f58:	ea4c 0202 	orr.w	r2, ip, r2
 8000f5c:	40f7      	lsrs	r7, r6
 8000f5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f62:	2600      	movs	r6, #0
 8000f64:	4631      	mov	r1, r6
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e70b      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6fd      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f78:	4543      	cmp	r3, r8
 8000f7a:	d2e5      	bcs.n	8000f48 <__udivmoddi4+0x260>
 8000f7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f80:	eb69 0104 	sbc.w	r1, r9, r4
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7df      	b.n	8000f48 <__udivmoddi4+0x260>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e7d2      	b.n	8000f32 <__udivmoddi4+0x24a>
 8000f8c:	4660      	mov	r0, ip
 8000f8e:	e78d      	b.n	8000eac <__udivmoddi4+0x1c4>
 8000f90:	4681      	mov	r9, r0
 8000f92:	e7b9      	b.n	8000f08 <__udivmoddi4+0x220>
 8000f94:	4666      	mov	r6, ip
 8000f96:	e775      	b.n	8000e84 <__udivmoddi4+0x19c>
 8000f98:	4630      	mov	r0, r6
 8000f9a:	e74a      	b.n	8000e32 <__udivmoddi4+0x14a>
 8000f9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa0:	4439      	add	r1, r7
 8000fa2:	e713      	b.n	8000dcc <__udivmoddi4+0xe4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	443c      	add	r4, r7
 8000fa8:	e724      	b.n	8000df4 <__udivmoddi4+0x10c>
 8000faa:	bf00      	nop

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	0a5a      	lsrs	r2, r3, #9
 8000fc0:	490f      	ldr	r1, [pc, #60]	; (8001000 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000fc2:	fba1 1202 	umull	r1, r2, r1, r2
 8000fc6:	09d2      	lsrs	r2, r2, #7
 8000fc8:	490e      	ldr	r1, [pc, #56]	; (8001004 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000fca:	fb01 f202 	mul.w	r2, r1, r2
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0a5b      	lsrs	r3, r3, #9
 8000fd8:	4a09      	ldr	r2, [pc, #36]	; (8001000 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	09db      	lsrs	r3, r3, #7
 8000fe0:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	441a      	add	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	00044b83 	.word	0x00044b83
 8001004:	3b9aca00 	.word	0x3b9aca00

08001008 <Dynamixel_servo>:
#include "gpio.h"

extern UART_HandleTypeDef huart6;

void Dynamixel_servo(int Dynamixel_ID, uint16_t position, uint16_t speed) //(position, speed)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	803b      	strh	r3, [r7, #0]
	uint8_t position_H = position >> 8 ;
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
 800101e:	75fb      	strb	r3, [r7, #23]
	uint8_t position_L = position ;
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	75bb      	strb	r3, [r7, #22]

	uint8_t speed_H = speed >> 8 ;
 8001024:	883b      	ldrh	r3, [r7, #0]
 8001026:	0a1b      	lsrs	r3, r3, #8
 8001028:	b29b      	uxth	r3, r3
 800102a:	757b      	strb	r3, [r7, #21]
	uint8_t speed_L = speed ;
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	753b      	strb	r3, [r7, #20]

	uint8_t packet[11];
	packet[0] = 0xff; // Start communicating byte 1
 8001030:	23ff      	movs	r3, #255	; 0xff
 8001032:	723b      	strb	r3, [r7, #8]
	packet[1] = 0xff; // Start communicating byte 2
 8001034:	23ff      	movs	r3, #255	; 0xff
 8001036:	727b      	strb	r3, [r7, #9]
	packet[2] = Dynamixel_ID; // ID
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	72bb      	strb	r3, [r7, #10]
	packet[3] = 0x07; // length : #num of parameter +2 = 7
 800103e:	2307      	movs	r3, #7
 8001040:	72fb      	strb	r3, [r7, #11]
	packet[4] = 0x03; // instruction : write
 8001042:	2303      	movs	r3, #3
 8001044:	733b      	strb	r3, [r7, #12]
	packet[5] = 0x1e; // start write at address : goal position(L)(0x1e)
 8001046:	231e      	movs	r3, #30
 8001048:	737b      	strb	r3, [r7, #13]
	packet[6] = position_L; // write on address 0x1e
 800104a:	7dbb      	ldrb	r3, [r7, #22]
 800104c:	73bb      	strb	r3, [r7, #14]
	packet[7] = position_H; // write on address 0x1e+1
 800104e:	7dfb      	ldrb	r3, [r7, #23]
 8001050:	73fb      	strb	r3, [r7, #15]
	packet[8] = speed_L;	// write on address 0x1e+2
 8001052:	7d3b      	ldrb	r3, [r7, #20]
 8001054:	743b      	strb	r3, [r7, #16]
	packet[9] = speed_H;	// write on address 0x1e+3
 8001056:	7d7b      	ldrb	r3, [r7, #21]
 8001058:	747b      	strb	r3, [r7, #17]
	uint8_t checksum = (~(packet[2]+packet[3]+packet[4]+packet[5]+packet[6]+packet[7]+packet[8]+packet[9]) & 0xff );
 800105a:	7aba      	ldrb	r2, [r7, #10]
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	4413      	add	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	7b3b      	ldrb	r3, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	b2da      	uxtb	r2, r3
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	4413      	add	r3, r2
 800106c:	b2da      	uxtb	r2, r3
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	4413      	add	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	4413      	add	r3, r2
 8001078:	b2da      	uxtb	r2, r3
 800107a:	7c3b      	ldrb	r3, [r7, #16]
 800107c:	4413      	add	r3, r2
 800107e:	b2da      	uxtb	r2, r3
 8001080:	7c7b      	ldrb	r3, [r7, #17]
 8001082:	4413      	add	r3, r2
 8001084:	b2db      	uxtb	r3, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	74fb      	strb	r3, [r7, #19]
	packet[10] = checksum;
 800108a:	7cfb      	ldrb	r3, [r7, #19]
 800108c:	74bb      	strb	r3, [r7, #18]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET); // setup pin dir_data_ax12a high for transmit data
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001094:	4806      	ldr	r0, [pc, #24]	; (80010b0 <Dynamixel_servo+0xa8>)
 8001096:	f008 f947 	bl	8009328 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart6, packet, 11, 10);
 800109a:	f107 0108 	add.w	r1, r7, #8
 800109e:	230a      	movs	r3, #10
 80010a0:	220b      	movs	r2, #11
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <Dynamixel_servo+0xac>)
 80010a4:	f00a fcc5 	bl	800ba32 <HAL_UART_Transmit>
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40020800 	.word	0x40020800
 80010b4:	20002db4 	.word	0x20002db4

080010b8 <VL53L0x_StartConversion>:
	 else return 1; //return 1 if check fails
}

 //VL53L0x convert once
void VL53L0x_StartConversion(I2C_HandleTypeDef *hi2c, uint16_t VL53L0x_add)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af04      	add	r7, sp, #16
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
	uint8_t VL53L0x_SendData[1] = {0x01};
 80010c4:	2301      	movs	r3, #1
 80010c6:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(hi2c, VL53L0x_add, VL53L0X_REG_SYSRANGE_START, I2C_MEMADD_SIZE_8BIT, VL53L0x_SendData, 1, 1);
 80010c8:	8879      	ldrh	r1, [r7, #2]
 80010ca:	2301      	movs	r3, #1
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2200      	movs	r2, #0
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f008 fda5 	bl	8009c2c <HAL_I2C_Mem_Write>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <makeuint16>:

uint16_t makeuint16(int lsb, int msb)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
    return ((msb & 0xFF) << 8) | (lsb & 0xFF);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	b29b      	uxth	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <VL53L0x_ReadDistance>:


 //VL53L0x reading distance and other data feedback information
void VL53L0x_ReadDistance(I2C_HandleTypeDef *hi2c, struct VL53L0xData *VL_temp, uint16_t VL53L0x_add)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af04      	add	r7, sp, #16
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	80fb      	strh	r3, [r7, #6]
	 //Record historical valid values
	VL_temp->dist_last = VL_temp->distValid;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	8ada      	ldrh	r2, [r3, #22]
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	829a      	strh	r2, [r3, #20]

	HAL_I2C_Mem_Read(hi2c, VL53L0x_add, VL53L0X_REG_RESULT_RANGE_STATUS, I2C_MEMADD_SIZE_8BIT, VL_temp->vtemp, 12, 1);
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	88f9      	ldrh	r1, [r7, #6]
 800112e:	2201      	movs	r2, #1
 8001130:	9202      	str	r2, [sp, #8]
 8001132:	220c      	movs	r2, #12
 8001134:	9201      	str	r2, [sp, #4]
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	2214      	movs	r2, #20
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f008 fe6f 	bl	8009e20 <HAL_I2C_Mem_Read>

	VL_temp->acnt = makeuint16(VL_temp->vtemp[7], VL_temp->vtemp[6]);
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	79db      	ldrb	r3, [r3, #7]
 8001146:	461a      	mov	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	799b      	ldrb	r3, [r3, #6]
 800114c:	4619      	mov	r1, r3
 800114e:	4610      	mov	r0, r2
 8001150:	f7ff ffcb 	bl	80010ea <makeuint16>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	819a      	strh	r2, [r3, #12]
	VL_temp->scnt = makeuint16(VL_temp->vtemp[9], VL_temp->vtemp[8]);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	7a5b      	ldrb	r3, [r3, #9]
 8001160:	461a      	mov	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	7a1b      	ldrb	r3, [r3, #8]
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff ffbe 	bl	80010ea <makeuint16>
 800116e:	4603      	mov	r3, r0
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	81da      	strh	r2, [r3, #14]
	VL_temp->dist = makeuint16(VL_temp->vtemp[11], VL_temp->vtemp[10]);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	7adb      	ldrb	r3, [r3, #11]
 800117a:	461a      	mov	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	7a9b      	ldrb	r3, [r3, #10]
 8001180:	4619      	mov	r1, r3
 8001182:	4610      	mov	r0, r2
 8001184:	f7ff ffb1 	bl	80010ea <makeuint16>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	821a      	strh	r2, [r3, #16]
	VL_temp->DeviceRangeStatusInternal = ((VL_temp->vtemp[0] & 0x78) >> 3);
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	10db      	asrs	r3, r3, #3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	749a      	strb	r2, [r3, #18]


	 //Extract valid value
	 if(VL_temp->dist <= 0x0014) //Distance data is invalid
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	8a1b      	ldrh	r3, [r3, #16]
 80011a6:	2b14      	cmp	r3, #20
 80011a8:	d804      	bhi.n	80011b4 <VL53L0x_ReadDistance+0xa0>
		VL_temp->distValid = VL_temp->dist_last;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	8a9a      	ldrh	r2, [r3, #20]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	82da      	strh	r2, [r3, #22]
 80011b2:	e003      	b.n	80011bc <VL53L0x_ReadDistance+0xa8>
	 else //valid
		VL_temp->distValid = VL_temp->dist;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	8a1a      	ldrh	r2, [r3, #16]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	82da      	strh	r2, [r3, #22]

 /* The code below has been forgotten for a long time. The function is to get the altitude of the aircraft based on the inclination to the ground. You can delete it directly */

	uint8_t i,j;

	for(i = 14;i>0;i--)
 80011bc:	230e      	movs	r3, #14
 80011be:	75fb      	strb	r3, [r7, #23]
 80011c0:	e00d      	b.n	80011de <VL53L0x_ReadDistance+0xca>
	{
		VL_temp->dist_buff[i] = VL_temp->dist_buff[i-1];
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	1e59      	subs	r1, r3, #1
 80011c6:	7dfa      	ldrb	r2, [r7, #23]
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	310c      	adds	r1, #12
 80011cc:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	320c      	adds	r2, #12
 80011d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(i = 14;i>0;i--)
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	3b01      	subs	r3, #1
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1ee      	bne.n	80011c2 <VL53L0x_ReadDistance+0xae>
	}
	VL_temp->dist_buff[0] = VL_temp->distValid;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	8ada      	ldrh	r2, [r3, #22]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	831a      	strh	r2, [r3, #24]

	i =0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]
	j=0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<6;i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
 80011f8:	e00d      	b.n	8001216 <VL53L0x_ReadDistance+0x102>
	{
		if(VL_temp->dist_buff[i] >=2000)
 80011fa:	7dfa      	ldrb	r2, [r7, #23]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	320c      	adds	r2, #12
 8001200:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001204:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001208:	d302      	bcc.n	8001210 <VL53L0x_ReadDistance+0xfc>
			j++;
 800120a:	7dbb      	ldrb	r3, [r7, #22]
 800120c:	3301      	adds	r3, #1
 800120e:	75bb      	strb	r3, [r7, #22]
	for(i=0;i<6;i++)
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	3301      	adds	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
 8001216:	7dfb      	ldrb	r3, [r7, #23]
 8001218:	2b05      	cmp	r3, #5
 800121a:	d9ee      	bls.n	80011fa <VL53L0x_ReadDistance+0xe6>
	}

	 if(j >= 2) // 1/3 overflow rate
 800121c:	7dbb      	ldrb	r3, [r7, #22]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d904      	bls.n	800122c <VL53L0x_ReadDistance+0x118>
		VL_temp->distValidFinal = 2000;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001228:	86da      	strh	r2, [r3, #54]	; 0x36
 800122a:	e01b      	b.n	8001264 <VL53L0x_ReadDistance+0x150>
	 else //Filter the most recent valid value from the array
	{
		i=0;
 800122c:	2300      	movs	r3, #0
 800122e:	75fb      	strb	r3, [r7, #23]
		for(i=0;i<15;i++)
 8001230:	2300      	movs	r3, #0
 8001232:	75fb      	strb	r3, [r7, #23]
 8001234:	e00a      	b.n	800124c <VL53L0x_ReadDistance+0x138>
		{
			if(VL_temp->dist_buff[i] <2000)
 8001236:	7dfa      	ldrb	r2, [r7, #23]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	320c      	adds	r2, #12
 800123c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001240:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001244:	d306      	bcc.n	8001254 <VL53L0x_ReadDistance+0x140>
		for(i=0;i<15;i++)
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	3301      	adds	r3, #1
 800124a:	75fb      	strb	r3, [r7, #23]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	2b0e      	cmp	r3, #14
 8001250:	d9f1      	bls.n	8001236 <VL53L0x_ReadDistance+0x122>
 8001252:	e000      	b.n	8001256 <VL53L0x_ReadDistance+0x142>
				break;
 8001254:	bf00      	nop
		}
		VL_temp->distValidFinal = VL_temp->dist_buff[i];
 8001256:	7dfa      	ldrb	r2, [r7, #23]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	320c      	adds	r2, #12
 800125c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	86da      	strh	r2, [r3, #54]	; 0x36
	}

	VL_temp->GroundDis_last = VL_temp->GroundDis;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
	VL_temp->GroundDis = (float)VL_temp->distValidFinal /1000;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001270:	ee07 3a90 	vmov	s15, r3
 8001274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001278:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001290 <VL53L0x_ReadDistance+0x17c>
 800127c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	//VL_temp->GroundDis = VL_temp->GroundDis *cos(ABS((PostureAngle.Pitch /180 *3.14159))) *cos(ABS((PostureAngle.Roll /180 *3.14159)));
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	447a0000 	.word	0x447a0000

08001294 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4619      	mov	r1, r3
 80012a2:	2007      	movs	r0, #7
 80012a4:	f004 fba0 	bl	80059e8 <bno055_writeData>
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4619      	mov	r1, r3
 80012be:	203d      	movs	r0, #61	; 0x3d
 80012c0:	f004 fb92 	bl	80059e8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80012ca:	2013      	movs	r0, #19
 80012cc:	f004 fb80 	bl	80059d0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80012d0:	e002      	b.n	80012d8 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80012d2:	2007      	movs	r0, #7
 80012d4:	f004 fb7c 	bl	80059d0 <bno055_delay>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff ffe3 	bl	80012b0 <bno055_setOperationMode>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80012f2:	200c      	movs	r0, #12
 80012f4:	f7ff ffdc 	bl	80012b0 <bno055_setOperationMode>
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}

080012fc <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001300:	2120      	movs	r1, #32
 8001302:	203f      	movs	r0, #63	; 0x3f
 8001304:	f004 fb70 	bl	80059e8 <bno055_writeData>
  bno055_delay(700);
 8001308:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800130c:	f004 fb60 	bl	80059d0 <bno055_delay>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  bno055_reset();
 800131a:	f7ff ffef 	bl	80012fc <bno055_reset>

  uint8_t id = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	2000      	movs	r0, #0
 800132a:	f004 fb81 	bl	8005a30 <bno055_readData>
  if (id != BNO055_ID) {
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2ba0      	cmp	r3, #160	; 0xa0
 8001332:	d004      	beq.n	800133e <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4619      	mov	r1, r3
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <bno055_setup+0x4c>)
 800133a:	f00b fff9 	bl	800d330 <iprintf>
  }
  bno055_setPage(0);
 800133e:	2000      	movs	r0, #0
 8001340:	f7ff ffa8 	bl	8001294 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001344:	2100      	movs	r1, #0
 8001346:	203f      	movs	r0, #63	; 0x3f
 8001348:	f004 fb4e 	bl	80059e8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 800134c:	f7ff ffc8 	bl	80012e0 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001350:	200a      	movs	r0, #10
 8001352:	f004 fb3d 	bl	80059d0 <bno055_delay>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	0800f8d0 	.word	0x0800f8d0

08001364 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001368:	b09e      	sub	sp, #120	; 0x78
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff ff8e 	bl	8001294 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800137c:	2b20      	cmp	r3, #32
 800137e:	d108      	bne.n	8001392 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001380:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001388:	2208      	movs	r2, #8
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fb50 	bl	8005a30 <bno055_readData>
 8001390:	e007      	b.n	80013a2 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001392:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139a:	2206      	movs	r2, #6
 800139c:	4618      	mov	r0, r3
 800139e:	f004 fb47 	bl	8005a30 <bno055_readData>

  double scale = 1;
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b8b      	ldr	r3, [pc, #556]	; (80015d4 <bno055_getVector+0x270>)
 80013a8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80013ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b0:	2b0e      	cmp	r3, #14
 80013b2:	d109      	bne.n	80013c8 <bno055_getVector+0x64>
    scale = magScale;
 80013b4:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <bno055_getVector+0x274>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f8bb 	bl	8000534 <__aeabi_ui2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80013c6:	e03e      	b.n	8001446 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80013c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d007      	beq.n	80013e0 <bno055_getVector+0x7c>
 80013d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013d4:	2b28      	cmp	r3, #40	; 0x28
 80013d6:	d003      	beq.n	80013e0 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80013d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013dc:	2b2e      	cmp	r3, #46	; 0x2e
 80013de:	d109      	bne.n	80013f4 <bno055_getVector+0x90>
    scale = accelScale;
 80013e0:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <bno055_getVector+0x278>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8a5 	bl	8000534 <__aeabi_ui2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80013f2:	e028      	b.n	8001446 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80013f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013f8:	2b14      	cmp	r3, #20
 80013fa:	d109      	bne.n	8001410 <bno055_getVector+0xac>
    scale = angularRateScale;
 80013fc:	4b78      	ldr	r3, [pc, #480]	; (80015e0 <bno055_getVector+0x27c>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f897 	bl	8000534 <__aeabi_ui2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800140e:	e01a      	b.n	8001446 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001414:	2b1a      	cmp	r3, #26
 8001416:	d109      	bne.n	800142c <bno055_getVector+0xc8>
    scale = eulerScale;
 8001418:	4b72      	ldr	r3, [pc, #456]	; (80015e4 <bno055_getVector+0x280>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f889 	bl	8000534 <__aeabi_ui2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800142a:	e00c      	b.n	8001446 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 800142c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001430:	2b20      	cmp	r3, #32
 8001432:	d108      	bne.n	8001446 <bno055_getVector+0xe2>
    scale = quaScale;
 8001434:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <bno055_getVector+0x284>)
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f87b 	bl	8000534 <__aeabi_ui2d>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144a:	2220      	movs	r2, #32
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00b fafc 	bl	800ca4c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001458:	2b20      	cmp	r3, #32
 800145a:	d150      	bne.n	80014fe <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800145c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	b21a      	sxth	r2, r3
 8001464:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21b      	sxth	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f870 	bl	8000554 <__aeabi_i2d>
 8001474:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001478:	f7ff fa00 	bl	800087c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001484:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b21a      	sxth	r2, r3
 800148c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f85c 	bl	8000554 <__aeabi_i2d>
 800149c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014a0:	f7ff f9ec 	bl	800087c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80014ac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21b      	sxth	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f848 	bl	8000554 <__aeabi_i2d>
 80014c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014c8:	f7ff f9d8 	bl	800087c <__aeabi_ddiv>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80014d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21a      	sxth	r2, r3
 80014dc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f834 	bl	8000554 <__aeabi_i2d>
 80014ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80014f0:	f7ff f9c4 	bl	800087c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80014fc:	e03b      	b.n	8001576 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80014fe:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21a      	sxth	r2, r3
 8001506:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21b      	sxth	r3, r3
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f81f 	bl	8000554 <__aeabi_i2d>
 8001516:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800151a:	f7ff f9af 	bl	800087c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001526:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f80b 	bl	8000554 <__aeabi_i2d>
 800153e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001542:	f7ff f99b 	bl	800087c <__aeabi_ddiv>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800154e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b21a      	sxth	r2, r3
 8001556:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21b      	sxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff7 	bl	8000554 <__aeabi_i2d>
 8001566:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800156a:	f7ff f987 	bl	800087c <__aeabi_ddiv>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8001576:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800157a:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800157e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001582:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001586:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800158a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800158e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001592:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001596:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800159a:	ec49 8b14 	vmov	d4, r8, r9
 800159e:	ec45 4b15 	vmov	d5, r4, r5
 80015a2:	ec41 0b16 	vmov	d6, r0, r1
 80015a6:	ec43 2b17 	vmov	d7, r2, r3
}
 80015aa:	eeb0 0a44 	vmov.f32	s0, s8
 80015ae:	eef0 0a64 	vmov.f32	s1, s9
 80015b2:	eeb0 1a45 	vmov.f32	s2, s10
 80015b6:	eef0 1a65 	vmov.f32	s3, s11
 80015ba:	eeb0 2a46 	vmov.f32	s4, s12
 80015be:	eef0 2a66 	vmov.f32	s5, s13
 80015c2:	eeb0 3a47 	vmov.f32	s6, s14
 80015c6:	eef0 3a67 	vmov.f32	s7, s15
 80015ca:	3778      	adds	r7, #120	; 0x78
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015d2:	bf00      	nop
 80015d4:	3ff00000 	.word	0x3ff00000
 80015d8:	20000006 	.word	0x20000006
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000002 	.word	0x20000002
 80015e4:	20000004 	.word	0x20000004
 80015e8:	20000008 	.word	0x20000008

080015ec <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 80015ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015f0:	b090      	sub	sp, #64	; 0x40
 80015f2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 80015f4:	2008      	movs	r0, #8
 80015f6:	f7ff feb5 	bl	8001364 <bno055_getVector>
 80015fa:	eeb0 4a40 	vmov.f32	s8, s0
 80015fe:	eef0 4a60 	vmov.f32	s9, s1
 8001602:	eeb0 5a41 	vmov.f32	s10, s2
 8001606:	eef0 5a61 	vmov.f32	s11, s3
 800160a:	eeb0 6a42 	vmov.f32	s12, s4
 800160e:	eef0 6a62 	vmov.f32	s13, s5
 8001612:	eeb0 7a43 	vmov.f32	s14, s6
 8001616:	eef0 7a63 	vmov.f32	s15, s7
 800161a:	ed87 4b08 	vstr	d4, [r7, #32]
 800161e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001622:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001626:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800162a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800162e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001632:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001636:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800163a:	ec49 8b14 	vmov	d4, r8, r9
 800163e:	ec45 4b15 	vmov	d5, r4, r5
 8001642:	ec41 0b16 	vmov	d6, r0, r1
 8001646:	ec43 2b17 	vmov	d7, r2, r3
}
 800164a:	eeb0 0a44 	vmov.f32	s0, s8
 800164e:	eef0 0a64 	vmov.f32	s1, s9
 8001652:	eeb0 1a45 	vmov.f32	s2, s10
 8001656:	eef0 1a65 	vmov.f32	s3, s11
 800165a:	eeb0 2a46 	vmov.f32	s4, s12
 800165e:	eef0 2a66 	vmov.f32	s5, s13
 8001662:	eeb0 3a47 	vmov.f32	s6, s14
 8001666:	eef0 3a67 	vmov.f32	s7, s15
 800166a:	3740      	adds	r7, #64	; 0x40
 800166c:	46bd      	mov	sp, r7
 800166e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001672 <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8001672:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001676:	b090      	sub	sp, #64	; 0x40
 8001678:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800167a:	2014      	movs	r0, #20
 800167c:	f7ff fe72 	bl	8001364 <bno055_getVector>
 8001680:	eeb0 4a40 	vmov.f32	s8, s0
 8001684:	eef0 4a60 	vmov.f32	s9, s1
 8001688:	eeb0 5a41 	vmov.f32	s10, s2
 800168c:	eef0 5a61 	vmov.f32	s11, s3
 8001690:	eeb0 6a42 	vmov.f32	s12, s4
 8001694:	eef0 6a62 	vmov.f32	s13, s5
 8001698:	eeb0 7a43 	vmov.f32	s14, s6
 800169c:	eef0 7a63 	vmov.f32	s15, s7
 80016a0:	ed87 4b08 	vstr	d4, [r7, #32]
 80016a4:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80016a8:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80016ac:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80016b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016b4:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80016b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80016c0:	ec49 8b14 	vmov	d4, r8, r9
 80016c4:	ec45 4b15 	vmov	d5, r4, r5
 80016c8:	ec41 0b16 	vmov	d6, r0, r1
 80016cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80016d0:	eeb0 0a44 	vmov.f32	s0, s8
 80016d4:	eef0 0a64 	vmov.f32	s1, s9
 80016d8:	eeb0 1a45 	vmov.f32	s2, s10
 80016dc:	eef0 1a65 	vmov.f32	s3, s11
 80016e0:	eeb0 2a46 	vmov.f32	s4, s12
 80016e4:	eef0 2a66 	vmov.f32	s5, s13
 80016e8:	eeb0 3a47 	vmov.f32	s6, s14
 80016ec:	eef0 3a67 	vmov.f32	s7, s15
 80016f0:	3740      	adds	r7, #64	; 0x40
 80016f2:	46bd      	mov	sp, r7
 80016f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080016f8 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b090      	sub	sp, #64	; 0x40
 80016fe:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001700:	201a      	movs	r0, #26
 8001702:	f7ff fe2f 	bl	8001364 <bno055_getVector>
 8001706:	eeb0 4a40 	vmov.f32	s8, s0
 800170a:	eef0 4a60 	vmov.f32	s9, s1
 800170e:	eeb0 5a41 	vmov.f32	s10, s2
 8001712:	eef0 5a61 	vmov.f32	s11, s3
 8001716:	eeb0 6a42 	vmov.f32	s12, s4
 800171a:	eef0 6a62 	vmov.f32	s13, s5
 800171e:	eeb0 7a43 	vmov.f32	s14, s6
 8001722:	eef0 7a63 	vmov.f32	s15, s7
 8001726:	ed87 4b08 	vstr	d4, [r7, #32]
 800172a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800172e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8001732:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001736:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800173a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800173e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001742:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001746:	ec49 8b14 	vmov	d4, r8, r9
 800174a:	ec45 4b15 	vmov	d5, r4, r5
 800174e:	ec41 0b16 	vmov	d6, r0, r1
 8001752:	ec43 2b17 	vmov	d7, r2, r3
}
 8001756:	eeb0 0a44 	vmov.f32	s0, s8
 800175a:	eef0 0a64 	vmov.f32	s1, s9
 800175e:	eeb0 1a45 	vmov.f32	s2, s10
 8001762:	eef0 1a65 	vmov.f32	s3, s11
 8001766:	eeb0 2a46 	vmov.f32	s4, s12
 800176a:	eef0 2a66 	vmov.f32	s5, s13
 800176e:	eeb0 3a47 	vmov.f32	s6, s14
 8001772:	eef0 3a67 	vmov.f32	s7, s15
 8001776:	3740      	adds	r7, #64	; 0x40
 8001778:	46bd      	mov	sp, r7
 800177a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800177e <init_cycle_queue>:
#include <stdio.h>
#include <string.h>
#include "cycle_queue_multi_array.h"

void init_cycle_queue(cycle_queue *queue)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
    queue -> front = -1;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800178c:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
    queue -> rear  = -1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001796:	f8c3 2b44 	str.w	r2, [r3, #2884]	; 0xb44
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <put_cycle_queue>:

void put_cycle_queue(cycle_queue *queue, float elemant[9][4])
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
    if((queue->front==0&&queue->rear==max-1)||(queue->rear+1==queue->front))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f8d3 3b40 	ldr.w	r3, [r3, #2880]	; 0xb40
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d104      	bne.n	80017c6 <put_cycle_queue+0x1e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 80017c2:	2b13      	cmp	r3, #19
 80017c4:	d008      	beq.n	80017d8 <put_cycle_queue+0x30>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f8d3 3b40 	ldr.w	r3, [r3, #2880]	; 0xb40
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d103      	bne.n	80017e0 <put_cycle_queue+0x38>
    {
        printf("Queu is overflow\n");
 80017d8:	481b      	ldr	r0, [pc, #108]	; (8001848 <put_cycle_queue+0xa0>)
 80017da:	f00b fe2f 	bl	800d43c <puts>
 80017de:	e02f      	b.n	8001840 <put_cycle_queue+0x98>
    }
    else
    {
        if(queue->rear==-1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ea:	d108      	bne.n	80017fe <put_cycle_queue+0x56>
        {
            queue->front=0,queue->rear=0;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8c3 2b44 	str.w	r2, [r3, #2884]	; 0xb44
 80017fc:	e010      	b.n	8001820 <put_cycle_queue+0x78>
        }
        else if(queue->rear==max-1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 8001804:	2b13      	cmp	r3, #19
 8001806:	d104      	bne.n	8001812 <put_cycle_queue+0x6a>
        {
            queue->rear=0;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f8c3 2b44 	str.w	r2, [r3, #2884]	; 0xb44
 8001810:	e006      	b.n	8001820 <put_cycle_queue+0x78>
        }
        else
        {
            queue->rear++;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8c3 2b44 	str.w	r2, [r3, #2884]	; 0xb44

        }
        memcpy(queue->array[queue->rear],elemant,500);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f8d3 2b44 	ldr.w	r2, [r3, #2884]	; 0xb44
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4413      	add	r3, r2
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f00b f8f9 	bl	800ca30 <memcpy>
    }
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	0800f90c 	.word	0x0800f90c

0800184c <next_cycle_queue>:
        }
    }
}

void next_cycle_queue(cycle_queue *queue)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
    if(queue->front ==-1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f8d3 3b40 	ldr.w	r3, [r3, #2880]	; 0xb40
 800185a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800185e:	d103      	bne.n	8001868 <next_cycle_queue+0x1c>
    {
        printf("Queue is underflow\n");
 8001860:	4815      	ldr	r0, [pc, #84]	; (80018b8 <next_cycle_queue+0x6c>)
 8001862:	f00b fdeb 	bl	800d43c <puts>
        else
        {
            queue->front++;
        }
    }
}
 8001866:	e023      	b.n	80018b0 <next_cycle_queue+0x64>
        if(queue->front==queue->rear)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f8d3 3b44 	ldr.w	r3, [r3, #2884]	; 0xb44
 8001874:	429a      	cmp	r2, r3
 8001876:	d10a      	bne.n	800188e <next_cycle_queue+0x42>
            queue->front=-1 ,queue->rear=-1;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187e:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001888:	f8c3 2b44 	str.w	r2, [r3, #2884]	; 0xb44
}
 800188c:	e010      	b.n	80018b0 <next_cycle_queue+0x64>
        else if(queue->front==max-1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8d3 3b40 	ldr.w	r3, [r3, #2880]	; 0xb40
 8001894:	2b13      	cmp	r3, #19
 8001896:	d104      	bne.n	80018a2 <next_cycle_queue+0x56>
            queue->front=0;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
}
 80018a0:	e006      	b.n	80018b0 <next_cycle_queue+0x64>
            queue->front++;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f8d3 3b40 	ldr.w	r3, [r3, #2880]	; 0xb40
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	0800f920 	.word	0x0800f920

080018bc <check_cycle_queue_empty>:

int check_cycle_queue_empty(cycle_queue *queue)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
       if(queue->front ==-1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3b40 	ldr.w	r3, [r3, #2880]	; 0xb40
 80018ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018ce:	d104      	bne.n	80018da <check_cycle_queue_empty+0x1e>
        {
            printf("Queue is Empty\n");
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <check_cycle_queue_empty+0x28>)
 80018d2:	f00b fdb3 	bl	800d43c <puts>
            return 1;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <check_cycle_queue_empty+0x20>
        }
        else
        {
            return 0;
 80018da:	2300      	movs	r3, #0
        }
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0800f934 	.word	0x0800f934

080018e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_DMA_Init+0x4c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a0f      	ldr	r2, [pc, #60]	; (8001934 <MX_DMA_Init+0x4c>)
 80018f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <MX_DMA_Init+0x4c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	203a      	movs	r0, #58	; 0x3a
 8001910:	f006 ff4d 	bl	80087ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001914:	203a      	movs	r0, #58	; 0x3a
 8001916:	f006 ff66 	bl	80087e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	2046      	movs	r0, #70	; 0x46
 8001920:	f006 ff45 	bl	80087ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001924:	2046      	movs	r0, #70	; 0x46
 8001926:	f006 ff5e 	bl	80087e6 <HAL_NVIC_EnableIRQ>

}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800

08001938 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b36      	ldr	r3, [pc, #216]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a35      	ldr	r2, [pc, #212]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0304 	and.w	r3, r3, #4
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a2e      	ldr	r2, [pc, #184]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <MX_GPIO_Init+0xf4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <MX_GPIO_Init+0xf4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <MX_GPIO_Init+0xf4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <MX_GPIO_Init+0xf4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a20      	ldr	r2, [pc, #128]	; (8001a2c <MX_GPIO_Init+0xf4>)
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <MX_GPIO_Init+0xf4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, XSHUT_VL53L0x_chin_Pin|XSHUT_VL53L0x_forehead_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2103      	movs	r1, #3
 80019c2:	481b      	ldr	r0, [pc, #108]	; (8001a30 <MX_GPIO_Init+0xf8>)
 80019c4:	f007 fcb0 	bl	8009328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2120      	movs	r1, #32
 80019cc:	4819      	ldr	r0, [pc, #100]	; (8001a34 <MX_GPIO_Init+0xfc>)
 80019ce:	f007 fcab 	bl	8009328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_GPIO_Init+0x100>)
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <MX_GPIO_Init+0xf8>)
 80019e8:	f007 fb1a 	bl	8009020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = XSHUT_VL53L0x_chin_Pin|XSHUT_VL53L0x_forehead_Pin;
 80019ec:	2303      	movs	r3, #3
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <MX_GPIO_Init+0xf8>)
 8001a04:	f007 fb0c 	bl	8009020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_GPIO_Init+0xfc>)
 8001a20:	f007 fafe 	bl	8009020 <HAL_GPIO_Init>

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	10210000 	.word	0x10210000

08001a3c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <MX_I2C1_Init+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_I2C1_Init+0x58>)
 8001a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a7a:	f007 fc6f 	bl	800935c <HAL_I2C_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a84:	f000 f9d4 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20002bc0 	.word	0x20002bc0
 8001a90:	40005400 	.word	0x40005400
 8001a94:	00061a80 	.word	0x00061a80

08001a98 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_I2C2_Init+0x54>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_I2C2_Init+0x58>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ad6:	f007 fc41 	bl	800935c <HAL_I2C_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ae0:	f000 f9a6 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20002c14 	.word	0x20002c14
 8001aec:	40005800 	.word	0x40005800
 8001af0:	00061a80 	.word	0x00061a80

08001af4 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_I2C3_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_I2C3_Init+0x58>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b32:	f007 fc13 	bl	800935c <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 f978 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20002b6c 	.word	0x20002b6c
 8001b48:	40005c00 	.word	0x40005c00
 8001b4c:	00061a80 	.word	0x00061a80

08001b50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a64      	ldr	r2, [pc, #400]	; (8001d00 <HAL_I2C_MspInit+0x1b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d12c      	bne.n	8001bcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a62      	ldr	r2, [pc, #392]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	623b      	str	r3, [r7, #32]
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8e:	23c0      	movs	r3, #192	; 0xc0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b92:	2312      	movs	r3, #18
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b96:	2301      	movs	r3, #1
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4857      	ldr	r0, [pc, #348]	; (8001d08 <HAL_I2C_MspInit+0x1b8>)
 8001baa:	f007 fa39 	bl	8009020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	4b54      	ldr	r3, [pc, #336]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a53      	ldr	r2, [pc, #332]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001bca:	e094      	b.n	8001cf6 <HAL_I2C_MspInit+0x1a6>
  else if(i2cHandle->Instance==I2C2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a4e      	ldr	r2, [pc, #312]	; (8001d0c <HAL_I2C_MspInit+0x1bc>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d13e      	bne.n	8001c54 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a49      	ldr	r2, [pc, #292]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c04:	2304      	movs	r3, #4
 8001c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	483e      	ldr	r0, [pc, #248]	; (8001d08 <HAL_I2C_MspInit+0x1b8>)
 8001c10:	f007 fa06 	bl	8009020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1a:	2312      	movs	r3, #18
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c22:	2303      	movs	r3, #3
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c26:	2309      	movs	r3, #9
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4835      	ldr	r0, [pc, #212]	; (8001d08 <HAL_I2C_MspInit+0x1b8>)
 8001c32:	f007 f9f5 	bl	8009020 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
}
 8001c52:	e050      	b.n	8001cf6 <HAL_I2C_MspInit+0x1a6>
  else if(i2cHandle->Instance==I2C3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_I2C_MspInit+0x1c0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d14b      	bne.n	8001cf6 <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <HAL_I2C_MspInit+0x1c4>)
 8001cb4:	f007 f9b4 	bl	8009020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <HAL_I2C_MspInit+0x1c8>)
 8001cd6:	f007 f9a3 	bl	8009020 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_I2C_MspInit+0x1b4>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
}
 8001cf6:	bf00      	nop
 8001cf8:	3738      	adds	r7, #56	; 0x38
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005400 	.word	0x40005400
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40005800 	.word	0x40005800
 8001d10:	40005c00 	.word	0x40005c00
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020000 	.word	0x40020000

08001d1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d20:	f006 fbd4 	bl	80084cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d24:	f000 f81c 	bl	8001d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d28:	f7ff fe06 	bl	8001938 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d2c:	f7ff fddc 	bl	80018e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d30:	f006 fa02 	bl	8008138 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d34:	f006 fa2a 	bl	800818c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d38:	f7ff fe80 	bl	8001a3c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d3c:	f7ff feac 	bl	8001a98 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8001d40:	f006 fa4e 	bl	80081e0 <MX_USART6_UART_Init>
  MX_I2C3_Init();
 8001d44:	f7ff fed6 	bl	8001af4 <MX_I2C3_Init>
  MX_TIM10_Init();
 8001d48:	f006 f9aa 	bl	80080a0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <main+0x40>)
 8001d4e:	f009 fbfd 	bl	800b54c <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim11);

  setup();
 8001d52:	f004 fa55 	bl	8006200 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8001d56:	f004 fa9f 	bl	8006298 <loop>
 8001d5a:	e7fc      	b.n	8001d56 <main+0x3a>
 8001d5c:	20002c68 	.word	0x20002c68

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b094      	sub	sp, #80	; 0x50
 8001d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	2230      	movs	r2, #48	; 0x30
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00a fe6c 	bl	800ca4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <SystemClock_Config+0xc8>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <SystemClock_Config+0xc8>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	; 0x40
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <SystemClock_Config+0xc8>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <SystemClock_Config+0xcc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <SystemClock_Config+0xcc>)
 8001daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <SystemClock_Config+0xcc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dc4:	2310      	movs	r3, #16
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	4618      	mov	r0, r3
 8001de6:	f008 feed 	bl	800abc4 <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001df0:	f000 f81e 	bl	8001e30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2103      	movs	r1, #3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f009 f94f 	bl	800b0b4 <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e1c:	f000 f808 	bl	8001e30 <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3750      	adds	r7, #80	; 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <_ZN3ros3MsgC1Ev+0x1c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	0800ffec 	.word	0x0800ffec

08001e80 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
      data()
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ffe8 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ffcf 	bl	8001e3e <_ZN3ros4TimeC1Ev>
    {
    }
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	0800ffd4 	.word	0x0800ffd4

08001eb0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6859      	ldr	r1, [r3, #4]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	b2ca      	uxtb	r2, r1
 8001eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	0a19      	lsrs	r1, r3, #8
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	0c19      	lsrs	r1, r3, #16
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3302      	adds	r3, #2
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	0e19      	lsrs	r1, r3, #24
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3303      	adds	r3, #3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	b2ca      	uxtb	r2, r1
 8001f00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3304      	adds	r3, #4
 8001f06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6899      	ldr	r1, [r3, #8]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	4413      	add	r3, r2
 8001f12:	b2ca      	uxtb	r2, r1
 8001f14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	0a19      	lsrs	r1, r3, #8
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	0c19      	lsrs	r1, r3, #16
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	3302      	adds	r3, #2
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	4413      	add	r3, r2
 8001f36:	b2ca      	uxtb	r2, r1
 8001f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0e19      	lsrs	r1, r3, #24
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3303      	adds	r3, #3
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	b2ca      	uxtb	r2, r1
 8001f4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]
      return offset;
 8001f52:	68fb      	ldr	r3, [r7, #12]
    }
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3301      	adds	r3, #1
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	440b      	add	r3, r1
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3302      	adds	r3, #2
 8001f9a:	6839      	ldr	r1, [r7, #0]
 8001f9c:	440b      	add	r3, r1
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3303      	adds	r3, #3
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	440b      	add	r3, r1
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	061b      	lsls	r3, r3, #24
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	440b      	add	r3, r1
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3302      	adds	r3, #2
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	3303      	adds	r3, #3
 8002006:	6839      	ldr	r1, [r7, #0]
 8002008:	440b      	add	r3, r1
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
     return offset;
 800201a:	68fb      	ldr	r3, [r7, #12]
    }
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	0800f944 	.word	0x0800f944

08002044 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	0800f954 	.word	0x0800f954

08002060 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff fef8 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8002070:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	809a      	strh	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a06      	ldr	r2, [pc, #24]	; (80020a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800208c:	611a      	str	r2, [r3, #16]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	615a      	str	r2, [r3, #20]
    {
    }
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0800ffbc 	.word	0x0800ffbc
 80020a4:	0800f978 	.word	0x0800f978

080020a8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8899      	ldrh	r1, [r3, #4]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	b2ca      	uxtb	r2, r1
 80020c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b299      	uxth	r1, r3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	3301      	adds	r3, #1
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3302      	adds	r3, #2
 80020dc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f886 	bl	80001f4 <strlen>
 80020e8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	69b9      	ldr	r1, [r7, #24]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 fd94 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	3304      	adds	r3, #4
 80020fc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	18d0      	adds	r0, r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4619      	mov	r1, r3
 800210c:	f00a fc90 	bl	800ca30 <memcpy>
      offset += length_topic_name;
 8002110:	69fa      	ldr	r2, [r7, #28]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	4413      	add	r3, r2
 8002116:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f869 	bl	80001f4 <strlen>
 8002122:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4413      	add	r3, r2
 800212a:	6979      	ldr	r1, [r7, #20]
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fd77 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	18d0      	adds	r0, r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4619      	mov	r1, r3
 8002146:	f00a fc73 	bl	800ca30 <memcpy>
      offset += length_message_type;
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4413      	add	r3, r2
 8002150:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f84c 	bl	80001f4 <strlen>
 800215c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	6939      	ldr	r1, [r7, #16]
 8002166:	4618      	mov	r0, r3
 8002168:	f004 fd5a 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3304      	adds	r3, #4
 8002170:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	18d0      	adds	r0, r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4619      	mov	r1, r3
 8002180:	f00a fc56 	bl	800ca30 <memcpy>
      offset += length_md5sum;
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4413      	add	r3, r2
 800218a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	b2ca      	uxtb	r2, r1
 800219c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	0a19      	lsrs	r1, r3, #8
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	b2ca      	uxtb	r2, r1
 80021ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	0c19      	lsrs	r1, r3, #16
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3302      	adds	r3, #2
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	b2ca      	uxtb	r2, r1
 80021bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	0e19      	lsrs	r1, r3, #24
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3303      	adds	r3, #3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3304      	adds	r3, #4
 80021d2:	61fb      	str	r3, [r7, #28]
      return offset;
 80021d4:	69fb      	ldr	r3, [r7, #28]
    }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08a      	sub	sp, #40	; 0x28
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	889b      	ldrh	r3, [r3, #4]
 80021fe:	b21a      	sxth	r2, r3
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	3301      	adds	r3, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	440b      	add	r3, r1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	b21b      	sxth	r3, r3
 8002212:	b29a      	uxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	3302      	adds	r3, #2
 800221c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	441a      	add	r2, r3
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fd16 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	3304      	adds	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	4413      	add	r3, r2
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	429a      	cmp	r2, r3
 8002244:	d20c      	bcs.n	8002260 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	441a      	add	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3b01      	subs	r3, #1
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	440b      	add	r3, r1
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	3301      	adds	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
 800225e:	e7ec      	b.n	800223a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	4413      	add	r3, r2
 8002266:	3b01      	subs	r3, #1
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	4413      	add	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	3b01      	subs	r3, #1
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	441a      	add	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4413      	add	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	441a      	add	r2, r3
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f004 fce3 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3304      	adds	r3, #4
 800229a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	623b      	str	r3, [r7, #32]
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	6a3a      	ldr	r2, [r7, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d20c      	bcs.n	80022c6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	441a      	add	r2, r3
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	440b      	add	r3, r1
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	3301      	adds	r3, #1
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	e7ec      	b.n	80022a0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	3b01      	subs	r3, #1
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3b01      	subs	r3, #1
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	441a      	add	r2, r3
 80022f0:	f107 030c 	add.w	r3, r7, #12
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f004 fcb0 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	3304      	adds	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	61fb      	str	r3, [r7, #28]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	429a      	cmp	r2, r3
 8002310:	d20c      	bcs.n	800232c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	441a      	add	r2, r3
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3b01      	subs	r3, #1
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	440b      	add	r3, r1
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3301      	adds	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e7ec      	b.n	8002306 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4413      	add	r3, r2
 8002332:	3b01      	subs	r3, #1
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4413      	add	r3, r2
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	3b01      	subs	r3, #1
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	441a      	add	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4413      	add	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	440a      	add	r2, r1
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	3301      	adds	r3, #1
 8002368:	6839      	ldr	r1, [r7, #0]
 800236a:	440b      	add	r3, r1
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	4313      	orrs	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	3302      	adds	r3, #2
 800237a:	6839      	ldr	r1, [r7, #0]
 800237c:	440b      	add	r3, r1
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	4313      	orrs	r3, r2
 8002384:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3303      	adds	r3, #3
 800238c:	6839      	ldr	r1, [r7, #0]
 800238e:	440b      	add	r3, r1
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	061b      	lsls	r3, r3, #24
 8002394:	4313      	orrs	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	3304      	adds	r3, #4
 80023a2:	61bb      	str	r3, [r7, #24]
     return offset;
 80023a4:	69bb      	ldr	r3, [r7, #24]
    }
 80023a6:	4618      	mov	r0, r3
 80023a8:	3728      	adds	r7, #40	; 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	4b03      	ldr	r3, [pc, #12]	; (80023c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	0800f97c 	.word	0x0800f97c

080023cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	0800f998 	.word	0x0800f998

080023e8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fd34 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	711a      	strb	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002408:	609a      	str	r2, [r3, #8]
    {
    }
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	0800ffa4 	.word	0x0800ffa4
 8002418:	0800f978 	.word	0x0800f978

0800241c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	7912      	ldrb	r2, [r2, #4]
 8002434:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fd fed7 	bl	80001f4 <strlen>
 8002446:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	4413      	add	r3, r2
 800244e:	68b9      	ldr	r1, [r7, #8]
 8002450:	4618      	mov	r0, r3
 8002452:	f004 fbe5 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3304      	adds	r3, #4
 800245a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	18d0      	adds	r0, r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	4619      	mov	r1, r3
 800246a:	f00a fae1 	bl	800ca30 <memcpy>
      offset += length_msg;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4413      	add	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
      return offset;
 8002476:	68fb      	ldr	r3, [r7, #12]
    }
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4413      	add	r3, r2
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	3301      	adds	r3, #1
 800249e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	441a      	add	r2, r3
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f004 fbd5 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	3304      	adds	r3, #4
 80024b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d20c      	bcs.n	80024e2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	441a      	add	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3b01      	subs	r3, #1
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	440b      	add	r3, r1
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e7ec      	b.n	80024bc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	3b01      	subs	r3, #1
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	441a      	add	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
     return offset;
 8002506:	693b      	ldr	r3, [r7, #16]
    }
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	0800f9bc 	.word	0x0800f9bc

0800252c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	4b03      	ldr	r3, [pc, #12]	; (8002544 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	0800f9d0 	.word	0x0800f9d0

08002548 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fc84 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	615a      	str	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800ff8c 	.word	0x0800ff8c

080025a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	b2ca      	uxtb	r2, r1
 80025be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	0a19      	lsrs	r1, r3, #8
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	3301      	adds	r3, #1
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	4413      	add	r3, r2
 80025ce:	b2ca      	uxtb	r2, r1
 80025d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	0c19      	lsrs	r1, r3, #16
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	3302      	adds	r3, #2
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	b2ca      	uxtb	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0e19      	lsrs	r1, r3, #24
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	3303      	adds	r3, #3
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	4413      	add	r3, r2
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	3304      	adds	r3, #4
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	6a3a      	ldr	r2, [r7, #32]
 8002606:	429a      	cmp	r2, r3
 8002608:	d22b      	bcs.n	8002662 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	4413      	add	r3, r2
 8002620:	b2ca      	uxtb	r2, r1
 8002622:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	0a19      	lsrs	r1, r3, #8
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	3301      	adds	r3, #1
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	0c19      	lsrs	r1, r3, #16
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	3302      	adds	r3, #2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	0e19      	lsrs	r1, r3, #24
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3303      	adds	r3, #3
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3304      	adds	r3, #4
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	3301      	adds	r3, #1
 800265e:	623b      	str	r3, [r7, #32]
 8002660:	e7ce      	b.n	8002600 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	4413      	add	r3, r2
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	0a19      	lsrs	r1, r3, #8
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	3301      	adds	r3, #1
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	4413      	add	r3, r2
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	0c19      	lsrs	r1, r3, #16
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	3302      	adds	r3, #2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	b2ca      	uxtb	r2, r1
 8002692:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	0e19      	lsrs	r1, r3, #24
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	3303      	adds	r3, #3
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	4413      	add	r3, r2
 80026a2:	b2ca      	uxtb	r2, r1
 80026a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	3304      	adds	r3, #4
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80026ac:	2300      	movs	r3, #0
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d22b      	bcs.n	8002712 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80026c8:	68f9      	ldr	r1, [r7, #12]
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	b2ca      	uxtb	r2, r1
 80026d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	0a19      	lsrs	r1, r3, #8
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	3301      	adds	r3, #1
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0c19      	lsrs	r1, r3, #16
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	3302      	adds	r3, #2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	b2ca      	uxtb	r2, r1
 80026f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0e19      	lsrs	r1, r3, #24
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3303      	adds	r3, #3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	b2ca      	uxtb	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	3304      	adds	r3, #4
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	e7ce      	b.n	80026b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69d9      	ldr	r1, [r3, #28]
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4413      	add	r3, r2
 800271c:	b2ca      	uxtb	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	0a19      	lsrs	r1, r3, #8
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	3301      	adds	r3, #1
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	4413      	add	r3, r2
 800272e:	b2ca      	uxtb	r2, r1
 8002730:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	0c19      	lsrs	r1, r3, #16
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3302      	adds	r3, #2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	4413      	add	r3, r2
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	0e19      	lsrs	r1, r3, #24
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	3303      	adds	r3, #3
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	4413      	add	r3, r2
 8002752:	b2ca      	uxtb	r2, r1
 8002754:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	3304      	adds	r3, #4
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	429a      	cmp	r2, r3
 8002768:	d228      	bcs.n	80027bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd fd3c 	bl	80001f4 <strlen>
 800277c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	4413      	add	r3, r2
 8002784:	6979      	ldr	r1, [r7, #20]
 8002786:	4618      	mov	r0, r3
 8002788:	f004 fa4a 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3304      	adds	r3, #4
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	18d0      	adds	r0, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4619      	mov	r1, r3
 80027a8:	f00a f942 	bl	800ca30 <memcpy>
      offset += length_stringsi;
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4413      	add	r3, r2
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	3301      	adds	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
 80027ba:	e7d1      	b.n	8002760 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80027be:	4618      	mov	r0, r3
 80027c0:	3728      	adds	r7, #40	; 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08e      	sub	sp, #56	; 0x38
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e0:	3301      	adds	r3, #1
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	6a3a      	ldr	r2, [r7, #32]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f2:	3302      	adds	r3, #2
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	6a3a      	ldr	r2, [r7, #32]
 80027fe:	4313      	orrs	r3, r2
 8002800:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002804:	3303      	adds	r3, #3
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	4413      	add	r3, r2
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	061b      	lsls	r3, r3, #24
 800280e:	6a3a      	ldr	r2, [r7, #32]
 8002810:	4313      	orrs	r3, r2
 8002812:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	3304      	adds	r3, #4
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	6a3a      	ldr	r2, [r7, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d90a      	bls.n	800283a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f00a fe0c 	bl	800d44c <realloc>
 8002834:	4602      	mov	r2, r0
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002840:	2300      	movs	r3, #0
 8002842:	633b      	str	r3, [r7, #48]	; 0x30
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284a:	429a      	cmp	r2, r3
 800284c:	d236      	bcs.n	80028bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002856:	6839      	ldr	r1, [r7, #0]
 8002858:	440a      	add	r2, r1
 800285a:	7812      	ldrb	r2, [r2, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002864:	3301      	adds	r3, #1
 8002866:	6839      	ldr	r1, [r7, #0]
 8002868:	440b      	add	r3, r1
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002876:	3302      	adds	r3, #2
 8002878:	6839      	ldr	r1, [r7, #0]
 800287a:	440b      	add	r3, r1
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002888:	3303      	adds	r3, #3
 800288a:	6839      	ldr	r1, [r7, #0]
 800288c:	440b      	add	r3, r1
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800289c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289e:	3304      	adds	r3, #4
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	3208      	adds	r2, #8
 80028b0:	6812      	ldr	r2, [r2, #0]
 80028b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	3301      	adds	r3, #1
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ba:	e7c3      	b.n	8002844 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	4413      	add	r3, r2
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c8:	3301      	adds	r3, #1
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028da:	3302      	adds	r3, #2
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80028ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ec:	3303      	adds	r3, #3
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	4413      	add	r3, r2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80028fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fe:	3304      	adds	r3, #4
 8002900:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	429a      	cmp	r2, r3
 800290a:	d90a      	bls.n	8002922 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4619      	mov	r1, r3
 8002916:	4610      	mov	r0, r2
 8002918:	f00a fd98 	bl	800d44c <realloc>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002932:	429a      	cmp	r2, r3
 8002934:	d236      	bcs.n	80029a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	440a      	add	r2, r1
 8002942:	7812      	ldrb	r2, [r2, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294c:	3301      	adds	r3, #1
 800294e:	6839      	ldr	r1, [r7, #0]
 8002950:	440b      	add	r3, r1
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800295e:	3302      	adds	r3, #2
 8002960:	6839      	ldr	r1, [r7, #0]
 8002962:	440b      	add	r3, r1
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	3303      	adds	r3, #3
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	440b      	add	r3, r1
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	3304      	adds	r3, #4
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699a      	ldr	r2, [r3, #24]
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	3214      	adds	r2, #20
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	3301      	adds	r3, #1
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a2:	e7c3      	b.n	800292c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b0:	3301      	adds	r3, #1
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4313      	orrs	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	3302      	adds	r3, #2
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d4:	3303      	adds	r3, #3
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	3304      	adds	r3, #4
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d90a      	bls.n	8002a0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4619      	mov	r1, r3
 80029fe:	4610      	mov	r0, r2
 8002a00:	f00a fd24 	bl	800d44c <realloc>
 8002a04:	4602      	mov	r2, r0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a10:	2300      	movs	r3, #0
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d23f      	bcs.n	8002a9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	441a      	add	r2, r3
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 f916 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a32:	3304      	adds	r3, #4
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d20c      	bcs.n	8002a60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	441a      	add	r2, r3
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	440b      	add	r3, r1
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5e:	e7ec      	b.n	8002a3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	3b01      	subs	r3, #1
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a72:	3b01      	subs	r3, #1
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	441a      	add	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	3220      	adds	r2, #32
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	3301      	adds	r3, #1
 8002a9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9c:	e7ba      	b.n	8002a14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3738      	adds	r7, #56	; 0x38
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	0800fe38 	.word	0x0800fe38

08002ac4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	4b03      	ldr	r3, [pc, #12]	; (8002adc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	0800f9f4 	.word	0x0800f9f4

08002ae0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	611a      	str	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4618      	mov	r0, r3
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
 8002b16:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68d8      	ldr	r0, [r3, #12]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6891      	ldr	r1, [r2, #8]
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4798      	blx	r3
 8002b2c:	4603      	mov	r3, r0
  };
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
  }
 8002b42:	4618      	mov	r0, r3
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_ZN13STM32Hardware10getRdmaIndEv>:

    //const static uint16_t rbuflen = 512;
    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <_ZN13STM32HardwareC1Ev+0x34>)
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    }
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20002d70 	.word	0x20002d70

08002bac <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f804 	bl	8002bc2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f009 f82a 	bl	800bc30 <HAL_UART_Receive_DMA>
    }
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7ff ffa8 	bl	8002b4e <_ZN13STM32Hardware10getRdmaIndEv>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	429c      	cmp	r4, r3
 8002c02:	bf14      	ite	ne
 8002c04:	2301      	movne	r3, #1
 8002c06:	2300      	moveq	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	791b      	ldrb	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002c2a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 8002c34:	68fb      	ldr	r3, [r7, #12]
    }
 8002c36:	4618      	mov	r0, r3
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd90      	pop	{r4, r7, pc}
	...

08002c40 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d108      	bne.n	8002c68 <_ZN13STM32Hardware5flushEv+0x28>
 8002c56:	4b28      	ldr	r3, [pc, #160]	; (8002cf8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	f083 0301 	eor.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <_ZN13STM32Hardware5flushEv+0x28>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <_ZN13STM32Hardware5flushEv+0x2a>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d03f      	beq.n	8002cee <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002c6e:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d031      	beq.n	8002ce8 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d20a      	bcs.n	8002caa <_ZN13STM32Hardware5flushEv+0x6a>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	e006      	b.n	8002cb8 <_ZN13STM32Hardware5flushEv+0x78>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8002cc4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	4413      	add	r3, r2
 8002ccc:	89fa      	ldrh	r2, [r7, #14]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f008 ff42 	bl	800bb58 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        }
        mutex = false;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
      }
    }
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	200010cc 	.word	0x200010cc

08002cfc <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
      int n = length;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d12:	bfa8      	it	ge
 8002d14:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002d18:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8002d20:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	4293      	cmp	r3, r2
 8002d28:	bf28      	it	cs
 8002d2a:	4613      	movcs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8002d34:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f009 fe75 	bl	800ca30 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608

      if(n != n_tail){
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d00b      	beq.n	8002d7a <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	18d1      	adds	r1, r2, r3
 8002d6e:	697a      	ldr	r2, [r7, #20]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	461a      	mov	r2, r3
 8002d76:	f009 fe5b 	bl	800ca30 <memcpy>
      }

      flush();
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff ff60 	bl	8002c40 <_ZN13STM32Hardware5flushEv>
    }
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	f005 fc02 	bl	8008598 <HAL_GetTick>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff f858 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8002db0:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff f83c 	bl	8001e3e <_ZN3ros4TimeC1Ev>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002dca:	611a      	str	r2, [r3, #16]
    {
    }
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	0800ff48 	.word	0x0800ff48
 8002ddc:	0800f978 	.word	0x0800f978

08002de0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	b2ca      	uxtb	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0a19      	lsrs	r1, r3, #8
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3301      	adds	r3, #1
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	b2ca      	uxtb	r2, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0c19      	lsrs	r1, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3302      	adds	r3, #2
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	b2ca      	uxtb	r2, r1
 8002e1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	0e19      	lsrs	r1, r3, #24
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3303      	adds	r3, #3
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	b2ca      	uxtb	r2, r1
 8002e30:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3304      	adds	r3, #4
 8002e36:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6899      	ldr	r1, [r3, #8]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	b2ca      	uxtb	r2, r1
 8002e44:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	0a19      	lsrs	r1, r3, #8
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	b2ca      	uxtb	r2, r1
 8002e56:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	0c19      	lsrs	r1, r3, #16
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3302      	adds	r3, #2
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	4413      	add	r3, r2
 8002e66:	b2ca      	uxtb	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	0e19      	lsrs	r1, r3, #24
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3303      	adds	r3, #3
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	b2ca      	uxtb	r2, r1
 8002e7a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68d9      	ldr	r1, [r3, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b2ca      	uxtb	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a19      	lsrs	r1, r3, #8
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b2ca      	uxtb	r2, r1
 8002ea0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	0c19      	lsrs	r1, r3, #16
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	3302      	adds	r3, #2
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b2ca      	uxtb	r2, r1
 8002eb2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0e19      	lsrs	r1, r3, #24
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3303      	adds	r3, #3
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	b2ca      	uxtb	r2, r1
 8002ec4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd f98f 	bl	80001f4 <strlen>
 8002ed6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 fe9d 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	18d0      	adds	r0, r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f009 fd99 	bl	800ca30 <memcpy>
      offset += length_frame_id;
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f06:	68fb      	ldr	r3, [r7, #12]
    }
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	3301      	adds	r3, #1
 8002f34:	6839      	ldr	r1, [r7, #0]
 8002f36:	440b      	add	r3, r1
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3302      	adds	r3, #2
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	440b      	add	r3, r1
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	041b      	lsls	r3, r3, #16
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	3303      	adds	r3, #3
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	440b      	add	r3, r1
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3304      	adds	r3, #4
 8002f72:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	6839      	ldr	r1, [r7, #0]
 8002f8c:	440b      	add	r3, r1
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	6839      	ldr	r1, [r7, #0]
 8002fa2:	440b      	add	r3, r1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	041b      	lsls	r3, r3, #16
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3303      	adds	r3, #3
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	440b      	add	r3, r1
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	440b      	add	r3, r1
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	6839      	ldr	r1, [r7, #0]
 8002ff8:	440b      	add	r3, r1
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3303      	adds	r3, #3
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	440b      	add	r3, r1
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	061b      	lsls	r3, r3, #24
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	3304      	adds	r3, #4
 800301e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	441a      	add	r2, r3
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f003 fe15 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	3304      	adds	r3, #4
 8003036:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4413      	add	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	d20c      	bcs.n	8003062 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	441a      	add	r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3b01      	subs	r3, #1
 8003052:	6839      	ldr	r1, [r7, #0]
 8003054:	440b      	add	r3, r1
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e7ec      	b.n	800303c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	3b01      	subs	r3, #1
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	3b01      	subs	r3, #1
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
     return offset;
 8003086:	693b      	ldr	r3, [r7, #16]
    }
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	0800fa18 	.word	0x0800fa18

080030ac <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	0800fa28 	.word	0x0800fa28

080030c8 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fe fec4 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	0800ff30 	.word	0x0800ff30

08003124 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003124:	b480      	push	{r7}
 8003126:	b08d      	sub	sp, #52	; 0x34
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003138:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 800313c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003140:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003142:	6838      	ldr	r0, [r7, #0]
 8003144:	4401      	add	r1, r0
 8003146:	b2d3      	uxtb	r3, r2
 8003148:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800314a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	0a02      	lsrs	r2, r0, #8
 8003158:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800315c:	0a0b      	lsrs	r3, r1, #8
 800315e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003160:	3101      	adds	r1, #1
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	4401      	add	r1, r0
 8003166:	b2d3      	uxtb	r3, r2
 8003168:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800316a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	0c02      	lsrs	r2, r0, #16
 8003178:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800317c:	0c0b      	lsrs	r3, r1, #16
 800317e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003180:	3102      	adds	r1, #2
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	4401      	add	r1, r0
 8003186:	b2d3      	uxtb	r3, r2
 8003188:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800318a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	0e02      	lsrs	r2, r0, #24
 8003198:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800319c:	0e0b      	lsrs	r3, r1, #24
 800319e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031a0:	3103      	adds	r1, #3
 80031a2:	6838      	ldr	r0, [r7, #0]
 80031a4:	4401      	add	r1, r0
 80031a6:	b2d3      	uxtb	r3, r2
 80031a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80031aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	000a      	movs	r2, r1
 80031b8:	2300      	movs	r3, #0
 80031ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031bc:	3104      	adds	r1, #4
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	4401      	add	r1, r0
 80031c2:	b2d3      	uxtb	r3, r2
 80031c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80031c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	0a0a      	lsrs	r2, r1, #8
 80031d4:	2300      	movs	r3, #0
 80031d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d8:	3105      	adds	r1, #5
 80031da:	6838      	ldr	r0, [r7, #0]
 80031dc:	4401      	add	r1, r0
 80031de:	b2d3      	uxtb	r3, r2
 80031e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80031e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	0c0a      	lsrs	r2, r1, #16
 80031f0:	2300      	movs	r3, #0
 80031f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f4:	3106      	adds	r1, #6
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	4401      	add	r1, r0
 80031fa:	b2d3      	uxtb	r3, r2
 80031fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80031fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	0e0a      	lsrs	r2, r1, #24
 800320c:	2300      	movs	r3, #0
 800320e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003210:	3107      	adds	r1, #7
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	4401      	add	r1, r0
 8003216:	b2d3      	uxtb	r3, r2
 8003218:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	3308      	adds	r3, #8
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003226:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800322a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003230:	6838      	ldr	r0, [r7, #0]
 8003232:	4401      	add	r1, r0
 8003234:	b2d3      	uxtb	r3, r2
 8003236:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003238:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	0a02      	lsrs	r2, r0, #8
 8003246:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800324a:	0a0b      	lsrs	r3, r1, #8
 800324c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800324e:	3101      	adds	r1, #1
 8003250:	6838      	ldr	r0, [r7, #0]
 8003252:	4401      	add	r1, r0
 8003254:	b2d3      	uxtb	r3, r2
 8003256:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003258:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	0c02      	lsrs	r2, r0, #16
 8003266:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800326a:	0c0b      	lsrs	r3, r1, #16
 800326c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800326e:	3102      	adds	r1, #2
 8003270:	6838      	ldr	r0, [r7, #0]
 8003272:	4401      	add	r1, r0
 8003274:	b2d3      	uxtb	r3, r2
 8003276:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003278:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	0e02      	lsrs	r2, r0, #24
 8003286:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800328a:	0e0b      	lsrs	r3, r1, #24
 800328c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800328e:	3103      	adds	r1, #3
 8003290:	6838      	ldr	r0, [r7, #0]
 8003292:	4401      	add	r1, r0
 8003294:	b2d3      	uxtb	r3, r2
 8003296:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003298:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	000a      	movs	r2, r1
 80032a6:	2300      	movs	r3, #0
 80032a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032aa:	3104      	adds	r1, #4
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	4401      	add	r1, r0
 80032b0:	b2d3      	uxtb	r3, r2
 80032b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80032b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	0a0a      	lsrs	r2, r1, #8
 80032c2:	2300      	movs	r3, #0
 80032c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c6:	3105      	adds	r1, #5
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	4401      	add	r1, r0
 80032cc:	b2d3      	uxtb	r3, r2
 80032ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80032d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	0c0a      	lsrs	r2, r1, #16
 80032de:	2300      	movs	r3, #0
 80032e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032e2:	3106      	adds	r1, #6
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	4401      	add	r1, r0
 80032e8:	b2d3      	uxtb	r3, r2
 80032ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80032ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	0e0a      	lsrs	r2, r1, #24
 80032fa:	2300      	movs	r3, #0
 80032fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032fe:	3107      	adds	r1, #7
 8003300:	6838      	ldr	r0, [r7, #0]
 8003302:	4401      	add	r1, r0
 8003304:	b2d3      	uxtb	r3, r2
 8003306:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	3308      	adds	r3, #8
 800330c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003314:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003318:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800331c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800331e:	6838      	ldr	r0, [r7, #0]
 8003320:	4401      	add	r1, r0
 8003322:	b2d3      	uxtb	r3, r2
 8003324:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003326:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	0a02      	lsrs	r2, r0, #8
 8003334:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003338:	0a0b      	lsrs	r3, r1, #8
 800333a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800333c:	3101      	adds	r1, #1
 800333e:	6838      	ldr	r0, [r7, #0]
 8003340:	4401      	add	r1, r0
 8003342:	b2d3      	uxtb	r3, r2
 8003344:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003346:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	0c02      	lsrs	r2, r0, #16
 8003354:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003358:	0c0b      	lsrs	r3, r1, #16
 800335a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800335c:	3102      	adds	r1, #2
 800335e:	6838      	ldr	r0, [r7, #0]
 8003360:	4401      	add	r1, r0
 8003362:	b2d3      	uxtb	r3, r2
 8003364:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003366:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	0e02      	lsrs	r2, r0, #24
 8003374:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003378:	0e0b      	lsrs	r3, r1, #24
 800337a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800337c:	3103      	adds	r1, #3
 800337e:	6838      	ldr	r0, [r7, #0]
 8003380:	4401      	add	r1, r0
 8003382:	b2d3      	uxtb	r3, r2
 8003384:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003386:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	000a      	movs	r2, r1
 8003394:	2300      	movs	r3, #0
 8003396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003398:	3104      	adds	r1, #4
 800339a:	6838      	ldr	r0, [r7, #0]
 800339c:	4401      	add	r1, r0
 800339e:	b2d3      	uxtb	r3, r2
 80033a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80033a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	0a0a      	lsrs	r2, r1, #8
 80033b0:	2300      	movs	r3, #0
 80033b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b4:	3105      	adds	r1, #5
 80033b6:	6838      	ldr	r0, [r7, #0]
 80033b8:	4401      	add	r1, r0
 80033ba:	b2d3      	uxtb	r3, r2
 80033bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80033be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	0c0a      	lsrs	r2, r1, #16
 80033cc:	2300      	movs	r3, #0
 80033ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d0:	3106      	adds	r1, #6
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	4401      	add	r1, r0
 80033d6:	b2d3      	uxtb	r3, r2
 80033d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80033da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	0e0a      	lsrs	r2, r1, #24
 80033e8:	2300      	movs	r3, #0
 80033ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ec:	3107      	adds	r1, #7
 80033ee:	6838      	ldr	r0, [r7, #0]
 80033f0:	4401      	add	r1, r0
 80033f2:	b2d3      	uxtb	r3, r2
 80033f4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	3308      	adds	r3, #8
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003402:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8003406:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800340a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800340c:	6838      	ldr	r0, [r7, #0]
 800340e:	4401      	add	r1, r0
 8003410:	b2d3      	uxtb	r3, r2
 8003412:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8003414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	0a02      	lsrs	r2, r0, #8
 8003422:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003426:	0a0b      	lsrs	r3, r1, #8
 8003428:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800342a:	3101      	adds	r1, #1
 800342c:	6838      	ldr	r0, [r7, #0]
 800342e:	4401      	add	r1, r0
 8003430:	b2d3      	uxtb	r3, r2
 8003432:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	0c02      	lsrs	r2, r0, #16
 8003442:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003446:	0c0b      	lsrs	r3, r1, #16
 8003448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800344a:	3102      	adds	r1, #2
 800344c:	6838      	ldr	r0, [r7, #0]
 800344e:	4401      	add	r1, r0
 8003450:	b2d3      	uxtb	r3, r2
 8003452:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003454:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	0e02      	lsrs	r2, r0, #24
 8003462:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003466:	0e0b      	lsrs	r3, r1, #24
 8003468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800346a:	3103      	adds	r1, #3
 800346c:	6838      	ldr	r0, [r7, #0]
 800346e:	4401      	add	r1, r0
 8003470:	b2d3      	uxtb	r3, r2
 8003472:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003474:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	000a      	movs	r2, r1
 8003482:	2300      	movs	r3, #0
 8003484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003486:	3104      	adds	r1, #4
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	4401      	add	r1, r0
 800348c:	b2d3      	uxtb	r3, r2
 800348e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 8003490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	0a0a      	lsrs	r2, r1, #8
 800349e:	2300      	movs	r3, #0
 80034a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034a2:	3105      	adds	r1, #5
 80034a4:	6838      	ldr	r0, [r7, #0]
 80034a6:	4401      	add	r1, r0
 80034a8:	b2d3      	uxtb	r3, r2
 80034aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 80034ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	0c0a      	lsrs	r2, r1, #16
 80034ba:	2300      	movs	r3, #0
 80034bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034be:	3106      	adds	r1, #6
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	b2d3      	uxtb	r3, r2
 80034c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 80034c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	0e0a      	lsrs	r2, r1, #24
 80034d6:	2300      	movs	r3, #0
 80034d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034da:	3107      	adds	r1, #7
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	4401      	add	r1, r0
 80034e0:	b2d3      	uxtb	r3, r2
 80034e2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	3308      	adds	r3, #8
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80034ec:	4618      	mov	r0, r3
 80034ee:	3734      	adds	r7, #52	; 0x34
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80034f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034fc:	b0cf      	sub	sp, #316	; 0x13c
 80034fe:	af00      	add	r7, sp, #0
 8003500:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8003504:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800351a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800351e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003522:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	ea40 0402 	orr.w	r4, r0, r2
 8003534:	ea41 0503 	orr.w	r5, r1, r3
 8003538:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800353c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003540:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800354a:	4413      	add	r3, r2
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0219      	lsls	r1, r3, #8
 800355e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003562:	0210      	lsls	r0, r2, #8
 8003564:	ea44 0a00 	orr.w	sl, r4, r0
 8003568:	ea45 0b01 	orr.w	fp, r5, r1
 800356c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003570:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003574:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800357e:	4413      	add	r3, r2
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	b2da      	uxtb	r2, r3
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0419      	lsls	r1, r3, #16
 8003592:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003596:	0410      	lsls	r0, r2, #16
 8003598:	ea44 0300 	orr.w	r3, r4, r0
 800359c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80035a0:	ea45 0301 	orr.w	r3, r5, r1
 80035a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80035a8:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80035ac:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035b0:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80035b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035b8:	1cda      	adds	r2, r3, #3
 80035ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035be:	4413      	add	r3, r2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80035cc:	ea4f 6802 	mov.w	r8, r2, lsl #24
 80035d0:	ea40 0308 	orr.w	r3, r0, r8
 80035d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80035d8:	ea41 0309 	orr.w	r3, r1, r9
 80035dc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80035e0:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80035e4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80035e8:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80035ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80035f0:	1d1a      	adds	r2, r3, #4
 80035f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80035f6:	4413      	add	r3, r2
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	f04f 0000 	mov.w	r0, #0
 8003604:	f04f 0100 	mov.w	r1, #0
 8003608:	0011      	movs	r1, r2
 800360a:	2000      	movs	r0, #0
 800360c:	ea44 0300 	orr.w	r3, r4, r0
 8003610:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003614:	ea45 0301 	orr.w	r3, r5, r1
 8003618:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800361c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003620:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003624:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003628:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800362c:	1d5a      	adds	r2, r3, #5
 800362e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003632:	4413      	add	r3, r2
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	0211      	lsls	r1, r2, #8
 8003646:	2000      	movs	r0, #0
 8003648:	ea44 0300 	orr.w	r3, r4, r0
 800364c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003650:	ea45 0301 	orr.w	r3, r5, r1
 8003654:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003658:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800365c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003660:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8003664:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003668:	1d9a      	adds	r2, r3, #6
 800366a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800366e:	4413      	add	r3, r2
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	b2da      	uxtb	r2, r3
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	f04f 0000 	mov.w	r0, #0
 800367c:	f04f 0100 	mov.w	r1, #0
 8003680:	0411      	lsls	r1, r2, #16
 8003682:	2000      	movs	r0, #0
 8003684:	ea44 0300 	orr.w	r3, r4, r0
 8003688:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800368c:	ea45 0301 	orr.w	r3, r5, r1
 8003690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003694:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003698:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800369c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80036a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036a4:	1dda      	adds	r2, r3, #7
 80036a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	f04f 0000 	mov.w	r0, #0
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	0611      	lsls	r1, r2, #24
 80036be:	2000      	movs	r0, #0
 80036c0:	ea44 0300 	orr.w	r3, r4, r0
 80036c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036c8:	ea45 0301 	orr.w	r3, r5, r1
 80036cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036d0:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80036d4:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 80036d8:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80036dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80036e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80036e8:	3308      	adds	r3, #8
 80036ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036fa:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80036fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	f04f 0300 	mov.w	r3, #0
 8003710:	ea40 0402 	orr.w	r4, r0, r2
 8003714:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8003718:	430b      	orrs	r3, r1
 800371a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800371e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8003722:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003726:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800372a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003734:	4413      	add	r3, r2
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	f04f 0000 	mov.w	r0, #0
 8003742:	f04f 0100 	mov.w	r1, #0
 8003746:	0219      	lsls	r1, r3, #8
 8003748:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800374c:	0210      	lsls	r0, r2, #8
 800374e:	ea44 0300 	orr.w	r3, r4, r0
 8003752:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003756:	ea45 0301 	orr.w	r3, r5, r1
 800375a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800375e:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003762:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003766:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800376a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800376e:	1c9a      	adds	r2, r3, #2
 8003770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003774:	4413      	add	r3, r2
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	f04f 0000 	mov.w	r0, #0
 8003782:	f04f 0100 	mov.w	r1, #0
 8003786:	0419      	lsls	r1, r3, #16
 8003788:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800378c:	0410      	lsls	r0, r2, #16
 800378e:	ea44 0300 	orr.w	r3, r4, r0
 8003792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003796:	ea45 0301 	orr.w	r3, r5, r1
 800379a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800379e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80037a2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037a6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80037aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037ae:	1cda      	adds	r2, r3, #3
 80037b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037b4:	4413      	add	r3, r2
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	0a14      	lsrs	r4, r2, #8
 80037c0:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80037c4:	0613      	lsls	r3, r2, #24
 80037c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037ca:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80037ce:	4623      	mov	r3, r4
 80037d0:	4303      	orrs	r3, r0
 80037d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d6:	462b      	mov	r3, r5
 80037d8:	430b      	orrs	r3, r1
 80037da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037de:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 80037e2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037e6:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 80037ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80037f4:	4413      	add	r3, r2
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	0011      	movs	r1, r2
 8003808:	2000      	movs	r0, #0
 800380a:	ea44 0300 	orr.w	r3, r4, r0
 800380e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003812:	ea45 0301 	orr.w	r3, r5, r1
 8003816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800381a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800381e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003822:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003826:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800382a:	1d5a      	adds	r2, r3, #5
 800382c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003830:	4413      	add	r3, r2
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f04f 0000 	mov.w	r0, #0
 800383e:	f04f 0100 	mov.w	r1, #0
 8003842:	0211      	lsls	r1, r2, #8
 8003844:	2000      	movs	r0, #0
 8003846:	ea44 0300 	orr.w	r3, r4, r0
 800384a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800384e:	ea45 0301 	orr.w	r3, r5, r1
 8003852:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003856:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 800385a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800385e:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8003862:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003866:	1d9a      	adds	r2, r3, #6
 8003868:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800386c:	4413      	add	r3, r2
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f04f 0000 	mov.w	r0, #0
 800387a:	f04f 0100 	mov.w	r1, #0
 800387e:	0411      	lsls	r1, r2, #16
 8003880:	2000      	movs	r0, #0
 8003882:	ea44 0300 	orr.w	r3, r4, r0
 8003886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800388a:	ea45 0301 	orr.w	r3, r5, r1
 800388e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003892:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003896:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800389a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800389e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038a2:	1dda      	adds	r2, r3, #7
 80038a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80038a8:	4413      	add	r3, r2
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	f04f 0000 	mov.w	r0, #0
 80038b6:	f04f 0100 	mov.w	r1, #0
 80038ba:	0611      	lsls	r1, r2, #24
 80038bc:	2000      	movs	r0, #0
 80038be:	ea44 0300 	orr.w	r3, r4, r0
 80038c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038c6:	ea45 0301 	orr.w	r3, r5, r1
 80038ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80038ce:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80038d2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 80038d6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80038e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038e6:	3308      	adds	r3, #8
 80038e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80038f8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80038fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003904:	4413      	add	r3, r2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	ea40 0402 	orr.w	r4, r0, r2
 8003912:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003916:	430b      	orrs	r3, r1
 8003918:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800391c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003920:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003924:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003932:	4413      	add	r3, r2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f04f 0000 	mov.w	r0, #0
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	0219      	lsls	r1, r3, #8
 8003946:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800394a:	0210      	lsls	r0, r2, #8
 800394c:	ea44 0300 	orr.w	r3, r4, r0
 8003950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003954:	ea45 0301 	orr.w	r3, r5, r1
 8003958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800395c:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003960:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003964:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003968:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	f04f 0000 	mov.w	r0, #0
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	0419      	lsls	r1, r3, #16
 8003986:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800398a:	0410      	lsls	r0, r2, #16
 800398c:	ea44 0300 	orr.w	r3, r4, r0
 8003990:	67bb      	str	r3, [r7, #120]	; 0x78
 8003992:	ea45 0301 	orr.w	r3, r5, r1
 8003996:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003998:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800399c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039a0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80039a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039a8:	1cda      	adds	r2, r3, #3
 80039aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039ae:	4413      	add	r3, r2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	0a14      	lsrs	r4, r2, #8
 80039ba:	677c      	str	r4, [r7, #116]	; 0x74
 80039bc:	0613      	lsls	r3, r2, #24
 80039be:	673b      	str	r3, [r7, #112]	; 0x70
 80039c0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80039c4:	4623      	mov	r3, r4
 80039c6:	4303      	orrs	r3, r0
 80039c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ca:	462b      	mov	r3, r5
 80039cc:	430b      	orrs	r3, r1
 80039ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d0:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80039d4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80039d8:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 80039dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80039e0:	1d1a      	adds	r2, r3, #4
 80039e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f04f 0100 	mov.w	r1, #0
 80039f8:	0011      	movs	r1, r2
 80039fa:	2000      	movs	r0, #0
 80039fc:	ea44 0300 	orr.w	r3, r4, r0
 8003a00:	663b      	str	r3, [r7, #96]	; 0x60
 8003a02:	ea45 0301 	orr.w	r3, r5, r1
 8003a06:	667b      	str	r3, [r7, #100]	; 0x64
 8003a08:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003a0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a10:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003a14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a18:	1d5a      	adds	r2, r3, #5
 8003a1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a1e:	4413      	add	r3, r2
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	f04f 0000 	mov.w	r0, #0
 8003a2c:	f04f 0100 	mov.w	r1, #0
 8003a30:	0211      	lsls	r1, r2, #8
 8003a32:	2000      	movs	r0, #0
 8003a34:	ea44 0300 	orr.w	r3, r4, r0
 8003a38:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a3a:	ea45 0301 	orr.w	r3, r5, r1
 8003a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a40:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003a44:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003a48:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003a4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a50:	1d9a      	adds	r2, r3, #6
 8003a52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a56:	4413      	add	r3, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	f04f 0000 	mov.w	r0, #0
 8003a64:	f04f 0100 	mov.w	r1, #0
 8003a68:	0411      	lsls	r1, r2, #16
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	ea44 0300 	orr.w	r3, r4, r0
 8003a70:	653b      	str	r3, [r7, #80]	; 0x50
 8003a72:	ea45 0301 	orr.w	r3, r5, r1
 8003a76:	657b      	str	r3, [r7, #84]	; 0x54
 8003a78:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003a7c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a80:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8003a84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003a88:	1dda      	adds	r2, r3, #7
 8003a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	0611      	lsls	r1, r2, #24
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	ea44 0300 	orr.w	r3, r4, r0
 8003aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aaa:	ea45 0301 	orr.w	r3, r5, r1
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003ab4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 8003ab8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8003abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac0:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003ac4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003ac8:	3308      	adds	r3, #8
 8003aca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ada:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003ade:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8003ae2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	ea40 0402 	orr.w	r4, r0, r2
 8003af4:	643c      	str	r4, [r7, #64]	; 0x40
 8003af6:	430b      	orrs	r3, r1
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
 8003afa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003afe:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b02:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b10:	4413      	add	r3, r2
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	f04f 0000 	mov.w	r0, #0
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	0219      	lsls	r1, r3, #8
 8003b24:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003b28:	0210      	lsls	r0, r2, #8
 8003b2a:	ea44 0300 	orr.w	r3, r4, r0
 8003b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b30:	ea45 0301 	orr.w	r3, r5, r1
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b36:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8003b3a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b3e:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8003b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b46:	1c9a      	adds	r2, r3, #2
 8003b48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b4c:	4413      	add	r3, r2
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f04f 0000 	mov.w	r0, #0
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	0419      	lsls	r1, r3, #16
 8003b60:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003b64:	0410      	lsls	r0, r2, #16
 8003b66:	ea44 0300 	orr.w	r3, r4, r0
 8003b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6c:	ea45 0301 	orr.w	r3, r5, r1
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
 8003b72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003b76:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b7a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003b7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b82:	1cda      	adds	r2, r3, #3
 8003b84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b88:	4413      	add	r3, r2
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	0a14      	lsrs	r4, r2, #8
 8003b94:	62fc      	str	r4, [r7, #44]	; 0x2c
 8003b96:	0613      	lsls	r3, r2, #24
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b9a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	4303      	orrs	r3, r0
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003bae:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bb2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003bb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bba:	3304      	adds	r3, #4
 8003bbc:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003bc0:	4413      	add	r3, r2
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2dc      	uxtb	r4, r3
 8003bc6:	f04f 0500 	mov.w	r5, #0
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	0023      	movs	r3, r4
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	ea40 0402 	orr.w	r4, r0, r2
 8003bda:	61bc      	str	r4, [r7, #24]
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003be4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003be8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003bec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003bf0:	3305      	adds	r3, #5
 8003bf2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2dc      	uxtb	r4, r3
 8003bfc:	f04f 0500 	mov.w	r5, #0
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	0223      	lsls	r3, r4, #8
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	ea40 0402 	orr.w	r4, r0, r2
 8003c10:	613c      	str	r4, [r7, #16]
 8003c12:	430b      	orrs	r3, r1
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003c1a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c1e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c26:	3306      	adds	r3, #6
 8003c28:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	b2dc      	uxtb	r4, r3
 8003c32:	f04f 0500 	mov.w	r5, #0
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	f04f 0300 	mov.w	r3, #0
 8003c3e:	0423      	lsls	r3, r4, #16
 8003c40:	2200      	movs	r2, #0
 8003c42:	ea40 0402 	orr.w	r4, r0, r2
 8003c46:	60bc      	str	r4, [r7, #8]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003c50:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c54:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8003c58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c5c:	3307      	adds	r3, #7
 8003c5e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003c62:	4413      	add	r3, r2
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b2dc      	uxtb	r4, r3
 8003c68:	f04f 0500 	mov.w	r5, #0
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	0623      	lsls	r3, r4, #24
 8003c76:	2200      	movs	r2, #0
 8003c78:	ea40 0402 	orr.w	r4, r0, r2
 8003c7c:	603c      	str	r4, [r7, #0]
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c86:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 8003c8a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8003c8e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003c92:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003c96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 8003ca0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8003caa:	46bd      	mov	sp, r7
 8003cac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003cb0:	4770      	bx	lr
	...

08003cb4 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	4b03      	ldr	r3, [pc, #12]	; (8003ccc <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	0800fa4c 	.word	0x0800fa4c

08003cd0 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	0800fa68 	.word	0x0800fa68

08003cec <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe f8b2 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	0800ff18 	.word	0x0800ff18

08003d3c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003d3c:	b480      	push	{r7}
 8003d3e:	b08b      	sub	sp, #44	; 0x2c
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d50:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003d54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d5a:	6838      	ldr	r0, [r7, #0]
 8003d5c:	4401      	add	r1, r0
 8003d5e:	b2d3      	uxtb	r3, r2
 8003d60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003d62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	0a02      	lsrs	r2, r0, #8
 8003d70:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003d74:	0a0b      	lsrs	r3, r1, #8
 8003d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d78:	3101      	adds	r1, #1
 8003d7a:	6838      	ldr	r0, [r7, #0]
 8003d7c:	4401      	add	r1, r0
 8003d7e:	b2d3      	uxtb	r3, r2
 8003d80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003d82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	0c02      	lsrs	r2, r0, #16
 8003d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d94:	0c0b      	lsrs	r3, r1, #16
 8003d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d98:	3102      	adds	r1, #2
 8003d9a:	6838      	ldr	r0, [r7, #0]
 8003d9c:	4401      	add	r1, r0
 8003d9e:	b2d3      	uxtb	r3, r2
 8003da0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003da2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	0e02      	lsrs	r2, r0, #24
 8003db0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003db4:	0e0b      	lsrs	r3, r1, #24
 8003db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003db8:	3103      	adds	r1, #3
 8003dba:	6838      	ldr	r0, [r7, #0]
 8003dbc:	4401      	add	r1, r0
 8003dbe:	b2d3      	uxtb	r3, r2
 8003dc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003dc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	000a      	movs	r2, r1
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd4:	3104      	adds	r1, #4
 8003dd6:	6838      	ldr	r0, [r7, #0]
 8003dd8:	4401      	add	r1, r0
 8003dda:	b2d3      	uxtb	r3, r2
 8003ddc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003dde:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	0a0a      	lsrs	r2, r1, #8
 8003dec:	2300      	movs	r3, #0
 8003dee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df0:	3105      	adds	r1, #5
 8003df2:	6838      	ldr	r0, [r7, #0]
 8003df4:	4401      	add	r1, r0
 8003df6:	b2d3      	uxtb	r3, r2
 8003df8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003dfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	0c0a      	lsrs	r2, r1, #16
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e0c:	3106      	adds	r1, #6
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	4401      	add	r1, r0
 8003e12:	b2d3      	uxtb	r3, r2
 8003e14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003e16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	0e0a      	lsrs	r2, r1, #24
 8003e24:	2300      	movs	r3, #0
 8003e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e28:	3107      	adds	r1, #7
 8003e2a:	6838      	ldr	r0, [r7, #0]
 8003e2c:	4401      	add	r1, r0
 8003e2e:	b2d3      	uxtb	r3, r2
 8003e30:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	3308      	adds	r3, #8
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003e42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	b2d3      	uxtb	r3, r2
 8003e4e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003e50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	0a02      	lsrs	r2, r0, #8
 8003e5e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003e62:	0a0b      	lsrs	r3, r1, #8
 8003e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e66:	3101      	adds	r1, #1
 8003e68:	6838      	ldr	r0, [r7, #0]
 8003e6a:	4401      	add	r1, r0
 8003e6c:	b2d3      	uxtb	r3, r2
 8003e6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003e70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	0c02      	lsrs	r2, r0, #16
 8003e7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e82:	0c0b      	lsrs	r3, r1, #16
 8003e84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e86:	3102      	adds	r1, #2
 8003e88:	6838      	ldr	r0, [r7, #0]
 8003e8a:	4401      	add	r1, r0
 8003e8c:	b2d3      	uxtb	r3, r2
 8003e8e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003e90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	0e02      	lsrs	r2, r0, #24
 8003e9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ea2:	0e0b      	lsrs	r3, r1, #24
 8003ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea6:	3103      	adds	r1, #3
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	4401      	add	r1, r0
 8003eac:	b2d3      	uxtb	r3, r2
 8003eae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003eb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	000a      	movs	r2, r1
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ec2:	3104      	adds	r1, #4
 8003ec4:	6838      	ldr	r0, [r7, #0]
 8003ec6:	4401      	add	r1, r0
 8003ec8:	b2d3      	uxtb	r3, r2
 8003eca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003ecc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	0a0a      	lsrs	r2, r1, #8
 8003eda:	2300      	movs	r3, #0
 8003edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ede:	3105      	adds	r1, #5
 8003ee0:	6838      	ldr	r0, [r7, #0]
 8003ee2:	4401      	add	r1, r0
 8003ee4:	b2d3      	uxtb	r3, r2
 8003ee6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003ee8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	0c0a      	lsrs	r2, r1, #16
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003efa:	3106      	adds	r1, #6
 8003efc:	6838      	ldr	r0, [r7, #0]
 8003efe:	4401      	add	r1, r0
 8003f00:	b2d3      	uxtb	r3, r2
 8003f02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003f04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	0e0a      	lsrs	r2, r1, #24
 8003f12:	2300      	movs	r3, #0
 8003f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f16:	3107      	adds	r1, #7
 8003f18:	6838      	ldr	r0, [r7, #0]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	b2d3      	uxtb	r3, r2
 8003f1e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	3308      	adds	r3, #8
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003f2c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f36:	6838      	ldr	r0, [r7, #0]
 8003f38:	4401      	add	r1, r0
 8003f3a:	b2d3      	uxtb	r3, r2
 8003f3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	0a02      	lsrs	r2, r0, #8
 8003f4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003f50:	0a0b      	lsrs	r3, r1, #8
 8003f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f54:	3101      	adds	r1, #1
 8003f56:	6838      	ldr	r0, [r7, #0]
 8003f58:	4401      	add	r1, r0
 8003f5a:	b2d3      	uxtb	r3, r2
 8003f5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003f5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	0c02      	lsrs	r2, r0, #16
 8003f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f70:	0c0b      	lsrs	r3, r1, #16
 8003f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f74:	3102      	adds	r1, #2
 8003f76:	6838      	ldr	r0, [r7, #0]
 8003f78:	4401      	add	r1, r0
 8003f7a:	b2d3      	uxtb	r3, r2
 8003f7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003f7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	f04f 0300 	mov.w	r3, #0
 8003f8a:	0e02      	lsrs	r2, r0, #24
 8003f8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f90:	0e0b      	lsrs	r3, r1, #24
 8003f92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f94:	3103      	adds	r1, #3
 8003f96:	6838      	ldr	r0, [r7, #0]
 8003f98:	4401      	add	r1, r0
 8003f9a:	b2d3      	uxtb	r3, r2
 8003f9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	f04f 0300 	mov.w	r3, #0
 8003faa:	000a      	movs	r2, r1
 8003fac:	2300      	movs	r3, #0
 8003fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb0:	3104      	adds	r1, #4
 8003fb2:	6838      	ldr	r0, [r7, #0]
 8003fb4:	4401      	add	r1, r0
 8003fb6:	b2d3      	uxtb	r3, r2
 8003fb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	0a0a      	lsrs	r2, r1, #8
 8003fc8:	2300      	movs	r3, #0
 8003fca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fcc:	3105      	adds	r1, #5
 8003fce:	6838      	ldr	r0, [r7, #0]
 8003fd0:	4401      	add	r1, r0
 8003fd2:	b2d3      	uxtb	r3, r2
 8003fd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	0c0a      	lsrs	r2, r1, #16
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fe8:	3106      	adds	r1, #6
 8003fea:	6838      	ldr	r0, [r7, #0]
 8003fec:	4401      	add	r1, r0
 8003fee:	b2d3      	uxtb	r3, r2
 8003ff0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003ff2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	0e0a      	lsrs	r2, r1, #24
 8004000:	2300      	movs	r3, #0
 8004002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004004:	3107      	adds	r1, #7
 8004006:	6838      	ldr	r0, [r7, #0]
 8004008:	4401      	add	r1, r0
 800400a:	b2d3      	uxtb	r3, r2
 800400c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	3308      	adds	r3, #8
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004016:	4618      	mov	r0, r3
 8004018:	372c      	adds	r7, #44	; 0x2c
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004022:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004026:	b0bb      	sub	sp, #236	; 0xec
 8004028:	af00      	add	r7, sp, #0
 800402a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800402e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004044:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004048:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800404c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004050:	4413      	add	r3, r2
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	ea40 0402 	orr.w	r4, r0, r2
 800405e:	ea41 0503 	orr.w	r5, r1, r3
 8004062:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004066:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004074:	4413      	add	r3, r2
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 0000 	mov.w	r0, #0
 8004082:	f04f 0100 	mov.w	r1, #0
 8004086:	0219      	lsls	r1, r3, #8
 8004088:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800408c:	0210      	lsls	r0, r2, #8
 800408e:	ea44 0a00 	orr.w	sl, r4, r0
 8004092:	ea45 0b01 	orr.w	fp, r5, r1
 8004096:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800409a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800409e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	0419      	lsls	r1, r3, #16
 80040bc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80040c0:	0410      	lsls	r0, r2, #16
 80040c2:	ea44 0300 	orr.w	r3, r4, r0
 80040c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040ca:	ea45 0301 	orr.w	r3, r5, r1
 80040ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040d2:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80040d6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80040da:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80040de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e2:	1cda      	adds	r2, r3, #3
 80040e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040e8:	4413      	add	r3, r2
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80040f6:	ea4f 6802 	mov.w	r8, r2, lsl #24
 80040fa:	ea40 0308 	orr.w	r3, r0, r8
 80040fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004102:	ea41 0309 	orr.w	r3, r1, r9
 8004106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800410a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800410e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004112:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004120:	4413      	add	r3, r2
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	f04f 0000 	mov.w	r0, #0
 800412e:	f04f 0100 	mov.w	r1, #0
 8004132:	0011      	movs	r1, r2
 8004134:	2000      	movs	r0, #0
 8004136:	ea44 0300 	orr.w	r3, r4, r0
 800413a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800413e:	ea45 0301 	orr.w	r3, r5, r1
 8004142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004146:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800414a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800414e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	1d5a      	adds	r2, r3, #5
 8004158:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800415c:	4413      	add	r3, r2
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b2da      	uxtb	r2, r3
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	f04f 0000 	mov.w	r0, #0
 800416a:	f04f 0100 	mov.w	r1, #0
 800416e:	0211      	lsls	r1, r2, #8
 8004170:	2000      	movs	r0, #0
 8004172:	ea44 0300 	orr.w	r3, r4, r0
 8004176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800417a:	ea45 0301 	orr.w	r3, r5, r1
 800417e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004182:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004186:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800418a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004192:	1d9a      	adds	r2, r3, #6
 8004194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004198:	4413      	add	r3, r2
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	0411      	lsls	r1, r2, #16
 80041ac:	2000      	movs	r0, #0
 80041ae:	ea44 0300 	orr.w	r3, r4, r0
 80041b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041b6:	ea45 0301 	orr.w	r3, r5, r1
 80041ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041be:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80041c2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80041c6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ce:	1dda      	adds	r2, r3, #7
 80041d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d4:	4413      	add	r3, r2
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	f04f 0300 	mov.w	r3, #0
 80041de:	f04f 0000 	mov.w	r0, #0
 80041e2:	f04f 0100 	mov.w	r1, #0
 80041e6:	0611      	lsls	r1, r2, #24
 80041e8:	2000      	movs	r0, #0
 80041ea:	ea44 0300 	orr.w	r3, r4, r0
 80041ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041f2:	ea45 0301 	orr.w	r3, r5, r1
 80041f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041fa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 80041fe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8004202:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420a:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	3308      	adds	r3, #8
 8004214:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004224:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004228:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800422c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004230:	4413      	add	r3, r2
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea40 0402 	orr.w	r4, r0, r2
 800423e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004242:	430b      	orrs	r3, r1
 8004244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004248:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800424c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004250:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800425e:	4413      	add	r3, r2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	f04f 0300 	mov.w	r3, #0
 8004268:	f04f 0000 	mov.w	r0, #0
 800426c:	f04f 0100 	mov.w	r1, #0
 8004270:	0219      	lsls	r1, r3, #8
 8004272:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004276:	0210      	lsls	r0, r2, #8
 8004278:	ea44 0300 	orr.w	r3, r4, r0
 800427c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004280:	ea45 0301 	orr.w	r3, r5, r1
 8004284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004288:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800428c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004290:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800429e:	4413      	add	r3, r2
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f04f 0000 	mov.w	r0, #0
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	0419      	lsls	r1, r3, #16
 80042b2:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80042b6:	0410      	lsls	r0, r2, #16
 80042b8:	ea44 0300 	orr.w	r3, r4, r0
 80042bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80042be:	ea45 0301 	orr.w	r3, r5, r1
 80042c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042c4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80042c8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80042cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	1cda      	adds	r2, r3, #3
 80042d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042da:	4413      	add	r3, r2
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	0a14      	lsrs	r4, r2, #8
 80042e6:	677c      	str	r4, [r7, #116]	; 0x74
 80042e8:	0613      	lsls	r3, r2, #24
 80042ea:	673b      	str	r3, [r7, #112]	; 0x70
 80042ec:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80042f0:	4623      	mov	r3, r4
 80042f2:	4303      	orrs	r3, r0
 80042f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042f6:	462b      	mov	r3, r5
 80042f8:	430b      	orrs	r3, r1
 80042fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042fc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004300:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004304:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430c:	1d1a      	adds	r2, r3, #4
 800430e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2da      	uxtb	r2, r3
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	f04f 0000 	mov.w	r0, #0
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	0011      	movs	r1, r2
 8004326:	2000      	movs	r0, #0
 8004328:	ea44 0300 	orr.w	r3, r4, r0
 800432c:	663b      	str	r3, [r7, #96]	; 0x60
 800432e:	ea45 0301 	orr.w	r3, r5, r1
 8004332:	667b      	str	r3, [r7, #100]	; 0x64
 8004334:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004338:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800433c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004344:	1d5a      	adds	r2, r3, #5
 8004346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800434a:	4413      	add	r3, r2
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0211      	lsls	r1, r2, #8
 800435e:	2000      	movs	r0, #0
 8004360:	ea44 0300 	orr.w	r3, r4, r0
 8004364:	65bb      	str	r3, [r7, #88]	; 0x58
 8004366:	ea45 0301 	orr.w	r3, r5, r1
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004370:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004374:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800437c:	1d9a      	adds	r2, r3, #6
 800437e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004382:	4413      	add	r3, r2
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	f04f 0000 	mov.w	r0, #0
 8004390:	f04f 0100 	mov.w	r1, #0
 8004394:	0411      	lsls	r1, r2, #16
 8004396:	2000      	movs	r0, #0
 8004398:	ea44 0300 	orr.w	r3, r4, r0
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
 800439e:	ea45 0301 	orr.w	r3, r5, r1
 80043a2:	657b      	str	r3, [r7, #84]	; 0x54
 80043a4:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80043a8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80043ac:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b4:	1dda      	adds	r2, r3, #7
 80043b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ba:	4413      	add	r3, r2
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	f04f 0000 	mov.w	r0, #0
 80043c8:	f04f 0100 	mov.w	r1, #0
 80043cc:	0611      	lsls	r1, r2, #24
 80043ce:	2000      	movs	r0, #0
 80043d0:	ea44 0300 	orr.w	r3, r4, r0
 80043d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d6:	ea45 0301 	orr.w	r3, r5, r1
 80043da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043dc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80043e0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 80043e4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80043e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043ec:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80043f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f4:	3308      	adds	r3, #8
 80043f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800440a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800440e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004412:	4413      	add	r3, r2
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	ea40 0402 	orr.w	r4, r0, r2
 8004420:	643c      	str	r4, [r7, #64]	; 0x40
 8004422:	430b      	orrs	r3, r1
 8004424:	647b      	str	r3, [r7, #68]	; 0x44
 8004426:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800442a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800442e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800443c:	4413      	add	r3, r2
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	f04f 0000 	mov.w	r0, #0
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	0219      	lsls	r1, r3, #8
 8004450:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004454:	0210      	lsls	r0, r2, #8
 8004456:	ea44 0300 	orr.w	r3, r4, r0
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
 800445c:	ea45 0301 	orr.w	r3, r5, r1
 8004460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004462:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004466:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800446a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004478:	4413      	add	r3, r2
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	0419      	lsls	r1, r3, #16
 800448c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004490:	0410      	lsls	r0, r2, #16
 8004492:	ea44 0300 	orr.w	r3, r4, r0
 8004496:	633b      	str	r3, [r7, #48]	; 0x30
 8004498:	ea45 0301 	orr.w	r3, r5, r1
 800449c:	637b      	str	r3, [r7, #52]	; 0x34
 800449e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80044a2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80044a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ae:	1cda      	adds	r2, r3, #3
 80044b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044b4:	4413      	add	r3, r2
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	0a14      	lsrs	r4, r2, #8
 80044c0:	62fc      	str	r4, [r7, #44]	; 0x2c
 80044c2:	0613      	lsls	r3, r2, #24
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80044ca:	4623      	mov	r3, r4
 80044cc:	4303      	orrs	r3, r0
 80044ce:	623b      	str	r3, [r7, #32]
 80044d0:	462b      	mov	r3, r5
 80044d2:	430b      	orrs	r3, r1
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
 80044d6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80044da:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80044de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e6:	3304      	adds	r3, #4
 80044e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044ec:	4413      	add	r3, r2
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2dc      	uxtb	r4, r3
 80044f2:	f04f 0500 	mov.w	r5, #0
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	0023      	movs	r3, r4
 8004500:	2200      	movs	r2, #0
 8004502:	ea40 0402 	orr.w	r4, r0, r2
 8004506:	61bc      	str	r4, [r7, #24]
 8004508:	430b      	orrs	r3, r1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004510:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004514:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451c:	3305      	adds	r3, #5
 800451e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004522:	4413      	add	r3, r2
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	b2dc      	uxtb	r4, r3
 8004528:	f04f 0500 	mov.w	r5, #0
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	0223      	lsls	r3, r4, #8
 8004536:	2200      	movs	r2, #0
 8004538:	ea40 0402 	orr.w	r4, r0, r2
 800453c:	613c      	str	r4, [r7, #16]
 800453e:	430b      	orrs	r3, r1
 8004540:	617b      	str	r3, [r7, #20]
 8004542:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004546:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800454a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	3306      	adds	r3, #6
 8004554:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004558:	4413      	add	r3, r2
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2dc      	uxtb	r4, r3
 800455e:	f04f 0500 	mov.w	r5, #0
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	0423      	lsls	r3, r4, #16
 800456c:	2200      	movs	r2, #0
 800456e:	ea40 0402 	orr.w	r4, r0, r2
 8004572:	60bc      	str	r4, [r7, #8]
 8004574:	430b      	orrs	r3, r1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800457c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004580:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	3307      	adds	r3, #7
 800458a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2dc      	uxtb	r4, r3
 8004594:	f04f 0500 	mov.w	r5, #0
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	0623      	lsls	r3, r4, #24
 80045a2:	2200      	movs	r2, #0
 80045a4:	ea40 0402 	orr.w	r4, r0, r2
 80045a8:	603c      	str	r4, [r7, #0]
 80045aa:	430b      	orrs	r3, r1
 80045ac:	607b      	str	r3, [r7, #4]
 80045ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80045b2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 80045b6:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80045ba:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80045be:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80045c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c6:	3308      	adds	r3, #8
 80045c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 80045cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 80045d0:	4618      	mov	r0, r3
 80045d2:	37ec      	adds	r7, #236	; 0xec
 80045d4:	46bd      	mov	sp, r7
 80045d6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80045da:	4770      	bx	lr

080045dc <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	0800fa8c 	.word	0x0800fa8c

080045f8 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	4b03      	ldr	r3, [pc, #12]	; (8004610 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	0800faa4 	.word	0x0800faa4

08004614 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fc1e 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8004624:	4a24      	ldr	r2, [pc, #144]	; (80046b8 <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fbb6 	bl	8002da0 <_ZN8std_msgs6HeaderC1Ev>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3318      	adds	r3, #24
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fd45 	bl	80030c8 <_ZN13geometry_msgs10QuaternionC1Ev>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004644:	2308      	movs	r3, #8
 8004646:	2b00      	cmp	r3, #0
 8004648:	db08      	blt.n	800465c <_ZN11sensor_msgs3ImuC1Ev+0x48>
 800464a:	f04f 0000 	mov.w	r0, #0
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	e9c2 0100 	strd	r0, r1, [r2]
 8004656:	3208      	adds	r2, #8
 8004658:	3b01      	subs	r3, #1
 800465a:	e7f4      	b.n	8004646 <_ZN11sensor_msgs3ImuC1Ev+0x32>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3388      	adds	r3, #136	; 0x88
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fb43 	bl	8003cec <_ZN13geometry_msgs7Vector3C1Ev>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 800466c:	2308      	movs	r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	db08      	blt.n	8004684 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	e9c2 0100 	strd	r0, r1, [r2]
 800467e:	3208      	adds	r2, #8
 8004680:	3b01      	subs	r3, #1
 8004682:	e7f4      	b.n	800466e <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	33f0      	adds	r3, #240	; 0xf0
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fb2f 	bl	8003cec <_ZN13geometry_msgs7Vector3C1Ev>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8004694:	2308      	movs	r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	db08      	blt.n	80046ac <_ZN11sensor_msgs3ImuC1Ev+0x98>
 800469a:	f04f 0000 	mov.w	r0, #0
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	e9c2 0100 	strd	r0, r1, [r2]
 80046a6:	3208      	adds	r2, #8
 80046a8:	3b01      	subs	r3, #1
 80046aa:	e7f4      	b.n	8004696 <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	0800ff00 	.word	0x0800ff00

080046bc <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08c      	sub	sp, #48	; 0x30
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	1d18      	adds	r0, r3, #4
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	4413      	add	r3, r2
 80046d4:	4619      	mov	r1, r3
 80046d6:	f7fe fb83 	bl	8002de0 <_ZNK8std_msgs6Header9serializeEPh>
 80046da:	4602      	mov	r2, r0
 80046dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046de:	4413      	add	r3, r2
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f103 0018 	add.w	r0, r3, #24
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	4413      	add	r3, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7fe fd18 	bl	8003124 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80046f4:	4602      	mov	r2, r0
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	4413      	add	r3, r2
 80046fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80046fc:	2300      	movs	r3, #0
 80046fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	2b08      	cmp	r3, #8
 8004704:	d87e      	bhi.n	8004804 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	3308      	adds	r3, #8
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4413      	add	r3, r2
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 8004718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800471c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800471e:	6838      	ldr	r0, [r7, #0]
 8004720:	4401      	add	r1, r0
 8004722:	b2d3      	uxtb	r3, r2
 8004724:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 8004726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	0a02      	lsrs	r2, r0, #8
 8004734:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004738:	0a0b      	lsrs	r3, r1, #8
 800473a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800473c:	3101      	adds	r1, #1
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	4401      	add	r1, r0
 8004742:	b2d3      	uxtb	r3, r2
 8004744:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 8004746:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	0c02      	lsrs	r2, r0, #16
 8004754:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004758:	0c0b      	lsrs	r3, r1, #16
 800475a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800475c:	3102      	adds	r1, #2
 800475e:	6838      	ldr	r0, [r7, #0]
 8004760:	4401      	add	r1, r0
 8004762:	b2d3      	uxtb	r3, r2
 8004764:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 8004766:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	0e02      	lsrs	r2, r0, #24
 8004774:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004778:	0e0b      	lsrs	r3, r1, #24
 800477a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800477c:	3103      	adds	r1, #3
 800477e:	6838      	ldr	r0, [r7, #0]
 8004780:	4401      	add	r1, r0
 8004782:	b2d3      	uxtb	r3, r2
 8004784:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 8004786:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	000a      	movs	r2, r1
 8004794:	2300      	movs	r3, #0
 8004796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004798:	3104      	adds	r1, #4
 800479a:	6838      	ldr	r0, [r7, #0]
 800479c:	4401      	add	r1, r0
 800479e:	b2d3      	uxtb	r3, r2
 80047a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80047a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	0a0a      	lsrs	r2, r1, #8
 80047b0:	2300      	movs	r3, #0
 80047b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047b4:	3105      	adds	r1, #5
 80047b6:	6838      	ldr	r0, [r7, #0]
 80047b8:	4401      	add	r1, r0
 80047ba:	b2d3      	uxtb	r3, r2
 80047bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80047be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	0c0a      	lsrs	r2, r1, #16
 80047cc:	2300      	movs	r3, #0
 80047ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d0:	3106      	adds	r1, #6
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	4401      	add	r1, r0
 80047d6:	b2d3      	uxtb	r3, r2
 80047d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80047da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047de:	f04f 0200 	mov.w	r2, #0
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	0e0a      	lsrs	r2, r1, #24
 80047e8:	2300      	movs	r3, #0
 80047ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ec:	3107      	adds	r1, #7
 80047ee:	6838      	ldr	r0, [r7, #0]
 80047f0:	4401      	add	r1, r0
 80047f2:	b2d3      	uxtb	r3, r2
 80047f4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	3308      	adds	r3, #8
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	3301      	adds	r3, #1
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
 8004802:	e77d      	b.n	8004700 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4413      	add	r3, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f7ff fa93 	bl	8003d3c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004816:	4602      	mov	r2, r0
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	4413      	add	r3, r2
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800481e:	2300      	movs	r3, #0
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	2b08      	cmp	r3, #8
 8004826:	d87e      	bhi.n	8004926 <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	3315      	adds	r3, #21
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 800483a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800483e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004840:	6838      	ldr	r0, [r7, #0]
 8004842:	4401      	add	r1, r0
 8004844:	b2d3      	uxtb	r3, r2
 8004846:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8004848:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	0a02      	lsrs	r2, r0, #8
 8004856:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800485a:	0a0b      	lsrs	r3, r1, #8
 800485c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485e:	3101      	adds	r1, #1
 8004860:	6838      	ldr	r0, [r7, #0]
 8004862:	4401      	add	r1, r0
 8004864:	b2d3      	uxtb	r3, r2
 8004866:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8004868:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	0c02      	lsrs	r2, r0, #16
 8004876:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800487a:	0c0b      	lsrs	r3, r1, #16
 800487c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800487e:	3102      	adds	r1, #2
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	4401      	add	r1, r0
 8004884:	b2d3      	uxtb	r3, r2
 8004886:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8004888:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	0e02      	lsrs	r2, r0, #24
 8004896:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800489a:	0e0b      	lsrs	r3, r1, #24
 800489c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800489e:	3103      	adds	r1, #3
 80048a0:	6838      	ldr	r0, [r7, #0]
 80048a2:	4401      	add	r1, r0
 80048a4:	b2d3      	uxtb	r3, r2
 80048a6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 80048a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	000a      	movs	r2, r1
 80048b6:	2300      	movs	r3, #0
 80048b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ba:	3104      	adds	r1, #4
 80048bc:	6838      	ldr	r0, [r7, #0]
 80048be:	4401      	add	r1, r0
 80048c0:	b2d3      	uxtb	r3, r2
 80048c2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 80048c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	0a0a      	lsrs	r2, r1, #8
 80048d2:	2300      	movs	r3, #0
 80048d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d6:	3105      	adds	r1, #5
 80048d8:	6838      	ldr	r0, [r7, #0]
 80048da:	4401      	add	r1, r0
 80048dc:	b2d3      	uxtb	r3, r2
 80048de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 80048e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	0c0a      	lsrs	r2, r1, #16
 80048ee:	2300      	movs	r3, #0
 80048f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048f2:	3106      	adds	r1, #6
 80048f4:	6838      	ldr	r0, [r7, #0]
 80048f6:	4401      	add	r1, r0
 80048f8:	b2d3      	uxtb	r3, r2
 80048fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 80048fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	0e0a      	lsrs	r2, r1, #24
 800490a:	2300      	movs	r3, #0
 800490c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800490e:	3107      	adds	r1, #7
 8004910:	6838      	ldr	r0, [r7, #0]
 8004912:	4401      	add	r1, r0
 8004914:	b2d3      	uxtb	r3, r2
 8004916:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	3308      	adds	r3, #8
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	3301      	adds	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	e77d      	b.n	8004822 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 800492c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	4413      	add	r3, r2
 8004932:	4619      	mov	r1, r3
 8004934:	f7ff fa02 	bl	8003d3c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004938:	4602      	mov	r2, r0
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	4413      	add	r3, r2
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004940:	2300      	movs	r3, #0
 8004942:	623b      	str	r3, [r7, #32]
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	2b08      	cmp	r3, #8
 8004948:	d87e      	bhi.n	8004a48 <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	3322      	adds	r3, #34	; 0x22
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4413      	add	r3, r2
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 800495c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004960:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004962:	6838      	ldr	r0, [r7, #0]
 8004964:	4401      	add	r1, r0
 8004966:	b2d3      	uxtb	r3, r2
 8004968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 800496a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	0a02      	lsrs	r2, r0, #8
 8004978:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800497c:	0a0b      	lsrs	r3, r1, #8
 800497e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004980:	3101      	adds	r1, #1
 8004982:	6838      	ldr	r0, [r7, #0]
 8004984:	4401      	add	r1, r0
 8004986:	b2d3      	uxtb	r3, r2
 8004988:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 800498a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	0c02      	lsrs	r2, r0, #16
 8004998:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800499c:	0c0b      	lsrs	r3, r1, #16
 800499e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049a0:	3102      	adds	r1, #2
 80049a2:	6838      	ldr	r0, [r7, #0]
 80049a4:	4401      	add	r1, r0
 80049a6:	b2d3      	uxtb	r3, r2
 80049a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 80049aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	0e02      	lsrs	r2, r0, #24
 80049b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80049bc:	0e0b      	lsrs	r3, r1, #24
 80049be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049c0:	3103      	adds	r1, #3
 80049c2:	6838      	ldr	r0, [r7, #0]
 80049c4:	4401      	add	r1, r0
 80049c6:	b2d3      	uxtb	r3, r2
 80049c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 80049ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	000a      	movs	r2, r1
 80049d8:	2300      	movs	r3, #0
 80049da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049dc:	3104      	adds	r1, #4
 80049de:	6838      	ldr	r0, [r7, #0]
 80049e0:	4401      	add	r1, r0
 80049e2:	b2d3      	uxtb	r3, r2
 80049e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 80049e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	0a0a      	lsrs	r2, r1, #8
 80049f4:	2300      	movs	r3, #0
 80049f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049f8:	3105      	adds	r1, #5
 80049fa:	6838      	ldr	r0, [r7, #0]
 80049fc:	4401      	add	r1, r0
 80049fe:	b2d3      	uxtb	r3, r2
 8004a00:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8004a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	0c0a      	lsrs	r2, r1, #16
 8004a10:	2300      	movs	r3, #0
 8004a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a14:	3106      	adds	r1, #6
 8004a16:	6838      	ldr	r0, [r7, #0]
 8004a18:	4401      	add	r1, r0
 8004a1a:	b2d3      	uxtb	r3, r2
 8004a1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8004a1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	0e0a      	lsrs	r2, r1, #24
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a30:	3107      	adds	r1, #7
 8004a32:	6838      	ldr	r0, [r7, #0]
 8004a34:	4401      	add	r1, r0
 8004a36:	b2d3      	uxtb	r3, r2
 8004a38:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	3301      	adds	r3, #1
 8004a44:	623b      	str	r3, [r7, #32]
 8004a46:	e77d      	b.n	8004944 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8004a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004a52:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a56:	b0be      	sub	sp, #248	; 0xf8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8004a5e:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 8004a68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a6c:	1d18      	adds	r0, r3, #4
 8004a6e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004a72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a76:	4413      	add	r3, r2
 8004a78:	4619      	mov	r1, r3
 8004a7a:	f7fe fa49 	bl	8002f10 <_ZN8std_msgs6Header11deserializeEPh>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a84:	4413      	add	r3, r2
 8004a86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 8004a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a8e:	f103 0018 	add.w	r0, r3, #24
 8004a92:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004a96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7fe fd2b 	bl	80034f8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ab4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	f200 8100 	bhi.w	8004cbe <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004aca:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ace:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004ad2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea40 0402 	orr.w	r4, r0, r2
 8004ae4:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aee:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8004af2:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004af6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b04:	4413      	add	r3, r2
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	f04f 0000 	mov.w	r0, #0
 8004b12:	f04f 0100 	mov.w	r1, #0
 8004b16:	0219      	lsls	r1, r3, #8
 8004b18:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004b1c:	0210      	lsls	r0, r2, #8
 8004b1e:	ea44 0300 	orr.w	r3, r4, r0
 8004b22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b26:	ea45 0301 	orr.w	r3, r5, r1
 8004b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004b2e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004b32:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004b36:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3e:	1c9a      	adds	r2, r3, #2
 8004b40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b44:	4413      	add	r3, r2
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	f04f 0000 	mov.w	r0, #0
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	0419      	lsls	r1, r3, #16
 8004b58:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004b5c:	0410      	lsls	r0, r2, #16
 8004b5e:	ea44 0300 	orr.w	r3, r4, r0
 8004b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b66:	ea45 0301 	orr.w	r3, r5, r1
 8004b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b6e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8004b72:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b76:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	1cda      	adds	r2, r3, #3
 8004b80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b84:	4413      	add	r3, r2
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	f04f 0300 	mov.w	r3, #0
 8004b8e:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004b92:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8004b96:	ea40 0308 	orr.w	r3, r0, r8
 8004b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b9e:	ea41 0309 	orr.w	r3, r1, r9
 8004ba2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ba6:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004baa:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004bae:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bbc:	4413      	add	r3, r2
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	f04f 0000 	mov.w	r0, #0
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	0011      	movs	r1, r2
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	ea44 0300 	orr.w	r3, r4, r0
 8004bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bda:	ea45 0301 	orr.w	r3, r5, r1
 8004bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004be2:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8004be6:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004bea:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	1d5a      	adds	r2, r3, #5
 8004bf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bf8:	4413      	add	r3, r2
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	0211      	lsls	r1, r2, #8
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	ea44 0300 	orr.w	r3, r4, r0
 8004c12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c16:	ea45 0301 	orr.w	r3, r5, r1
 8004c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c1e:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004c22:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004c26:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	1d9a      	adds	r2, r3, #6
 8004c30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c34:	4413      	add	r3, r2
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	f04f 0000 	mov.w	r0, #0
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	0411      	lsls	r1, r2, #16
 8004c48:	2000      	movs	r0, #0
 8004c4a:	ea44 0300 	orr.w	r3, r4, r0
 8004c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c52:	ea45 0301 	orr.w	r3, r5, r1
 8004c56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c5a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8004c5e:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004c62:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6a:	1dda      	adds	r2, r3, #7
 8004c6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c70:	4413      	add	r3, r2
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	f04f 0300 	mov.w	r3, #0
 8004c7a:	f04f 0000 	mov.w	r0, #0
 8004c7e:	f04f 0100 	mov.w	r1, #0
 8004c82:	0611      	lsls	r1, r2, #24
 8004c84:	2000      	movs	r0, #0
 8004c86:	ea44 0a00 	orr.w	sl, r4, r0
 8004c8a:	ea45 0b01 	orr.w	fp, r5, r1
 8004c8e:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8004c92:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004c9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c9e:	3308      	adds	r3, #8
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	3308      	adds	r3, #8
 8004cae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004cb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004cbc:	e6fa      	b.n	8004ab4 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8004cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cc2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8004cc6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cce:	4413      	add	r3, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	f7ff f9a6 	bl	8004022 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	4413      	add	r3, r2
 8004cde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ce8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	f200 80fc 	bhi.w	8004eea <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004cfe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004d02:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d0a:	4413      	add	r3, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	ea40 0402 	orr.w	r4, r0, r2
 8004d18:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d22:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004d26:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004d2a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d38:	4413      	add	r3, r2
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	f04f 0000 	mov.w	r0, #0
 8004d46:	f04f 0100 	mov.w	r1, #0
 8004d4a:	0219      	lsls	r1, r3, #8
 8004d4c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004d50:	0210      	lsls	r0, r2, #8
 8004d52:	ea44 0300 	orr.w	r3, r4, r0
 8004d56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d5a:	ea45 0301 	orr.w	r3, r5, r1
 8004d5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d62:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004d66:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004d6a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d78:	4413      	add	r3, r2
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	0419      	lsls	r1, r3, #16
 8004d8c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004d90:	0410      	lsls	r0, r2, #16
 8004d92:	ea44 0300 	orr.w	r3, r4, r0
 8004d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d98:	ea45 0301 	orr.w	r3, r5, r1
 8004d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d9e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004da2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004da6:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dae:	1cda      	adds	r2, r3, #3
 8004db0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004db4:	4413      	add	r3, r2
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	0a14      	lsrs	r4, r2, #8
 8004dc0:	677c      	str	r4, [r7, #116]	; 0x74
 8004dc2:	0613      	lsls	r3, r2, #24
 8004dc4:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8004dca:	4623      	mov	r3, r4
 8004dcc:	4303      	orrs	r3, r0
 8004dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd0:	462b      	mov	r3, r5
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004dda:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004dde:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de6:	1d1a      	adds	r2, r3, #4
 8004de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	f04f 0000 	mov.w	r0, #0
 8004dfa:	f04f 0100 	mov.w	r1, #0
 8004dfe:	0011      	movs	r1, r2
 8004e00:	2000      	movs	r0, #0
 8004e02:	ea44 0300 	orr.w	r3, r4, r0
 8004e06:	663b      	str	r3, [r7, #96]	; 0x60
 8004e08:	ea45 0301 	orr.w	r3, r5, r1
 8004e0c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e0e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004e12:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004e16:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1e:	1d5a      	adds	r2, r3, #5
 8004e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e24:	4413      	add	r3, r2
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	f04f 0000 	mov.w	r0, #0
 8004e32:	f04f 0100 	mov.w	r1, #0
 8004e36:	0211      	lsls	r1, r2, #8
 8004e38:	2000      	movs	r0, #0
 8004e3a:	ea44 0300 	orr.w	r3, r4, r0
 8004e3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e40:	ea45 0301 	orr.w	r3, r5, r1
 8004e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e46:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004e4a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004e4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	1d9a      	adds	r2, r3, #6
 8004e58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e5c:	4413      	add	r3, r2
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	f04f 0000 	mov.w	r0, #0
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	0411      	lsls	r1, r2, #16
 8004e70:	2000      	movs	r0, #0
 8004e72:	ea44 0300 	orr.w	r3, r4, r0
 8004e76:	653b      	str	r3, [r7, #80]	; 0x50
 8004e78:	ea45 0301 	orr.w	r3, r5, r1
 8004e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e7e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004e82:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004e86:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8e:	1dda      	adds	r2, r3, #7
 8004e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e94:	4413      	add	r3, r2
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	f04f 0000 	mov.w	r0, #0
 8004ea2:	f04f 0100 	mov.w	r1, #0
 8004ea6:	0611      	lsls	r1, r2, #24
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	ea44 0300 	orr.w	r3, r4, r0
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb0:	ea45 0301 	orr.w	r3, r5, r1
 8004eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004eba:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 8004ebe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004ec2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004ec6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004eca:	3315      	adds	r3, #21
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	3308      	adds	r3, #8
 8004eda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004ede:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ee8:	e6fe      	b.n	8004ce8 <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 8004eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004eee:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004ef2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004ef6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004efa:	4413      	add	r3, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	f7ff f890 	bl	8004022 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004f02:	4602      	mov	r2, r0
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f08:	4413      	add	r3, r2
 8004f0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	f200 80f8 	bhi.w	800510e <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004f2a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004f2e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004f32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f36:	4413      	add	r3, r2
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	ea40 0402 	orr.w	r4, r0, r2
 8004f44:	643c      	str	r4, [r7, #64]	; 0x40
 8004f46:	430b      	orrs	r3, r1
 8004f48:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004f4e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004f52:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f60:	4413      	add	r3, r2
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	f04f 0000 	mov.w	r0, #0
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	0219      	lsls	r1, r3, #8
 8004f74:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004f78:	0210      	lsls	r0, r2, #8
 8004f7a:	ea44 0300 	orr.w	r3, r4, r0
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f80:	ea45 0301 	orr.w	r3, r5, r1
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f86:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004f8a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004f8e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f9c:	4413      	add	r3, r2
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	f04f 0000 	mov.w	r0, #0
 8004faa:	f04f 0100 	mov.w	r1, #0
 8004fae:	0419      	lsls	r1, r3, #16
 8004fb0:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004fb4:	0410      	lsls	r0, r2, #16
 8004fb6:	ea44 0300 	orr.w	r3, r4, r0
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
 8004fbc:	ea45 0301 	orr.w	r3, r5, r1
 8004fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004fc6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004fca:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd2:	1cda      	adds	r2, r3, #3
 8004fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fd8:	4413      	add	r3, r2
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	0a14      	lsrs	r4, r2, #8
 8004fe4:	62fc      	str	r4, [r7, #44]	; 0x2c
 8004fe6:	0613      	lsls	r3, r2, #24
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004fee:	4623      	mov	r3, r4
 8004ff0:	4303      	orrs	r3, r0
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	462b      	mov	r3, r5
 8004ff6:	430b      	orrs	r3, r1
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ffe:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8005002:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	f04f 0000 	mov.w	r0, #0
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	0011      	movs	r1, r2
 8005024:	2000      	movs	r0, #0
 8005026:	ea44 0300 	orr.w	r3, r4, r0
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	ea45 0301 	orr.w	r3, r5, r1
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005036:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800503a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005042:	1d5a      	adds	r2, r3, #5
 8005044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005048:	4413      	add	r3, r2
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	f04f 0000 	mov.w	r0, #0
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	0211      	lsls	r1, r2, #8
 800505c:	2000      	movs	r0, #0
 800505e:	ea44 0300 	orr.w	r3, r4, r0
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	ea45 0301 	orr.w	r3, r5, r1
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800506e:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8005072:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8005076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507a:	1d9a      	adds	r2, r3, #6
 800507c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005080:	4413      	add	r3, r2
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b2da      	uxtb	r2, r3
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	0411      	lsls	r1, r2, #16
 8005094:	2000      	movs	r0, #0
 8005096:	ea44 0300 	orr.w	r3, r4, r0
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	ea45 0301 	orr.w	r3, r5, r1
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80050a6:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80050aa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b2:	1dda      	adds	r2, r3, #7
 80050b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050b8:	4413      	add	r3, r2
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	0611      	lsls	r1, r2, #24
 80050cc:	2000      	movs	r0, #0
 80050ce:	ea44 0300 	orr.w	r3, r4, r0
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	ea45 0301 	orr.w	r3, r5, r1
 80050d8:	607b      	str	r3, [r7, #4]
 80050da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80050de:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 80050e2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80050e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80050ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050ee:	3322      	adds	r3, #34	; 0x22
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4413      	add	r3, r2
 80050f4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	3308      	adds	r3, #8
 80050fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8005102:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005106:	3301      	adds	r3, #1
 8005108:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800510c:	e702      	b.n	8004f14 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 8005112:	4618      	mov	r0, r3
 8005114:	37f8      	adds	r7, #248	; 0xf8
 8005116:	46bd      	mov	sp, r7
 8005118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800511c <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	0800fac8 	.word	0x0800fac8

08005138 <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	0800fad8 	.word	0x0800fad8

08005154 <_ZN7momiu_p14momiu_posMotorC1Ev>:
      typedef int16_t _motor7_pos_type;
      _motor7_pos_type motor7_pos;
      typedef int16_t _motor8_pos_type;
      _motor8_pos_type motor8_pos;

    momiu_posMotor():
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
      motor3_pos(0),
      motor4_pos(0),
      motor5_pos(0),
      motor6_pos(0),
      motor7_pos(0),
      motor8_pos(0)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fc fe7e 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8005164:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <_ZN7momiu_p14momiu_posMotorC1Ev+0x50>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	809a      	strh	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	80da      	strh	r2, [r3, #6]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	811a      	strh	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	815a      	strh	r2, [r3, #10]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	819a      	strh	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	81da      	strh	r2, [r3, #14]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	821a      	strh	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	825a      	strh	r2, [r3, #18]
    {
    }
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	0800fee8 	.word	0x0800fee8

080051a8 <_ZNK7momiu_p14momiu_posMotor9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80051a8:	b480      	push	{r7}
 80051aa:	b08d      	sub	sp, #52	; 0x34
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor1_pos;
      u_motor1_pos.real = this->motor1_pos;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051bc:	853b      	strh	r3, [r7, #40]	; 0x28
      *(outbuffer + offset + 0) = (u_motor1_pos.base >> (8 * 0)) & 0xFF;
 80051be:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80051c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	4413      	add	r3, r2
 80051c6:	b2ca      	uxtb	r2, r1
 80051c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor1_pos.base >> (8 * 1)) & 0xFF;
 80051ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	b299      	uxth	r1, r3
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	3301      	adds	r3, #1
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	4413      	add	r3, r2
 80051d8:	b2ca      	uxtb	r2, r1
 80051da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor1_pos);
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	3302      	adds	r3, #2
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor2_pos;
      u_motor2_pos.real = this->motor2_pos;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80051e8:	84bb      	strh	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (u_motor2_pos.base >> (8 * 0)) & 0xFF;
 80051ea:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	4413      	add	r3, r2
 80051f2:	b2ca      	uxtb	r2, r1
 80051f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor2_pos.base >> (8 * 1)) & 0xFF;
 80051f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051f8:	0a1b      	lsrs	r3, r3, #8
 80051fa:	b299      	uxth	r1, r3
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	3301      	adds	r3, #1
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4413      	add	r3, r2
 8005204:	b2ca      	uxtb	r2, r1
 8005206:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor2_pos);
 8005208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520a:	3302      	adds	r3, #2
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor3_pos;
      u_motor3_pos.real = this->motor3_pos;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005214:	843b      	strh	r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_motor3_pos.base >> (8 * 0)) & 0xFF;
 8005216:	8c39      	ldrh	r1, [r7, #32]
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	4413      	add	r3, r2
 800521e:	b2ca      	uxtb	r2, r1
 8005220:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor3_pos.base >> (8 * 1)) & 0xFF;
 8005222:	8c3b      	ldrh	r3, [r7, #32]
 8005224:	0a1b      	lsrs	r3, r3, #8
 8005226:	b299      	uxth	r1, r3
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	3301      	adds	r3, #1
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	4413      	add	r3, r2
 8005230:	b2ca      	uxtb	r2, r1
 8005232:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor3_pos);
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	3302      	adds	r3, #2
 8005238:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor4_pos;
      u_motor4_pos.real = this->motor4_pos;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005240:	83bb      	strh	r3, [r7, #28]
      *(outbuffer + offset + 0) = (u_motor4_pos.base >> (8 * 0)) & 0xFF;
 8005242:	8bb9      	ldrh	r1, [r7, #28]
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	4413      	add	r3, r2
 800524a:	b2ca      	uxtb	r2, r1
 800524c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor4_pos.base >> (8 * 1)) & 0xFF;
 800524e:	8bbb      	ldrh	r3, [r7, #28]
 8005250:	0a1b      	lsrs	r3, r3, #8
 8005252:	b299      	uxth	r1, r3
 8005254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005256:	3301      	adds	r3, #1
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	4413      	add	r3, r2
 800525c:	b2ca      	uxtb	r2, r1
 800525e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor4_pos);
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	3302      	adds	r3, #2
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor5_pos;
      u_motor5_pos.real = this->motor5_pos;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800526c:	833b      	strh	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_motor5_pos.base >> (8 * 0)) & 0xFF;
 800526e:	8b39      	ldrh	r1, [r7, #24]
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	4413      	add	r3, r2
 8005276:	b2ca      	uxtb	r2, r1
 8005278:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor5_pos.base >> (8 * 1)) & 0xFF;
 800527a:	8b3b      	ldrh	r3, [r7, #24]
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	b299      	uxth	r1, r3
 8005280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005282:	3301      	adds	r3, #1
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	4413      	add	r3, r2
 8005288:	b2ca      	uxtb	r2, r1
 800528a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor5_pos);
 800528c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528e:	3302      	adds	r3, #2
 8005290:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor6_pos;
      u_motor6_pos.real = this->motor6_pos;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005298:	82bb      	strh	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_motor6_pos.base >> (8 * 0)) & 0xFF;
 800529a:	8ab9      	ldrh	r1, [r7, #20]
 800529c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	4413      	add	r3, r2
 80052a2:	b2ca      	uxtb	r2, r1
 80052a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor6_pos.base >> (8 * 1)) & 0xFF;
 80052a6:	8abb      	ldrh	r3, [r7, #20]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	b299      	uxth	r1, r3
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	3301      	adds	r3, #1
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	4413      	add	r3, r2
 80052b4:	b2ca      	uxtb	r2, r1
 80052b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor6_pos);
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	3302      	adds	r3, #2
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor7_pos;
      u_motor7_pos.real = this->motor7_pos;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80052c4:	823b      	strh	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_motor7_pos.base >> (8 * 0)) & 0xFF;
 80052c6:	8a39      	ldrh	r1, [r7, #16]
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	4413      	add	r3, r2
 80052ce:	b2ca      	uxtb	r2, r1
 80052d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor7_pos.base >> (8 * 1)) & 0xFF;
 80052d2:	8a3b      	ldrh	r3, [r7, #16]
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	b299      	uxth	r1, r3
 80052d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052da:	3301      	adds	r3, #1
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	b2ca      	uxtb	r2, r1
 80052e2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor7_pos);
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	3302      	adds	r3, #2
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor8_pos;
      u_motor8_pos.real = this->motor8_pos;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80052f0:	81bb      	strh	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_motor8_pos.base >> (8 * 0)) & 0xFF;
 80052f2:	89b9      	ldrh	r1, [r7, #12]
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	4413      	add	r3, r2
 80052fa:	b2ca      	uxtb	r2, r1
 80052fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_motor8_pos.base >> (8 * 1)) & 0xFF;
 80052fe:	89bb      	ldrh	r3, [r7, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	b299      	uxth	r1, r3
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	3301      	adds	r3, #1
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	4413      	add	r3, r2
 800530c:	b2ca      	uxtb	r2, r1
 800530e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->motor8_pos);
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	3302      	adds	r3, #2
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005318:	4618      	mov	r0, r3
 800531a:	3734      	adds	r7, #52	; 0x34
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <_ZN7momiu_p14momiu_posMotor11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005324:	b480      	push	{r7}
 8005326:	b08d      	sub	sp, #52	; 0x34
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor1_pos;
      u_motor1_pos.base = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	853b      	strh	r3, [r7, #40]	; 0x28
      u_motor1_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005336:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533a:	6839      	ldr	r1, [r7, #0]
 800533c:	440b      	add	r3, r1
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	853b      	strh	r3, [r7, #40]	; 0x28
      u_motor1_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005348:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800534a:	b21a      	sxth	r2, r3
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	3301      	adds	r3, #1
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	440b      	add	r3, r1
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	b21b      	sxth	r3, r3
 800535a:	4313      	orrs	r3, r2
 800535c:	b21b      	sxth	r3, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	853b      	strh	r3, [r7, #40]	; 0x28
      this->motor1_pos = u_motor1_pos.real;
 8005362:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->motor1_pos);
 800536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536c:	3302      	adds	r3, #2
 800536e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor2_pos;
      u_motor2_pos.base = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	84bb      	strh	r3, [r7, #36]	; 0x24
      u_motor2_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005374:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	6839      	ldr	r1, [r7, #0]
 800537a:	440b      	add	r3, r1
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	4313      	orrs	r3, r2
 8005382:	b29b      	uxth	r3, r3
 8005384:	84bb      	strh	r3, [r7, #36]	; 0x24
      u_motor2_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005388:	b21a      	sxth	r2, r3
 800538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538c:	3301      	adds	r3, #1
 800538e:	6839      	ldr	r1, [r7, #0]
 8005390:	440b      	add	r3, r1
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	b21b      	sxth	r3, r3
 8005398:	4313      	orrs	r3, r2
 800539a:	b21b      	sxth	r3, r3
 800539c:	b29b      	uxth	r3, r3
 800539e:	84bb      	strh	r3, [r7, #36]	; 0x24
      this->motor2_pos = u_motor2_pos.real;
 80053a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	80da      	strh	r2, [r3, #6]
      offset += sizeof(this->motor2_pos);
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053aa:	3302      	adds	r3, #2
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor3_pos;
      u_motor3_pos.base = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	843b      	strh	r3, [r7, #32]
      u_motor3_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80053b2:	8c3a      	ldrh	r2, [r7, #32]
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	440b      	add	r3, r1
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4313      	orrs	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	843b      	strh	r3, [r7, #32]
      u_motor3_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80053c4:	8c3b      	ldrh	r3, [r7, #32]
 80053c6:	b21a      	sxth	r2, r3
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	3301      	adds	r3, #1
 80053cc:	6839      	ldr	r1, [r7, #0]
 80053ce:	440b      	add	r3, r1
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	021b      	lsls	r3, r3, #8
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	4313      	orrs	r3, r2
 80053d8:	b21b      	sxth	r3, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	843b      	strh	r3, [r7, #32]
      this->motor3_pos = u_motor3_pos.real;
 80053de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	811a      	strh	r2, [r3, #8]
      offset += sizeof(this->motor3_pos);
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e8:	3302      	adds	r3, #2
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor4_pos;
      u_motor4_pos.base = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	83bb      	strh	r3, [r7, #28]
      u_motor4_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80053f0:	8bba      	ldrh	r2, [r7, #28]
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	440b      	add	r3, r1
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b29b      	uxth	r3, r3
 8005400:	83bb      	strh	r3, [r7, #28]
      u_motor4_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005402:	8bbb      	ldrh	r3, [r7, #28]
 8005404:	b21a      	sxth	r2, r3
 8005406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005408:	3301      	adds	r3, #1
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	440b      	add	r3, r1
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	021b      	lsls	r3, r3, #8
 8005412:	b21b      	sxth	r3, r3
 8005414:	4313      	orrs	r3, r2
 8005416:	b21b      	sxth	r3, r3
 8005418:	b29b      	uxth	r3, r3
 800541a:	83bb      	strh	r3, [r7, #28]
      this->motor4_pos = u_motor4_pos.real;
 800541c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	815a      	strh	r2, [r3, #10]
      offset += sizeof(this->motor4_pos);
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	3302      	adds	r3, #2
 8005428:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor5_pos;
      u_motor5_pos.base = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	833b      	strh	r3, [r7, #24]
      u_motor5_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800542e:	8b3a      	ldrh	r2, [r7, #24]
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	440b      	add	r3, r1
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	833b      	strh	r3, [r7, #24]
      u_motor5_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8005440:	8b3b      	ldrh	r3, [r7, #24]
 8005442:	b21a      	sxth	r2, r3
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	3301      	adds	r3, #1
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	440b      	add	r3, r1
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	b21b      	sxth	r3, r3
 8005452:	4313      	orrs	r3, r2
 8005454:	b21b      	sxth	r3, r3
 8005456:	b29b      	uxth	r3, r3
 8005458:	833b      	strh	r3, [r7, #24]
      this->motor5_pos = u_motor5_pos.real;
 800545a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	819a      	strh	r2, [r3, #12]
      offset += sizeof(this->motor5_pos);
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	3302      	adds	r3, #2
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor6_pos;
      u_motor6_pos.base = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	82bb      	strh	r3, [r7, #20]
      u_motor6_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800546c:	8aba      	ldrh	r2, [r7, #20]
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	440b      	add	r3, r1
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	4313      	orrs	r3, r2
 800547a:	b29b      	uxth	r3, r3
 800547c:	82bb      	strh	r3, [r7, #20]
      u_motor6_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800547e:	8abb      	ldrh	r3, [r7, #20]
 8005480:	b21a      	sxth	r2, r3
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	3301      	adds	r3, #1
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	440b      	add	r3, r1
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	b21b      	sxth	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	b21b      	sxth	r3, r3
 8005494:	b29b      	uxth	r3, r3
 8005496:	82bb      	strh	r3, [r7, #20]
      this->motor6_pos = u_motor6_pos.real;
 8005498:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	81da      	strh	r2, [r3, #14]
      offset += sizeof(this->motor6_pos);
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	3302      	adds	r3, #2
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor7_pos;
      u_motor7_pos.base = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	823b      	strh	r3, [r7, #16]
      u_motor7_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80054aa:	8a3a      	ldrh	r2, [r7, #16]
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	440b      	add	r3, r1
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	823b      	strh	r3, [r7, #16]
      u_motor7_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80054bc:	8a3b      	ldrh	r3, [r7, #16]
 80054be:	b21a      	sxth	r2, r3
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	3301      	adds	r3, #1
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	440b      	add	r3, r1
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	b21b      	sxth	r3, r3
 80054ce:	4313      	orrs	r3, r2
 80054d0:	b21b      	sxth	r3, r3
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	823b      	strh	r3, [r7, #16]
      this->motor7_pos = u_motor7_pos.real;
 80054d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	821a      	strh	r2, [r3, #16]
      offset += sizeof(this->motor7_pos);
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	3302      	adds	r3, #2
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        int16_t real;
        uint16_t base;
      } u_motor8_pos;
      u_motor8_pos.base = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	81bb      	strh	r3, [r7, #12]
      u_motor8_pos.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80054e8:	89ba      	ldrh	r2, [r7, #12]
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	440b      	add	r3, r1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	81bb      	strh	r3, [r7, #12]
      u_motor8_pos.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80054fa:	89bb      	ldrh	r3, [r7, #12]
 80054fc:	b21a      	sxth	r2, r3
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	3301      	adds	r3, #1
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	440b      	add	r3, r1
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	b21b      	sxth	r3, r3
 800550c:	4313      	orrs	r3, r2
 800550e:	b21b      	sxth	r3, r3
 8005510:	b29b      	uxth	r3, r3
 8005512:	81bb      	strh	r3, [r7, #12]
      this->motor8_pos = u_motor8_pos.real;
 8005514:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	825a      	strh	r2, [r3, #18]
      offset += sizeof(this->motor8_pos);
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	3302      	adds	r3, #2
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
     return offset;
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8005524:	4618      	mov	r0, r3
 8005526:	3734      	adds	r7, #52	; 0x34
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <_ZN7momiu_p14momiu_posMotor7getTypeEv>:

    virtual const char * getType() override { return "momiu_p/momiu_posMotor"; };
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <_ZN7momiu_p14momiu_posMotor7getTypeEv+0x18>)
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	0800fafc 	.word	0x0800fafc

0800554c <_ZN7momiu_p14momiu_posMotor6getMD5Ev>:
    virtual const char * getMD5() override { return "d0c783b9220b33d08756c95682928665"; };
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <_ZN7momiu_p14momiu_posMotor6getMD5Ev+0x18>)
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	0800fb14 	.word	0x0800fb14

08005568 <_ZN7momiu_p12pose_messageC1Ev>:
      typedef uint8_t _loop_type;
      _loop_type loop;
      typedef const char* _face_type;
      _face_type face;

    pose_message():
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
      pose(""),
      intensity(0),
      loop(0),
      face("")
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4618      	mov	r0, r3
 8005574:	f7fc fc74 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 8005578:	4a09      	ldr	r2, [pc, #36]	; (80055a0 <_ZN7momiu_p12pose_messageC1Ev+0x38>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <_ZN7momiu_p12pose_messageC1Ev+0x3c>)
 8005582:	605a      	str	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	721a      	strb	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	725a      	strb	r2, [r3, #9]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <_ZN7momiu_p12pose_messageC1Ev+0x3c>)
 8005594:	60da      	str	r2, [r3, #12]
    {
    }
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4618      	mov	r0, r3
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	0800fed0 	.word	0x0800fed0
 80055a4:	0800f978 	.word	0x0800f978

080055a8 <_ZNK7momiu_p12pose_message9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]
      uint32_t length_pose = strlen(this->pose);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fa fe1a 	bl	80001f4 <strlen>
 80055c0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_pose);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	4413      	add	r3, r2
 80055c8:	6939      	ldr	r1, [r7, #16]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f001 fb28 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3304      	adds	r3, #4
 80055d4:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->pose, length_pose);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	18d0      	adds	r0, r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4619      	mov	r1, r3
 80055e4:	f007 fa24 	bl	800ca30 <memcpy>
      offset += length_pose;
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->intensity >> (8 * 0)) & 0xFF;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	7a12      	ldrb	r2, [r2, #8]
 80055fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->intensity);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3301      	adds	r3, #1
 8005600:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->loop >> (8 * 0)) & 0xFF;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	4413      	add	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	7a52      	ldrb	r2, [r2, #9]
 800560c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->loop);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	3301      	adds	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
      uint32_t length_face = strlen(this->face);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	4618      	mov	r0, r3
 800561a:	f7fa fdeb 	bl	80001f4 <strlen>
 800561e:	60f8      	str	r0, [r7, #12]
      varToArr(outbuffer + offset, length_face);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	4413      	add	r3, r2
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	4618      	mov	r0, r3
 800562a:	f001 faf9 	bl	8006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	3304      	adds	r3, #4
 8005632:	617b      	str	r3, [r7, #20]
      memcpy(outbuffer + offset, this->face, length_face);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	18d0      	adds	r0, r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4619      	mov	r1, r3
 8005642:	f007 f9f5 	bl	800ca30 <memcpy>
      offset += length_face;
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	617b      	str	r3, [r7, #20]
      return offset;
 800564e:	697b      	ldr	r3, [r7, #20]
    }
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <_ZN7momiu_p12pose_message11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
      uint32_t length_pose;
      arrToVar(length_pose, (inbuffer + offset));
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	441a      	add	r2, r3
 800566c:	f107 0310 	add.w	r3, r7, #16
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f001 faf2 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	3304      	adds	r3, #4
 800567c:	617b      	str	r3, [r7, #20]
      for(unsigned int k= offset; k< offset+length_pose; ++k){
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	429a      	cmp	r2, r3
 800568c:	d20c      	bcs.n	80056a8 <_ZN7momiu_p12pose_message11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	441a      	add	r2, r3
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3b01      	subs	r3, #1
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	440b      	add	r3, r1
 800569c:	7812      	ldrb	r2, [r2, #0]
 800569e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_pose; ++k){
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	e7ec      	b.n	8005682 <_ZN7momiu_p12pose_message11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_pose-1]=0;
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	4413      	add	r3, r2
 80056ae:	3b01      	subs	r3, #1
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	4413      	add	r3, r2
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]
      this->pose = (char *)(inbuffer + offset-1);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	441a      	add	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	605a      	str	r2, [r3, #4]
      offset += length_pose;
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]
      this->intensity =  ((uint8_t) (*(inbuffer + offset)));
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	4413      	add	r3, r2
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	721a      	strb	r2, [r3, #8]
      offset += sizeof(this->intensity);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	3301      	adds	r3, #1
 80056dc:	617b      	str	r3, [r7, #20]
      this->loop =  ((uint8_t) (*(inbuffer + offset)));
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	4413      	add	r3, r2
 80056e4:	781a      	ldrb	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	725a      	strb	r2, [r3, #9]
      offset += sizeof(this->loop);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
      uint32_t length_face;
      arrToVar(length_face, (inbuffer + offset));
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	441a      	add	r2, r3
 80056f6:	f107 030c 	add.w	r3, r7, #12
 80056fa:	4611      	mov	r1, r2
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 faad 	bl	8006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	3304      	adds	r3, #4
 8005706:	617b      	str	r3, [r7, #20]
      for(unsigned int k= offset; k< offset+length_face; ++k){
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	429a      	cmp	r2, r3
 8005716:	d20c      	bcs.n	8005732 <_ZN7momiu_p12pose_message11deserializeEPh+0xda>
          inbuffer[k-1]=inbuffer[k];
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	441a      	add	r2, r3
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3b01      	subs	r3, #1
 8005722:	6839      	ldr	r1, [r7, #0]
 8005724:	440b      	add	r3, r1
 8005726:	7812      	ldrb	r2, [r2, #0]
 8005728:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_face; ++k){
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3301      	adds	r3, #1
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e7ec      	b.n	800570c <_ZN7momiu_p12pose_message11deserializeEPh+0xb4>
      }
      inbuffer[offset+length_face-1]=0;
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	3b01      	subs	r3, #1
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	4413      	add	r3, r2
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]
      this->face = (char *)(inbuffer + offset-1);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	3b01      	subs	r3, #1
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	441a      	add	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60da      	str	r2, [r3, #12]
      offset += length_face;
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	617b      	str	r3, [r7, #20]
     return offset;
 8005756:	697b      	ldr	r3, [r7, #20]
    }
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZN7momiu_p12pose_message7getTypeEv>:

    virtual const char * getType() override { return "momiu_p/pose_message"; };
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	4b03      	ldr	r3, [pc, #12]	; (8005778 <_ZN7momiu_p12pose_message7getTypeEv+0x18>)
 800576a:	4618      	mov	r0, r3
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	0800fb38 	.word	0x0800fb38

0800577c <_ZN7momiu_p12pose_message6getMD5Ev>:
    virtual const char * getMD5() override { return "3b993a6445fc8aa1faa13f3e6553ef3a"; };
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	4b03      	ldr	r3, [pc, #12]	; (8005794 <_ZN7momiu_p12pose_message6getMD5Ev+0x18>)
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	0800fb50 	.word	0x0800fb50

08005798 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
      data(0)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fc fb5c 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 80057a8:	4a05      	ldr	r2, [pc, #20]	; (80057c0 <_ZN8std_msgs4BoolC1Ev+0x28>)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	711a      	strb	r2, [r3, #4]
    {
    }
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	0800feb8 	.word	0x0800feb8

080057c4 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	791b      	ldrb	r3, [r3, #4]
 80057d6:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4413      	add	r3, r2
 80057de:	7a3a      	ldrb	r2, [r7, #8]
 80057e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
      return offset;
 80057e8:	68fb      	ldr	r3, [r7, #12]
    }
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005800:	2300      	movs	r3, #0
 8005802:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005808:	7a3a      	ldrb	r2, [r7, #8]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	440b      	add	r3, r1
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4313      	orrs	r3, r2
 8005814:	b2db      	uxtb	r3, r3
 8005816:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8005818:	7a3a      	ldrb	r2, [r7, #8]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
     return offset;
 8005824:	68fb      	ldr	r3, [r7, #12]
    }
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	0800fb74 	.word	0x0800fb74

08005850 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	4b03      	ldr	r3, [pc, #12]	; (8005868 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	0800fb84 	.word	0x0800fb84

0800586c <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
      data(0)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	f7fc faf2 	bl	8001e60 <_ZN3ros3MsgC1Ev>
 800587c:	4a05      	ldr	r2, [pc, #20]	; (8005894 <_ZN8std_msgs7Float32C1Ev+0x28>)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	605a      	str	r2, [r3, #4]
    {
    }
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	0800fea0 	.word	0x0800fea0

08005898 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80058ac:	68b9      	ldr	r1, [r7, #8]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	4413      	add	r3, r2
 80058b4:	b2ca      	uxtb	r2, r1
 80058b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	0a19      	lsrs	r1, r3, #8
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	b2ca      	uxtb	r2, r1
 80058c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	0c19      	lsrs	r1, r3, #16
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3302      	adds	r3, #2
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	4413      	add	r3, r2
 80058d4:	b2ca      	uxtb	r2, r1
 80058d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	0e19      	lsrs	r1, r3, #24
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3303      	adds	r3, #3
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	4413      	add	r3, r2
 80058e4:	b2ca      	uxtb	r2, r1
 80058e6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3304      	adds	r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]
      return offset;
 80058ee:	68fb      	ldr	r3, [r7, #12]
    }
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	440a      	add	r2, r1
 8005916:	7812      	ldrb	r2, [r2, #0]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	440b      	add	r3, r1
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	021b      	lsls	r3, r3, #8
 800592a:	4313      	orrs	r3, r2
 800592c:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3302      	adds	r3, #2
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	440b      	add	r3, r1
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	4313      	orrs	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3303      	adds	r3, #3
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	440b      	add	r3, r1
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	4313      	orrs	r3, r2
 8005950:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3304      	adds	r3, #4
 800595c:	60fb      	str	r3, [r7, #12]
     return offset;
 800595e:	68fb      	ldr	r3, [r7, #12]
    }
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 8005976:	4618      	mov	r0, r3
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	0800fba8 	.word	0x0800fba8

08005988 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	4b03      	ldr	r3, [pc, #12]	; (80059a0 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	0800fbbc 	.word	0x0800fbbc

080059a4 <bno055_assignI2C>:
#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;
uint16_t _bno055_addr ;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device, uint16_t imu_addr) {
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	807b      	strh	r3, [r7, #2]
  _bno055_i2c_port = hi2c_device;
 80059b0:	4a05      	ldr	r2, [pc, #20]	; (80059c8 <bno055_assignI2C+0x24>)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6013      	str	r3, [r2, #0]
  _bno055_addr = imu_addr;
 80059b6:	4a05      	ldr	r2, [pc, #20]	; (80059cc <bno055_assignI2C+0x28>)
 80059b8:	887b      	ldrh	r3, [r7, #2]
 80059ba:	8013      	strh	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	200010d0 	.word	0x200010d0
 80059cc:	200010d4 	.word	0x200010d4

080059d0 <bno055_delay>:

void bno055_delay(int time) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	f002 fde8 	bl	80085b0 <HAL_Delay>
#endif
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	4603      	mov	r3, r0
 80059f0:	460a      	mov	r2, r1
 80059f2:	71fb      	strb	r3, [r7, #7]
 80059f4:	4613      	mov	r3, r2
 80059f6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	733b      	strb	r3, [r7, #12]
 80059fc:	79bb      	ldrb	r3, [r7, #6]
 80059fe:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  /*status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
                                   txdata, sizeof(txdata), 10);*/
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, _bno055_addr << 1,
 8005a00:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <bno055_writeData+0x40>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <bno055_writeData+0x44>)
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	b299      	uxth	r1, r3
 8005a0c:	f107 020c 	add.w	r2, r7, #12
 8005a10:	230a      	movs	r3, #10
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	2302      	movs	r3, #2
 8005a16:	f003 fde5 	bl	80095e4 <HAL_I2C_Master_Transmit>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	73fb      	strb	r3, [r7, #15]
                                     txdata, sizeof(txdata), 10);

  if (status == HAL_OK) {
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	2b00      	cmp	r3, #0
  } else if (state == HAL_I2C_STATE_ERROR) {
    printf("HAL_I2C_STATE_ERROR\r\n");
  }*/
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	200010d0 	.word	0x200010d0
 8005a2c:	200010d4 	.word	0x200010d4

08005a30 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	4603      	mov	r3, r0
 8005a38:	6039      	str	r1, [r7, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	71bb      	strb	r3, [r7, #6]
  /*HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
                         100);*/

	HAL_I2C_Master_Transmit(_bno055_i2c_port, _bno055_addr << 1, &reg, 1,
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <bno055_readData+0x4c>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <bno055_readData+0x50>)
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	b299      	uxth	r1, r3
 8005a4c:	1dfa      	adds	r2, r7, #7
 8005a4e:	2364      	movs	r3, #100	; 0x64
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	2301      	movs	r3, #1
 8005a54:	f003 fdc6 	bl	80095e4 <HAL_I2C_Master_Transmit>
	                          100);
	  HAL_I2C_Master_Receive(_bno055_i2c_port, _bno055_addr << 1, data, len,
 8005a58:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <bno055_readData+0x4c>)
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <bno055_readData+0x50>)
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	b299      	uxth	r1, r3
 8005a64:	79bb      	ldrb	r3, [r7, #6]
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	2264      	movs	r2, #100	; 0x64
 8005a6a:	9200      	str	r2, [sp, #0]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	f003 feb7 	bl	80097e0 <HAL_I2C_Master_Receive>
	                         100);


  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	200010d0 	.word	0x200010d0
 8005a80:	200010d4 	.word	0x200010d4

08005a84 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	0800ff78 	.word	0x0800ff78

08005aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ffe8 	bl	8005a84 <_ZN3ros15NodeHandleBase_C1Ev>
 8005ab4:	4a36      	ldr	r2, [pc, #216]	; (8005b90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd f858 	bl	8002b74 <_ZN13STM32HardwareC1Ev>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f006 ffab 	bl	800ca4c <memset>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8005afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b00:	2100      	movs	r1, #0
 8005b02:	4618      	mov	r0, r3
 8005b04:	f006 ffa2 	bl	800ca4c <memset>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f603 2324 	addw	r3, r3, #2596	; 0xa24
 8005b0e:	2264      	movs	r2, #100	; 0x64
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f006 ff9a 	bl	800ca4c <memset>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f603 2388 	addw	r3, r3, #2696	; 0xa88
 8005b1e:	2264      	movs	r2, #100	; 0x64
 8005b20:	2100      	movs	r1, #0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f006 ff92 	bl	800ca4c <memset>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f8c3 2af4 	str.w	r2, [r3, #2804]	; 0xaf4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2afc 	str.w	r2, [r3, #2812]	; 0xafc
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2b00 	strb.w	r2, [r3, #2816]	; 0xb00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f8c3 2b04 	str.w	r2, [r3, #2820]	; 0xb04
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 2b0c 	str.w	r2, [r3, #2828]	; 0xb0c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2b10 	strb.w	r2, [r3, #2832]	; 0xb10
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f603 3314 	addw	r3, r3, #2836	; 0xb14
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fc fce2 	bl	8002548 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	0800fe8c 	.word	0x0800fe8c

08005b94 <HAL_UART_TxCpltCallback>:
ros::Publisher pub_IR_face("IR_face", &IR_face);

ros::Subscriber<momiu_p::momiu_posMotor> momiu_posMotor_sub_n("momiu_posMotor_t", &momiu_posMotor_cb);
ros::Subscriber<momiu_p::pose_message> pose_message_sub_n("pose", &pose_message_cb);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8005b9c:	4805      	ldr	r0, [pc, #20]	; (8005bb4 <HAL_UART_TxCpltCallback+0x20>)
 8005b9e:	f001 f8db 	bl	8006d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fd f84b 	bl	8002c40 <_ZN13STM32Hardware5flushEv>
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20001178 	.word	0x20001178

08005bb8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8005bc0:	4805      	ldr	r0, [pc, #20]	; (8005bd8 <HAL_UART_RxCpltCallback+0x20>)
 8005bc2:	f001 f8c9 	bl	8006d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fc fffa 	bl	8002bc2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20001178 	.word	0x20001178
 8005bdc:	00000000 	.word	0x00000000

08005be0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b590      	push	{r4, r7, lr}
 8005be2:	b0a7      	sub	sp, #156	; 0x9c
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4ad3      	ldr	r2, [pc, #844]	; (8005f38 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	f040 82ee 	bne.w	80061ce <HAL_TIM_PeriodElapsedCallback+0x5ee>
	{
		uint32_t delta_time = HAL_GetTick() - start_action_time;
 8005bf2:	f002 fcd1 	bl	8008598 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	4bd0      	ldr	r3, [pc, #832]	; (8005f3c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		uint32_t duration_on_queue = (trajectory_queue.array[trajectory_queue.front][0][1])*10;
 8005c02:	4bcf      	ldr	r3, [pc, #828]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005c04:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005c08:	49cd      	ldr	r1, [pc, #820]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	4413      	add	r3, r2
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	440b      	add	r3, r1
 8005c14:	3304      	adds	r3, #4
 8005c16:	edd3 7a00 	vldr	s15, [r3]
 8005c1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005c1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c26:	ee17 3a90 	vmov	r3, s15
 8005c2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		if(delta_time <= duration_on_queue)
 8005c2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005c36:	429a      	cmp	r2, r3
 8005c38:	f200 82aa 	bhi.w	8006190 <HAL_TIM_PeriodElapsedCallback+0x5b0>
		{
			unsigned int t = delta_time/10;
 8005c3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c40:	4ac0      	ldr	r2, [pc, #768]	; (8005f44 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	08db      	lsrs	r3, r3, #3
 8005c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

			double q_m1 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][1], t);
 8005c4c:	4bbc      	ldr	r3, [pc, #752]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005c4e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	4ab8      	ldr	r2, [pc, #736]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005c5e:	4413      	add	r3, r2
 8005c60:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005c64:	4618      	mov	r0, r3
 8005c66:	f002 f844 	bl	8007cf2 <cubic_spline_position>
 8005c6a:	ee10 3a10 	vmov	r3, s0
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fa fc82 	bl	8000578 <__aeabi_f2d>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
			double qq_m1 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][1], t);
 8005c7c:	4bb0      	ldr	r3, [pc, #704]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005c7e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005c82:	4613      	mov	r3, r2
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	3310      	adds	r3, #16
 8005c8c:	4aac      	ldr	r2, [pc, #688]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005c8e:	4413      	add	r3, r2
 8005c90:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005c94:	4618      	mov	r0, r3
 8005c96:	f002 f86b 	bl	8007d70 <cubic_spline_velocity>
 8005c9a:	ee10 3a10 	vmov	r3, s0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa fc6a 	bl	8000578 <__aeabi_f2d>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

			double q_m2 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][2], t);
 8005cac:	4ba4      	ldr	r3, [pc, #656]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005cae:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	3320      	adds	r3, #32
 8005cbc:	4aa0      	ldr	r2, [pc, #640]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f002 f814 	bl	8007cf2 <cubic_spline_position>
 8005cca:	ee10 3a10 	vmov	r3, s0
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fc52 	bl	8000578 <__aeabi_f2d>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			double qq_m2 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][2], t);
 8005cdc:	4b98      	ldr	r3, [pc, #608]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005cde:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	3320      	adds	r3, #32
 8005cec:	4a94      	ldr	r2, [pc, #592]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f002 f83b 	bl	8007d70 <cubic_spline_velocity>
 8005cfa:	ee10 3a10 	vmov	r3, s0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fa fc3a 	bl	8000578 <__aeabi_f2d>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			double q_m3 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][3], t);
 8005d0c:	4b8c      	ldr	r3, [pc, #560]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d0e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005d12:	4613      	mov	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	4413      	add	r3, r2
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	3330      	adds	r3, #48	; 0x30
 8005d1c:	4a88      	ldr	r2, [pc, #544]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d1e:	4413      	add	r3, r2
 8005d20:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 ffe4 	bl	8007cf2 <cubic_spline_position>
 8005d2a:	ee10 3a10 	vmov	r3, s0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fa fc22 	bl	8000578 <__aeabi_f2d>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			double qq_m3 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][3], t);
 8005d3c:	4b80      	ldr	r3, [pc, #512]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d3e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005d42:	4613      	mov	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4413      	add	r3, r2
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	3330      	adds	r3, #48	; 0x30
 8005d4c:	4a7c      	ldr	r2, [pc, #496]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d4e:	4413      	add	r3, r2
 8005d50:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005d54:	4618      	mov	r0, r3
 8005d56:	f002 f80b 	bl	8007d70 <cubic_spline_velocity>
 8005d5a:	ee10 3a10 	vmov	r3, s0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fc0a 	bl	8000578 <__aeabi_f2d>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

			double q_m4 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][4], t);
 8005d6c:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d6e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	3340      	adds	r3, #64	; 0x40
 8005d7c:	4a70      	ldr	r2, [pc, #448]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d7e:	4413      	add	r3, r2
 8005d80:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 ffb4 	bl	8007cf2 <cubic_spline_position>
 8005d8a:	ee10 3a10 	vmov	r3, s0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7fa fbf2 	bl	8000578 <__aeabi_f2d>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			double qq_m4 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][4], t);
 8005d9c:	4b68      	ldr	r3, [pc, #416]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005d9e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005da2:	4613      	mov	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	4413      	add	r3, r2
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	3340      	adds	r3, #64	; 0x40
 8005dac:	4a64      	ldr	r2, [pc, #400]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005dae:	4413      	add	r3, r2
 8005db0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 ffdb 	bl	8007d70 <cubic_spline_velocity>
 8005dba:	ee10 3a10 	vmov	r3, s0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa fbda 	bl	8000578 <__aeabi_f2d>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

			double q_m5 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][5], t);
 8005dcc:	4b5c      	ldr	r3, [pc, #368]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005dce:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	00db      	lsls	r3, r3, #3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	3350      	adds	r3, #80	; 0x50
 8005ddc:	4a58      	ldr	r2, [pc, #352]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005dde:	4413      	add	r3, r2
 8005de0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 ff84 	bl	8007cf2 <cubic_spline_position>
 8005dea:	ee10 3a10 	vmov	r3, s0
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fa fbc2 	bl	8000578 <__aeabi_f2d>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			double qq_m5 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][5], t);
 8005dfc:	4b50      	ldr	r3, [pc, #320]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005dfe:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	3350      	adds	r3, #80	; 0x50
 8005e0c:	4a4c      	ldr	r2, [pc, #304]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e0e:	4413      	add	r3, r2
 8005e10:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 ffab 	bl	8007d70 <cubic_spline_velocity>
 8005e1a:	ee10 3a10 	vmov	r3, s0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fa fbaa 	bl	8000578 <__aeabi_f2d>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

			double q_m6 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][6], t);
 8005e2c:	4b44      	ldr	r3, [pc, #272]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e2e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005e32:	4613      	mov	r3, r2
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	3360      	adds	r3, #96	; 0x60
 8005e3c:	4a40      	ldr	r2, [pc, #256]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e3e:	4413      	add	r3, r2
 8005e40:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 ff54 	bl	8007cf2 <cubic_spline_position>
 8005e4a:	ee10 3a10 	vmov	r3, s0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fa fb92 	bl	8000578 <__aeabi_f2d>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			double qq_m6 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][6], t);
 8005e5c:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e5e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4413      	add	r3, r2
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	3360      	adds	r3, #96	; 0x60
 8005e6c:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e6e:	4413      	add	r3, r2
 8005e70:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 ff7b 	bl	8007d70 <cubic_spline_velocity>
 8005e7a:	ee10 3a10 	vmov	r3, s0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fa fb7a 	bl	8000578 <__aeabi_f2d>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

			double q_m7 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][7], t);
 8005e8c:	4b2c      	ldr	r3, [pc, #176]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e8e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005e92:	4613      	mov	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	4413      	add	r3, r2
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	3370      	adds	r3, #112	; 0x70
 8005e9c:	4a28      	ldr	r2, [pc, #160]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 ff24 	bl	8007cf2 <cubic_spline_position>
 8005eaa:	ee10 3a10 	vmov	r3, s0
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fa fb62 	bl	8000578 <__aeabi_f2d>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	e9c7 2308 	strd	r2, r3, [r7, #32]
			double qq_m7 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][7], t);
 8005ebc:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005ebe:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	3370      	adds	r3, #112	; 0x70
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005ece:	4413      	add	r3, r2
 8005ed0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f001 ff4b 	bl	8007d70 <cubic_spline_velocity>
 8005eda:	ee10 3a10 	vmov	r3, s0
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fa fb4a 	bl	8000578 <__aeabi_f2d>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]

			double q_m8 = cubic_spline_position(trajectory_queue.array[trajectory_queue.front][8], t);
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005eee:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	3380      	adds	r3, #128	; 0x80
 8005efc:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005efe:	4413      	add	r3, r2
 8005f00:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fef4 	bl	8007cf2 <cubic_spline_position>
 8005f0a:	ee10 3a10 	vmov	r3, s0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fa fb32 	bl	8000578 <__aeabi_f2d>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
			double qq_m8 = cubic_spline_velocity(trajectory_queue.array[trajectory_queue.front][8], t);
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005f1e:	f8d3 2b40 	ldr.w	r2, [r3, #2880]	; 0xb40
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	3380      	adds	r3, #128	; 0x80
 8005f2c:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8005f2e:	4413      	add	r3, r2
 8005f30:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005f34:	4618      	mov	r0, r3
 8005f36:	e007      	b.n	8005f48 <HAL_TIM_PeriodElapsedCallback+0x368>
 8005f38:	20002c68 	.word	0x20002c68
 8005f3c:	200027fc 	.word	0x200027fc
 8005f40:	20001cb4 	.word	0x20001cb4
 8005f44:	cccccccd 	.word	0xcccccccd
 8005f48:	f001 ff12 	bl	8007d70 <cubic_spline_velocity>
 8005f4c:	ee10 3a10 	vmov	r3, s0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fa fb11 	bl	8000578 <__aeabi_f2d>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	e9c7 2302 	strd	r2, r3, [r7, #8]

			Dynamixel_servo((0x01),(q_m1/MX28_DEG_PER_UNIT),(qq_m1/MX28_RPM_PER_UNIT));
 8005f5e:	a3a0      	add	r3, pc, #640	; (adr r3, 80061e0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f68:	f7fa fc88 	bl	800087c <__aeabi_ddiv>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4610      	mov	r0, r2
 8005f72:	4619      	mov	r1, r3
 8005f74:	f7fa fe30 	bl	8000bd8 <__aeabi_d2uiz>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	b29c      	uxth	r4, r3
 8005f7c:	a39a      	add	r3, pc, #616	; (adr r3, 80061e8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005f86:	f7fa fc79 	bl	800087c <__aeabi_ddiv>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	f7fa fe21 	bl	8000bd8 <__aeabi_d2uiz>
 8005f96:	4603      	mov	r3, r0
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	f7fb f832 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x02),(q_m2/MX28_DEG_PER_UNIT),(qq_m2/MX28_RPM_PER_UNIT));
 8005fa4:	a38e      	add	r3, pc, #568	; (adr r3, 80061e0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005fae:	f7fa fc65 	bl	800087c <__aeabi_ddiv>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f7fa fe0d 	bl	8000bd8 <__aeabi_d2uiz>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	b29c      	uxth	r4, r3
 8005fc2:	a389      	add	r3, pc, #548	; (adr r3, 80061e8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005fcc:	f7fa fc56 	bl	800087c <__aeabi_ddiv>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f7fa fdfe 	bl	8000bd8 <__aeabi_d2uiz>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	2002      	movs	r0, #2
 8005fe6:	f7fb f80f 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x03),(q_m3/MX28_DEG_PER_UNIT),(qq_m3/MX28_RPM_PER_UNIT));
 8005fea:	a37d      	add	r3, pc, #500	; (adr r3, 80061e0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ff4:	f7fa fc42 	bl	800087c <__aeabi_ddiv>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4619      	mov	r1, r3
 8006000:	f7fa fdea 	bl	8000bd8 <__aeabi_d2uiz>
 8006004:	4603      	mov	r3, r0
 8006006:	b29c      	uxth	r4, r3
 8006008:	a377      	add	r3, pc, #476	; (adr r3, 80061e8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006012:	f7fa fc33 	bl	800087c <__aeabi_ddiv>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4610      	mov	r0, r2
 800601c:	4619      	mov	r1, r3
 800601e:	f7fa fddb 	bl	8000bd8 <__aeabi_d2uiz>
 8006022:	4603      	mov	r3, r0
 8006024:	b29b      	uxth	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	4621      	mov	r1, r4
 800602a:	2003      	movs	r0, #3
 800602c:	f7fa ffec 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x04),(q_m4/MX28_DEG_PER_UNIT),(qq_m4/MX28_RPM_PER_UNIT));
 8006030:	a36b      	add	r3, pc, #428	; (adr r3, 80061e0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800603a:	f7fa fc1f 	bl	800087c <__aeabi_ddiv>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4610      	mov	r0, r2
 8006044:	4619      	mov	r1, r3
 8006046:	f7fa fdc7 	bl	8000bd8 <__aeabi_d2uiz>
 800604a:	4603      	mov	r3, r0
 800604c:	b29c      	uxth	r4, r3
 800604e:	a366      	add	r3, pc, #408	; (adr r3, 80061e8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006058:	f7fa fc10 	bl	800087c <__aeabi_ddiv>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4610      	mov	r0, r2
 8006062:	4619      	mov	r1, r3
 8006064:	f7fa fdb8 	bl	8000bd8 <__aeabi_d2uiz>
 8006068:	4603      	mov	r3, r0
 800606a:	b29b      	uxth	r3, r3
 800606c:	461a      	mov	r2, r3
 800606e:	4621      	mov	r1, r4
 8006070:	2004      	movs	r0, #4
 8006072:	f7fa ffc9 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x05),(q_m5/MX28_DEG_PER_UNIT),(qq_m5/MX28_RPM_PER_UNIT));
 8006076:	a35a      	add	r3, pc, #360	; (adr r3, 80061e0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8006080:	f7fa fbfc 	bl	800087c <__aeabi_ddiv>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4610      	mov	r0, r2
 800608a:	4619      	mov	r1, r3
 800608c:	f7fa fda4 	bl	8000bd8 <__aeabi_d2uiz>
 8006090:	4603      	mov	r3, r0
 8006092:	b29c      	uxth	r4, r3
 8006094:	a354      	add	r3, pc, #336	; (adr r3, 80061e8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8006096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800609e:	f7fa fbed 	bl	800087c <__aeabi_ddiv>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	f7fa fd95 	bl	8000bd8 <__aeabi_d2uiz>
 80060ae:	4603      	mov	r3, r0
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	4621      	mov	r1, r4
 80060b6:	2005      	movs	r0, #5
 80060b8:	f7fa ffa6 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x06),(q_m6/MX28_DEG_PER_UNIT),(qq_m6/MX28_RPM_PER_UNIT));
 80060bc:	a348      	add	r3, pc, #288	; (adr r3, 80061e0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80060c6:	f7fa fbd9 	bl	800087c <__aeabi_ddiv>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4610      	mov	r0, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fa fd81 	bl	8000bd8 <__aeabi_d2uiz>
 80060d6:	4603      	mov	r3, r0
 80060d8:	b29c      	uxth	r4, r3
 80060da:	a343      	add	r3, pc, #268	; (adr r3, 80061e8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80060dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060e4:	f7fa fbca 	bl	800087c <__aeabi_ddiv>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	f7fa fd72 	bl	8000bd8 <__aeabi_d2uiz>
 80060f4:	4603      	mov	r3, r0
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	461a      	mov	r2, r3
 80060fa:	4621      	mov	r1, r4
 80060fc:	2006      	movs	r0, #6
 80060fe:	f7fa ff83 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x07),(q_m7/AX12_DEG_PER_UNIT),(qq_m7/AX12_RPM_PER_UNIT));
 8006102:	a33b      	add	r3, pc, #236	; (adr r3, 80061f0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800610c:	f7fa fbb6 	bl	800087c <__aeabi_ddiv>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4610      	mov	r0, r2
 8006116:	4619      	mov	r1, r3
 8006118:	f7fa fd5e 	bl	8000bd8 <__aeabi_d2uiz>
 800611c:	4603      	mov	r3, r0
 800611e:	b29c      	uxth	r4, r3
 8006120:	a335      	add	r3, pc, #212	; (adr r3, 80061f8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8006122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006126:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800612a:	f7fa fba7 	bl	800087c <__aeabi_ddiv>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	4610      	mov	r0, r2
 8006134:	4619      	mov	r1, r3
 8006136:	f7fa fd4f 	bl	8000bd8 <__aeabi_d2uiz>
 800613a:	4603      	mov	r3, r0
 800613c:	b29b      	uxth	r3, r3
 800613e:	461a      	mov	r2, r3
 8006140:	4621      	mov	r1, r4
 8006142:	2007      	movs	r0, #7
 8006144:	f7fa ff60 	bl	8001008 <Dynamixel_servo>
			Dynamixel_servo((0x08),(q_m8/AX12_DEG_PER_UNIT),(qq_m8/AX12_RPM_PER_UNIT));
 8006148:	a329      	add	r3, pc, #164	; (adr r3, 80061f0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 800614a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006152:	f7fa fb93 	bl	800087c <__aeabi_ddiv>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f7fa fd3b 	bl	8000bd8 <__aeabi_d2uiz>
 8006162:	4603      	mov	r3, r0
 8006164:	b29c      	uxth	r4, r3
 8006166:	a324      	add	r3, pc, #144	; (adr r3, 80061f8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8006168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006170:	f7fa fb84 	bl	800087c <__aeabi_ddiv>
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	4610      	mov	r0, r2
 800617a:	4619      	mov	r1, r3
 800617c:	f7fa fd2c 	bl	8000bd8 <__aeabi_d2uiz>
 8006180:	4603      	mov	r3, r0
 8006182:	b29b      	uxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	4621      	mov	r1, r4
 8006188:	2008      	movs	r0, #8
 800618a:	f7fa ff3d 	bl	8001008 <Dynamixel_servo>
			{

			}
		}
	}
}
 800618e:	e01e      	b.n	80061ce <HAL_TIM_PeriodElapsedCallback+0x5ee>
		else if(delta_time > duration_on_queue)
 8006190:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006198:	429a      	cmp	r2, r3
 800619a:	d918      	bls.n	80061ce <HAL_TIM_PeriodElapsedCallback+0x5ee>
			if(check_cycle_queue_empty(&trajectory_queue)==0)
 800619c:	480e      	ldr	r0, [pc, #56]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800619e:	f7fb fb8d 	bl	80018bc <check_cycle_queue_empty>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bf0c      	ite	eq
 80061a8:	2301      	moveq	r3, #1
 80061aa:	2300      	movne	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_TIM_PeriodElapsedCallback+0x5e4>
				next_cycle_queue(&trajectory_queue);
 80061b2:	4809      	ldr	r0, [pc, #36]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80061b4:	f7fb fb4a 	bl	800184c <next_cycle_queue>
				start_action_time=HAL_GetTick();
 80061b8:	f002 f9ee 	bl	8008598 <HAL_GetTick>
 80061bc:	4603      	mov	r3, r0
 80061be:	4a07      	ldr	r2, [pc, #28]	; (80061dc <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 80061c0:	6013      	str	r3, [r2, #0]
}
 80061c2:	e004      	b.n	80061ce <HAL_TIM_PeriodElapsedCallback+0x5ee>
			else if(check_cycle_queue_empty(&trajectory_queue)==1)
 80061c4:	4804      	ldr	r0, [pc, #16]	; (80061d8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80061c6:	f7fb fb79 	bl	80018bc <check_cycle_queue_empty>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b01      	cmp	r3, #1
}
 80061ce:	bf00      	nop
 80061d0:	379c      	adds	r7, #156	; 0x9c
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd90      	pop	{r4, r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20001cb4 	.word	0x20001cb4
 80061dc:	200027fc 	.word	0x200027fc
 80061e0:	020c49ba 	.word	0x020c49ba
 80061e4:	3fb6872b 	.word	0x3fb6872b
 80061e8:	9fbe76c9 	.word	0x9fbe76c9
 80061ec:	3fbd2f1a 	.word	0x3fbd2f1a
 80061f0:	28f5c28f 	.word	0x28f5c28f
 80061f4:	3fd28f5c 	.word	0x3fd28f5c
 80061f8:	f9db22d1 	.word	0xf9db22d1
 80061fc:	3fbc6a7e 	.word	0x3fbc6a7e

08006200 <setup>:

void setup(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  init_cycle_queue(&trajectory_queue);
 8006204:	481a      	ldr	r0, [pc, #104]	; (8006270 <setup+0x70>)
 8006206:	f7fb faba 	bl	800177e <init_cycle_queue>

  nh.initNode();
 800620a:	481a      	ldr	r0, [pc, #104]	; (8006274 <setup+0x74>)
 800620c:	f000 fdb0 	bl	8006d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(pub_imu1);
 8006210:	4919      	ldr	r1, [pc, #100]	; (8006278 <setup+0x78>)
 8006212:	4818      	ldr	r0, [pc, #96]	; (8006274 <setup+0x74>)
 8006214:	f000 fdc9 	bl	8006daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_imu2);
 8006218:	4918      	ldr	r1, [pc, #96]	; (800627c <setup+0x7c>)
 800621a:	4816      	ldr	r0, [pc, #88]	; (8006274 <setup+0x74>)
 800621c:	f000 fdc5 	bl	8006daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_IR_chin);
 8006220:	4917      	ldr	r1, [pc, #92]	; (8006280 <setup+0x80>)
 8006222:	4814      	ldr	r0, [pc, #80]	; (8006274 <setup+0x74>)
 8006224:	f000 fdc1 	bl	8006daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(pub_IR_face);
 8006228:	4916      	ldr	r1, [pc, #88]	; (8006284 <setup+0x84>)
 800622a:	4812      	ldr	r0, [pc, #72]	; (8006274 <setup+0x74>)
 800622c:	f000 fdbd 	bl	8006daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(momiu_posMotor_sub_n);
 8006230:	4915      	ldr	r1, [pc, #84]	; (8006288 <setup+0x88>)
 8006232:	4810      	ldr	r0, [pc, #64]	; (8006274 <setup+0x74>)
 8006234:	f000 fde9 	bl	8006e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  nh.subscribe(pose_message_sub_n);
 8006238:	4914      	ldr	r1, [pc, #80]	; (800628c <setup+0x8c>)
 800623a:	480e      	ldr	r0, [pc, #56]	; (8006274 <setup+0x74>)
 800623c:	f000 fde5 	bl	8006e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

  bno055_assignI2C(&hi2c2, 0x28);
 8006240:	2128      	movs	r1, #40	; 0x28
 8006242:	4813      	ldr	r0, [pc, #76]	; (8006290 <setup+0x90>)
 8006244:	f7ff fbae 	bl	80059a4 <bno055_assignI2C>
  bno055_setup();
 8006248:	f7fb f864 	bl	8001314 <bno055_setup>
  bno055_setOperationModeNDOF();
 800624c:	f7fb f84f 	bl	80012ee <bno055_setOperationModeNDOF>

  HAL_Delay(10);
 8006250:	200a      	movs	r0, #10
 8006252:	f002 f9ad 	bl	80085b0 <HAL_Delay>
  bno055_assignI2C(&hi2c1, 0x29);
 8006256:	2129      	movs	r1, #41	; 0x29
 8006258:	480e      	ldr	r0, [pc, #56]	; (8006294 <setup+0x94>)
 800625a:	f7ff fba3 	bl	80059a4 <bno055_assignI2C>
  bno055_setup();
 800625e:	f7fb f859 	bl	8001314 <bno055_setup>
  bno055_setOperationModeNDOF();
 8006262:	f7fb f844 	bl	80012ee <bno055_setOperationModeNDOF>

  default_pose();
 8006266:	f001 fc83 	bl	8007b70 <default_pose>
}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20001cb4 	.word	0x20001cb4
 8006274:	20001178 	.word	0x20001178
 8006278:	20002958 	.word	0x20002958
 800627c:	20002ac8 	.word	0x20002ac8
 8006280:	20002ae4 	.word	0x20002ae4
 8006284:	20002b00 	.word	0x20002b00
 8006288:	20002b14 	.word	0x20002b14
 800628c:	20002b3c 	.word	0x20002b3c
 8006290:	20002c14 	.word	0x20002c14
 8006294:	20002bc0 	.word	0x20002bc0

08006298 <loop>:

void loop(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b0b0      	sub	sp, #192	; 0xc0
 800629c:	af00      	add	r7, sp, #0
	bno055_assignI2C(&hi2c2, 0x28);
 800629e:	2128      	movs	r1, #40	; 0x28
 80062a0:	48a1      	ldr	r0, [pc, #644]	; (8006528 <loop+0x290>)
 80062a2:	f7ff fb7f 	bl	80059a4 <bno055_assignI2C>
	bno055_vector_t imu1_orientation = bno055_getVectorEuler();
 80062a6:	f7fb fa27 	bl	80016f8 <bno055_getVectorEuler>
 80062aa:	eeb0 4a40 	vmov.f32	s8, s0
 80062ae:	eef0 4a60 	vmov.f32	s9, s1
 80062b2:	eeb0 5a41 	vmov.f32	s10, s2
 80062b6:	eef0 5a61 	vmov.f32	s11, s3
 80062ba:	eeb0 6a42 	vmov.f32	s12, s4
 80062be:	eef0 6a62 	vmov.f32	s13, s5
 80062c2:	eeb0 7a43 	vmov.f32	s14, s6
 80062c6:	eef0 7a63 	vmov.f32	s15, s7
 80062ca:	ed87 4b28 	vstr	d4, [r7, #160]	; 0xa0
 80062ce:	ed87 5b2a 	vstr	d5, [r7, #168]	; 0xa8
 80062d2:	ed87 6b2c 	vstr	d6, [r7, #176]	; 0xb0
 80062d6:	ed87 7b2e 	vstr	d7, [r7, #184]	; 0xb8
	bno055_vector_t imu1_angular_velocity = bno055_getVectorGyroscope();
 80062da:	f7fb f9ca 	bl	8001672 <bno055_getVectorGyroscope>
 80062de:	eeb0 4a40 	vmov.f32	s8, s0
 80062e2:	eef0 4a60 	vmov.f32	s9, s1
 80062e6:	eeb0 5a41 	vmov.f32	s10, s2
 80062ea:	eef0 5a61 	vmov.f32	s11, s3
 80062ee:	eeb0 6a42 	vmov.f32	s12, s4
 80062f2:	eef0 6a62 	vmov.f32	s13, s5
 80062f6:	eeb0 7a43 	vmov.f32	s14, s6
 80062fa:	eef0 7a63 	vmov.f32	s15, s7
 80062fe:	ed87 4b20 	vstr	d4, [r7, #128]	; 0x80
 8006302:	ed87 5b22 	vstr	d5, [r7, #136]	; 0x88
 8006306:	ed87 6b24 	vstr	d6, [r7, #144]	; 0x90
 800630a:	ed87 7b26 	vstr	d7, [r7, #152]	; 0x98
	bno055_vector_t imu1_linear_acceleration = bno055_getVectorAccelerometer();
 800630e:	f7fb f96d 	bl	80015ec <bno055_getVectorAccelerometer>
 8006312:	eeb0 4a40 	vmov.f32	s8, s0
 8006316:	eef0 4a60 	vmov.f32	s9, s1
 800631a:	eeb0 5a41 	vmov.f32	s10, s2
 800631e:	eef0 5a61 	vmov.f32	s11, s3
 8006322:	eeb0 6a42 	vmov.f32	s12, s4
 8006326:	eef0 6a62 	vmov.f32	s13, s5
 800632a:	eeb0 7a43 	vmov.f32	s14, s6
 800632e:	eef0 7a63 	vmov.f32	s15, s7
 8006332:	ed87 4b18 	vstr	d4, [r7, #96]	; 0x60
 8006336:	ed87 5b1a 	vstr	d5, [r7, #104]	; 0x68
 800633a:	ed87 6b1c 	vstr	d6, [r7, #112]	; 0x70
 800633e:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	imu1.orientation.x=imu1_orientation.x;
 8006342:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006346:	4979      	ldr	r1, [pc, #484]	; (800652c <loop+0x294>)
 8006348:	e9c1 2308 	strd	r2, r3, [r1, #32]
	imu1.orientation.y=imu1_orientation.y;
 800634c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006350:	4976      	ldr	r1, [pc, #472]	; (800652c <loop+0x294>)
 8006352:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	imu1.orientation.z=imu1_orientation.z;
 8006356:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800635a:	4974      	ldr	r1, [pc, #464]	; (800652c <loop+0x294>)
 800635c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	imu1.angular_velocity.x=imu1_angular_velocity.x;
 8006360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006364:	4971      	ldr	r1, [pc, #452]	; (800652c <loop+0x294>)
 8006366:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	imu1.angular_velocity.y=imu1_angular_velocity.y;
 800636a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800636e:	496f      	ldr	r1, [pc, #444]	; (800652c <loop+0x294>)
 8006370:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	imu1.angular_velocity.z=imu1_angular_velocity.z;
 8006374:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8006378:	496c      	ldr	r1, [pc, #432]	; (800652c <loop+0x294>)
 800637a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	imu1.linear_acceleration.x=imu1_linear_acceleration.x;
 800637e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006382:	496a      	ldr	r1, [pc, #424]	; (800652c <loop+0x294>)
 8006384:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
	imu1.linear_acceleration.y=imu1_linear_acceleration.y;
 8006388:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800638c:	4967      	ldr	r1, [pc, #412]	; (800652c <loop+0x294>)
 800638e:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
	imu1.linear_acceleration.z=imu1_linear_acceleration.z;
 8006392:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006396:	4965      	ldr	r1, [pc, #404]	; (800652c <loop+0x294>)
 8006398:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
	imu1.header.frame_id="base_imu1";
 800639c:	4b63      	ldr	r3, [pc, #396]	; (800652c <loop+0x294>)
 800639e:	4a64      	ldr	r2, [pc, #400]	; (8006530 <loop+0x298>)
 80063a0:	615a      	str	r2, [r3, #20]
	pub_imu1.publish(&imu1);
 80063a2:	4962      	ldr	r1, [pc, #392]	; (800652c <loop+0x294>)
 80063a4:	4863      	ldr	r0, [pc, #396]	; (8006534 <loop+0x29c>)
 80063a6:	f7fc fbb2 	bl	8002b0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	//HAL_Delay(1);
	bno055_assignI2C(&hi2c1, 0x29);
 80063aa:	2129      	movs	r1, #41	; 0x29
 80063ac:	4862      	ldr	r0, [pc, #392]	; (8006538 <loop+0x2a0>)
 80063ae:	f7ff faf9 	bl	80059a4 <bno055_assignI2C>
	bno055_vector_t imu2_orientation = bno055_getVectorEuler();
 80063b2:	f7fb f9a1 	bl	80016f8 <bno055_getVectorEuler>
 80063b6:	eeb0 4a40 	vmov.f32	s8, s0
 80063ba:	eef0 4a60 	vmov.f32	s9, s1
 80063be:	eeb0 5a41 	vmov.f32	s10, s2
 80063c2:	eef0 5a61 	vmov.f32	s11, s3
 80063c6:	eeb0 6a42 	vmov.f32	s12, s4
 80063ca:	eef0 6a62 	vmov.f32	s13, s5
 80063ce:	eeb0 7a43 	vmov.f32	s14, s6
 80063d2:	eef0 7a63 	vmov.f32	s15, s7
 80063d6:	ed87 4b10 	vstr	d4, [r7, #64]	; 0x40
 80063da:	ed87 5b12 	vstr	d5, [r7, #72]	; 0x48
 80063de:	ed87 6b14 	vstr	d6, [r7, #80]	; 0x50
 80063e2:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	bno055_vector_t imu2_angular_velocity = bno055_getVectorGyroscope();
 80063e6:	f7fb f944 	bl	8001672 <bno055_getVectorGyroscope>
 80063ea:	eeb0 4a40 	vmov.f32	s8, s0
 80063ee:	eef0 4a60 	vmov.f32	s9, s1
 80063f2:	eeb0 5a41 	vmov.f32	s10, s2
 80063f6:	eef0 5a61 	vmov.f32	s11, s3
 80063fa:	eeb0 6a42 	vmov.f32	s12, s4
 80063fe:	eef0 6a62 	vmov.f32	s13, s5
 8006402:	eeb0 7a43 	vmov.f32	s14, s6
 8006406:	eef0 7a63 	vmov.f32	s15, s7
 800640a:	ed87 4b08 	vstr	d4, [r7, #32]
 800640e:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8006412:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8006416:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	bno055_vector_t imu2_linear_acceleration = bno055_getVectorAccelerometer();
 800641a:	f7fb f8e7 	bl	80015ec <bno055_getVectorAccelerometer>
 800641e:	eeb0 4a40 	vmov.f32	s8, s0
 8006422:	eef0 4a60 	vmov.f32	s9, s1
 8006426:	eeb0 5a41 	vmov.f32	s10, s2
 800642a:	eef0 5a61 	vmov.f32	s11, s3
 800642e:	eeb0 6a42 	vmov.f32	s12, s4
 8006432:	eef0 6a62 	vmov.f32	s13, s5
 8006436:	eeb0 7a43 	vmov.f32	s14, s6
 800643a:	eef0 7a63 	vmov.f32	s15, s7
 800643e:	ed87 4b00 	vstr	d4, [r7]
 8006442:	ed87 5b02 	vstr	d5, [r7, #8]
 8006446:	ed87 6b04 	vstr	d6, [r7, #16]
 800644a:	ed87 7b06 	vstr	d7, [r7, #24]
	imu2.orientation.x=imu2_orientation.x;
 800644e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006452:	493a      	ldr	r1, [pc, #232]	; (800653c <loop+0x2a4>)
 8006454:	e9c1 2308 	strd	r2, r3, [r1, #32]
	imu2.orientation.y=imu2_orientation.y;
 8006458:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800645c:	4937      	ldr	r1, [pc, #220]	; (800653c <loop+0x2a4>)
 800645e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	imu2.orientation.z=imu2_orientation.z;
 8006462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006466:	4935      	ldr	r1, [pc, #212]	; (800653c <loop+0x2a4>)
 8006468:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	imu2.angular_velocity.x=imu2_angular_velocity.x;
 800646c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006470:	4932      	ldr	r1, [pc, #200]	; (800653c <loop+0x2a4>)
 8006472:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	imu2.angular_velocity.y=imu2_angular_velocity.y;
 8006476:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800647a:	4930      	ldr	r1, [pc, #192]	; (800653c <loop+0x2a4>)
 800647c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	imu2.angular_velocity.z=imu2_angular_velocity.z;
 8006480:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006484:	492d      	ldr	r1, [pc, #180]	; (800653c <loop+0x2a4>)
 8006486:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	imu2.linear_acceleration.x=imu2_linear_acceleration.x;
 800648a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800648e:	492b      	ldr	r1, [pc, #172]	; (800653c <loop+0x2a4>)
 8006490:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
	imu2.linear_acceleration.y=imu2_linear_acceleration.y;
 8006494:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006498:	4928      	ldr	r1, [pc, #160]	; (800653c <loop+0x2a4>)
 800649a:	e9c1 2340 	strd	r2, r3, [r1, #256]	; 0x100
	imu2.linear_acceleration.z=imu2_linear_acceleration.z;
 800649e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a2:	4926      	ldr	r1, [pc, #152]	; (800653c <loop+0x2a4>)
 80064a4:	e9c1 2342 	strd	r2, r3, [r1, #264]	; 0x108
	imu2.header.frame_id="base_imu2";
 80064a8:	4b24      	ldr	r3, [pc, #144]	; (800653c <loop+0x2a4>)
 80064aa:	4a25      	ldr	r2, [pc, #148]	; (8006540 <loop+0x2a8>)
 80064ac:	615a      	str	r2, [r3, #20]
	pub_imu2.publish(&imu2);
 80064ae:	4923      	ldr	r1, [pc, #140]	; (800653c <loop+0x2a4>)
 80064b0:	4824      	ldr	r0, [pc, #144]	; (8006544 <loop+0x2ac>)
 80064b2:	f7fc fb2c 	bl	8002b0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	VL53L0x_StartConversion(&hi2c3, VL53L0x_add_chin);
 80064b6:	2152      	movs	r1, #82	; 0x52
 80064b8:	4823      	ldr	r0, [pc, #140]	; (8006548 <loop+0x2b0>)
 80064ba:	f7fa fdfd 	bl	80010b8 <VL53L0x_StartConversion>
	VL53L0x_ReadDistance(&hi2c3, &VL53L0x_Data_chin, VL53L0x_add_chin);
 80064be:	2252      	movs	r2, #82	; 0x52
 80064c0:	4922      	ldr	r1, [pc, #136]	; (800654c <loop+0x2b4>)
 80064c2:	4821      	ldr	r0, [pc, #132]	; (8006548 <loop+0x2b0>)
 80064c4:	f7fa fe26 	bl	8001114 <VL53L0x_ReadDistance>
	if(VL53L0x_Data_chin.distValidFinal < threshold_IR_chin)
 80064c8:	4b20      	ldr	r3, [pc, #128]	; (800654c <loop+0x2b4>)
 80064ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064cc:	2b39      	cmp	r3, #57	; 0x39
 80064ce:	d803      	bhi.n	80064d8 <loop+0x240>
	{
		IR_chin.data = true;
 80064d0:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <loop+0x2b8>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	e002      	b.n	80064de <loop+0x246>
	}
	else
	{
		IR_chin.data = false;
 80064d8:	4b1d      	ldr	r3, [pc, #116]	; (8006550 <loop+0x2b8>)
 80064da:	2200      	movs	r2, #0
 80064dc:	711a      	strb	r2, [r3, #4]
	}
	pub_IR_chin.publish(&IR_chin);
 80064de:	491c      	ldr	r1, [pc, #112]	; (8006550 <loop+0x2b8>)
 80064e0:	481c      	ldr	r0, [pc, #112]	; (8006554 <loop+0x2bc>)
 80064e2:	f7fc fb14 	bl	8002b0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	//HAL_Delay(1);
	VL53L0x_StartConversion(&hi2c2, VL53L0x_add_forehead);
 80064e6:	2152      	movs	r1, #82	; 0x52
 80064e8:	480f      	ldr	r0, [pc, #60]	; (8006528 <loop+0x290>)
 80064ea:	f7fa fde5 	bl	80010b8 <VL53L0x_StartConversion>
	VL53L0x_ReadDistance(&hi2c2, &VL53L0x_Data_forehead, VL53L0x_add_forehead);
 80064ee:	2252      	movs	r2, #82	; 0x52
 80064f0:	4919      	ldr	r1, [pc, #100]	; (8006558 <loop+0x2c0>)
 80064f2:	480d      	ldr	r0, [pc, #52]	; (8006528 <loop+0x290>)
 80064f4:	f7fa fe0e 	bl	8001114 <VL53L0x_ReadDistance>
	IR_face.data = VL53L0x_Data_forehead.distValidFinal;
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <loop+0x2c0>)
 80064fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006504:	4b15      	ldr	r3, [pc, #84]	; (800655c <loop+0x2c4>)
 8006506:	edc3 7a01 	vstr	s15, [r3, #4]
	pub_IR_face.publish(&IR_face);
 800650a:	4914      	ldr	r1, [pc, #80]	; (800655c <loop+0x2c4>)
 800650c:	4814      	ldr	r0, [pc, #80]	; (8006560 <loop+0x2c8>)
 800650e:	f7fc fafe 	bl	8002b0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	snprintf(a, 1000,"dist_VL_forehead: %d \n",VL53L0x_Data_forehead.distValidFinal);
	TransmitBuffer = a;
	HAL_UART_Transmit(&huart2, (uint8_t*)TransmitBuffer, strlen(TransmitBuffer), 0xFFFF);*/

	nh.spinOnce();
 8006512:	4814      	ldr	r0, [pc, #80]	; (8006564 <loop+0x2cc>)
 8006514:	f000 fca4 	bl	8006e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(10);
 8006518:	200a      	movs	r0, #10
 800651a:	f002 f849 	bl	80085b0 <HAL_Delay>
}
 800651e:	bf00      	nop
 8006520:	37c0      	adds	r7, #192	; 0xc0
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20002c14 	.word	0x20002c14
 800652c:	20002800 	.word	0x20002800
 8006530:	0800fbe0 	.word	0x0800fbe0
 8006534:	20002958 	.word	0x20002958
 8006538:	20002bc0 	.word	0x20002bc0
 800653c:	20002970 	.word	0x20002970
 8006540:	0800fbec 	.word	0x0800fbec
 8006544:	20002ac8 	.word	0x20002ac8
 8006548:	20002b6c 	.word	0x20002b6c
 800654c:	200010d8 	.word	0x200010d8
 8006550:	20002adc 	.word	0x20002adc
 8006554:	20002ae4 	.word	0x20002ae4
 8006558:	20001128 	.word	0x20001128
 800655c:	20002af8 	.word	0x20002af8
 8006560:	20002b00 	.word	0x20002b00
 8006564:	20001178 	.word	0x20001178

08006568 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE>:

void momiu_posMotor_cb(const momiu_p::momiu_posMotor& msg)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

	int16_t moter1_pos = msg.motor1_pos;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	889b      	ldrh	r3, [r3, #4]
 8006574:	82fb      	strh	r3, [r7, #22]
	int16_t moter2_pos = msg.motor2_pos;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	82bb      	strh	r3, [r7, #20]
	int16_t moter3_pos = msg.motor3_pos;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	891b      	ldrh	r3, [r3, #8]
 8006580:	827b      	strh	r3, [r7, #18]
	int16_t moter4_pos = msg.motor4_pos;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	895b      	ldrh	r3, [r3, #10]
 8006586:	823b      	strh	r3, [r7, #16]
	int16_t moter5_pos = msg.motor5_pos;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	899b      	ldrh	r3, [r3, #12]
 800658c:	81fb      	strh	r3, [r7, #14]
	int16_t moter6_pos = msg.motor6_pos;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	89db      	ldrh	r3, [r3, #14]
 8006592:	81bb      	strh	r3, [r7, #12]
	int16_t moter7_pos = msg.motor7_pos;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8a1b      	ldrh	r3, [r3, #16]
 8006598:	817b      	strh	r3, [r7, #10]
	int16_t moter8_pos = msg.motor8_pos;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	8a5b      	ldrh	r3, [r3, #18]
 800659e:	813b      	strh	r3, [r7, #8]

	Dynamixel_servo((0x01),(moter1_pos/0.088),(0x50));
 80065a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7f9 ffd5 	bl	8000554 <__aeabi_i2d>
 80065aa:	a35b      	add	r3, pc, #364	; (adr r3, 8006718 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b0>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7fa f964 	bl	800087c <__aeabi_ddiv>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4610      	mov	r0, r2
 80065ba:	4619      	mov	r1, r3
 80065bc:	f7fa fb0c 	bl	8000bd8 <__aeabi_d2uiz>
 80065c0:	4603      	mov	r3, r0
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2250      	movs	r2, #80	; 0x50
 80065c6:	4619      	mov	r1, r3
 80065c8:	2001      	movs	r0, #1
 80065ca:	f7fa fd1d 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x02),(moter2_pos/0.088),(0x50));
 80065ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7f9 ffbe 	bl	8000554 <__aeabi_i2d>
 80065d8:	a34f      	add	r3, pc, #316	; (adr r3, 8006718 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b0>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7fa f94d 	bl	800087c <__aeabi_ddiv>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7fa faf5 	bl	8000bd8 <__aeabi_d2uiz>
 80065ee:	4603      	mov	r3, r0
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2250      	movs	r2, #80	; 0x50
 80065f4:	4619      	mov	r1, r3
 80065f6:	2002      	movs	r0, #2
 80065f8:	f7fa fd06 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x03),(moter3_pos/0.088),(0x50));
 80065fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006600:	4618      	mov	r0, r3
 8006602:	f7f9 ffa7 	bl	8000554 <__aeabi_i2d>
 8006606:	a344      	add	r3, pc, #272	; (adr r3, 8006718 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b0>)
 8006608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660c:	f7fa f936 	bl	800087c <__aeabi_ddiv>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	f7fa fade 	bl	8000bd8 <__aeabi_d2uiz>
 800661c:	4603      	mov	r3, r0
 800661e:	b29b      	uxth	r3, r3
 8006620:	2250      	movs	r2, #80	; 0x50
 8006622:	4619      	mov	r1, r3
 8006624:	2003      	movs	r0, #3
 8006626:	f7fa fcef 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x04),(moter4_pos/0.088),(0x50));
 800662a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800662e:	4618      	mov	r0, r3
 8006630:	f7f9 ff90 	bl	8000554 <__aeabi_i2d>
 8006634:	a338      	add	r3, pc, #224	; (adr r3, 8006718 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b0>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7fa f91f 	bl	800087c <__aeabi_ddiv>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4610      	mov	r0, r2
 8006644:	4619      	mov	r1, r3
 8006646:	f7fa fac7 	bl	8000bd8 <__aeabi_d2uiz>
 800664a:	4603      	mov	r3, r0
 800664c:	b29b      	uxth	r3, r3
 800664e:	2250      	movs	r2, #80	; 0x50
 8006650:	4619      	mov	r1, r3
 8006652:	2004      	movs	r0, #4
 8006654:	f7fa fcd8 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x05),(moter5_pos/0.088),(0x50));
 8006658:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800665c:	4618      	mov	r0, r3
 800665e:	f7f9 ff79 	bl	8000554 <__aeabi_i2d>
 8006662:	a32d      	add	r3, pc, #180	; (adr r3, 8006718 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b0>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7fa f908 	bl	800087c <__aeabi_ddiv>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f7fa fab0 	bl	8000bd8 <__aeabi_d2uiz>
 8006678:	4603      	mov	r3, r0
 800667a:	b29b      	uxth	r3, r3
 800667c:	2250      	movs	r2, #80	; 0x50
 800667e:	4619      	mov	r1, r3
 8006680:	2005      	movs	r0, #5
 8006682:	f7fa fcc1 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x06),(moter6_pos/0.088),(0x50));
 8006686:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800668a:	4618      	mov	r0, r3
 800668c:	f7f9 ff62 	bl	8000554 <__aeabi_i2d>
 8006690:	a321      	add	r3, pc, #132	; (adr r3, 8006718 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b0>)
 8006692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006696:	f7fa f8f1 	bl	800087c <__aeabi_ddiv>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f7fa fa99 	bl	8000bd8 <__aeabi_d2uiz>
 80066a6:	4603      	mov	r3, r0
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2250      	movs	r2, #80	; 0x50
 80066ac:	4619      	mov	r1, r3
 80066ae:	2006      	movs	r0, #6
 80066b0:	f7fa fcaa 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x07),(moter7_pos/0.29),(0x50));
 80066b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7f9 ff4b 	bl	8000554 <__aeabi_i2d>
 80066be:	a318      	add	r3, pc, #96	; (adr r3, 8006720 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b8>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	f7fa f8da 	bl	800087c <__aeabi_ddiv>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4610      	mov	r0, r2
 80066ce:	4619      	mov	r1, r3
 80066d0:	f7fa fa82 	bl	8000bd8 <__aeabi_d2uiz>
 80066d4:	4603      	mov	r3, r0
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2250      	movs	r2, #80	; 0x50
 80066da:	4619      	mov	r1, r3
 80066dc:	2007      	movs	r0, #7
 80066de:	f7fa fc93 	bl	8001008 <Dynamixel_servo>
	Dynamixel_servo((0x08),(moter8_pos/0.29),(0x50));
 80066e2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7f9 ff34 	bl	8000554 <__aeabi_i2d>
 80066ec:	a30c      	add	r3, pc, #48	; (adr r3, 8006720 <_Z17momiu_posMotor_cbRKN7momiu_p14momiu_posMotorE+0x1b8>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f7fa f8c3 	bl	800087c <__aeabi_ddiv>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4610      	mov	r0, r2
 80066fc:	4619      	mov	r1, r3
 80066fe:	f7fa fa6b 	bl	8000bd8 <__aeabi_d2uiz>
 8006702:	4603      	mov	r3, r0
 8006704:	b29b      	uxth	r3, r3
 8006706:	2250      	movs	r2, #80	; 0x50
 8006708:	4619      	mov	r1, r3
 800670a:	2008      	movs	r0, #8
 800670c:	f7fa fc7c 	bl	8001008 <Dynamixel_servo>

	/*snprintf(a, 1000,"motor1_pos : %d ,motor2_pos : %d ,motor3_pos : %d ,motor4_pos : %d ,motor5_pos : %d ,motor6_pos : %d ,motor7_pos : %d ,motor8_pos : %d \n",moter1_pos ,moter2_pos ,moter3_pos ,moter4_pos ,moter5_pos ,moter6_pos ,moter7_pos ,moter8_pos);
	char *TransmitBuffer = a;
	HAL_UART_Transmit(&huart2, (uint8_t*)TransmitBuffer, strlen(TransmitBuffer), 0xFFFF);*/

}
 8006710:	bf00      	nop
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	020c49ba 	.word	0x020c49ba
 800671c:	3fb6872b 	.word	0x3fb6872b
 8006720:	28f5c28f 	.word	0x28f5c28f
 8006724:	3fd28f5c 	.word	0x3fd28f5c

08006728 <_Z15pose_message_cbRKN7momiu_p12pose_messageE>:

void pose_message_cb(const momiu_p::pose_message& msg)
{
 8006728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800672a:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 800672e:	af20      	add	r7, sp, #128	; 0x80
 8006730:	1d3b      	adds	r3, r7, #4
 8006732:	6018      	str	r0, [r3, #0]
	char pose_name[50];
	snprintf(pose_name,50,"%s",msg.pose);
 8006734:	1d3b      	adds	r3, r7, #4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f507 7038 	add.w	r0, r7, #736	; 0x2e0
 800673e:	4ab9      	ldr	r2, [pc, #740]	; (8006a24 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x2fc>)
 8006740:	2132      	movs	r1, #50	; 0x32
 8006742:	f006 fecf 	bl	800d4e4 <sniprintf>
	int pose_No ;

	//--mapping "pose name" to "pose list array index"--
	char pose_name_list[9][50] = {"hello","tickle","happy","angry","surprise","sad","natural","confuse","dance"};
 8006746:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800674a:	4ab7      	ldr	r2, [pc, #732]	; (8006a28 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x300>)
 800674c:	4618      	mov	r0, r3
 800674e:	4611      	mov	r1, r2
 8006750:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8006754:	461a      	mov	r2, r3
 8006756:	f006 f96b 	bl	800ca30 <memcpy>
		 if(!strcmp ( pose_name, pose_name_list[0]))	{ pose_No =  0; }
 800675a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800675e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006762:	4611      	mov	r1, r2
 8006764:	4618      	mov	r0, r3
 8006766:	f7f9 fd3b 	bl	80001e0 <strcmp>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d103      	bne.n	8006778 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x50>
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006776:	e08a      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[1]))	{ pose_No =  1; }
 8006778:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800677c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006780:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006784:	4611      	mov	r1, r2
 8006786:	4618      	mov	r0, r3
 8006788:	f7f9 fd2a 	bl	80001e0 <strcmp>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d103      	bne.n	800679a <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x72>
 8006792:	2301      	movs	r3, #1
 8006794:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006798:	e079      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[2]))	{ pose_No =  2; }
 800679a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800679e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80067a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7f9 fd19 	bl	80001e0 <strcmp>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d103      	bne.n	80067bc <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x94>
 80067b4:	2302      	movs	r3, #2
 80067b6:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80067ba:	e068      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[3]))	{ pose_No =  3; }
 80067bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80067c0:	f103 0296 	add.w	r2, r3, #150	; 0x96
 80067c4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7f9 fd08 	bl	80001e0 <strcmp>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d103      	bne.n	80067de <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0xb6>
 80067d6:	2303      	movs	r3, #3
 80067d8:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80067dc:	e057      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[4]))	{ pose_No =  4; }
 80067de:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80067e2:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80067e6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7f9 fcf7 	bl	80001e0 <strcmp>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d103      	bne.n	8006800 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0xd8>
 80067f8:	2304      	movs	r3, #4
 80067fa:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 80067fe:	e046      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[5]))	{ pose_No =  5; }
 8006800:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006804:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8006808:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f7f9 fce6 	bl	80001e0 <strcmp>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d103      	bne.n	8006822 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0xfa>
 800681a:	2305      	movs	r3, #5
 800681c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006820:	e035      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[6]))	{ pose_No =  6; }
 8006822:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006826:	f503 7296 	add.w	r2, r3, #300	; 0x12c
 800682a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f7f9 fcd5 	bl	80001e0 <strcmp>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d103      	bne.n	8006844 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x11c>
 800683c:	2306      	movs	r3, #6
 800683e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006842:	e024      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[7]))	{ pose_No =  7; }
 8006844:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8006848:	f503 72af 	add.w	r2, r3, #350	; 0x15e
 800684c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f7f9 fcc4 	bl	80001e0 <strcmp>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x13e>
 800685e:	2307      	movs	r3, #7
 8006860:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006864:	e013      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else if(!strcmp ( pose_name, pose_name_list[8]))	{ pose_No =  8; }
 8006866:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800686a:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 800686e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8006872:	4611      	mov	r1, r2
 8006874:	4618      	mov	r0, r3
 8006876:	f7f9 fcb3 	bl	80001e0 <strcmp>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x160>
 8006880:	2308      	movs	r3, #8
 8006882:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006886:	e002      	b.n	800688e <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x166>
	else{ pose_No =  99; }
 8006888:	2363      	movs	r3, #99	; 0x63
 800688a:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

	//get priority and duration of pose from pose list
	int priority_of_pose = pose_list[pose_No][0][0]; //now, priority of pose not yet implemented
 800688e:	4967      	ldr	r1, [pc, #412]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 8006890:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	019b      	lsls	r3, r3, #6
 800689c:	440b      	add	r3, r1
 800689e:	edd3 7a00 	vldr	s15, [r3]
 80068a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068a6:	ee17 3a90 	vmov	r3, s15
 80068aa:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
	int duration_of_pose = pose_list[pose_No][0][1];
 80068ae:	495f      	ldr	r1, [pc, #380]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 80068b0:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	019b      	lsls	r3, r3, #6
 80068bc:	440b      	add	r3, r1
 80068be:	3304      	adds	r3, #4
 80068c0:	edd3 7a00 	vldr	s15, [r3]
 80068c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c8:	ee17 3a90 	vmov	r3, s15
 80068cc:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c

	uint32_t duration_per_subTrajectory;
	int num_viapoint_of_pose;
	for(int i=1;i<=10;i++)
 80068d0:	2301      	movs	r3, #1
 80068d2:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 80068d6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80068da:	2b0a      	cmp	r3, #10
 80068dc:	f300 80a8 	bgt.w	8006a30 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x308>
	{
		//Get number of via point of pose
		int check_via_point = pose_list[pose_No][i+1][0] + pose_list[pose_No][i+1][1] + pose_list[pose_No][i+1][2] + pose_list[pose_No][i+1][3] + pose_list[pose_No][i+1][4] + pose_list[pose_No][i+1][5] + pose_list[pose_No][i+1][6] + pose_list[pose_No][i+1][7];
 80068e0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	4851      	ldr	r0, [pc, #324]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 80068e8:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	440b      	add	r3, r1
 80068f6:	015b      	lsls	r3, r3, #5
 80068f8:	4403      	add	r3, r0
 80068fa:	ed93 7a00 	vldr	s14, [r3]
 80068fe:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8006902:	1c59      	adds	r1, r3, #1
 8006904:	4849      	ldr	r0, [pc, #292]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 8006906:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800690a:	4613      	mov	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	440b      	add	r3, r1
 8006914:	015b      	lsls	r3, r3, #5
 8006916:	4403      	add	r3, r0
 8006918:	3304      	adds	r3, #4
 800691a:	edd3 7a00 	vldr	s15, [r3]
 800691e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006922:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8006926:	1c59      	adds	r1, r3, #1
 8006928:	4840      	ldr	r0, [pc, #256]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 800692a:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	440b      	add	r3, r1
 8006938:	015b      	lsls	r3, r3, #5
 800693a:	4403      	add	r3, r0
 800693c:	3308      	adds	r3, #8
 800693e:	edd3 7a00 	vldr	s15, [r3]
 8006942:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006946:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800694a:	1c59      	adds	r1, r3, #1
 800694c:	4837      	ldr	r0, [pc, #220]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 800694e:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	440b      	add	r3, r1
 800695c:	015b      	lsls	r3, r3, #5
 800695e:	4403      	add	r3, r0
 8006960:	330c      	adds	r3, #12
 8006962:	edd3 7a00 	vldr	s15, [r3]
 8006966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800696a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800696e:	1c59      	adds	r1, r3, #1
 8006970:	482e      	ldr	r0, [pc, #184]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 8006972:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	440b      	add	r3, r1
 8006980:	015b      	lsls	r3, r3, #5
 8006982:	4403      	add	r3, r0
 8006984:	3310      	adds	r3, #16
 8006986:	edd3 7a00 	vldr	s15, [r3]
 800698a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800698e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8006992:	1c59      	adds	r1, r3, #1
 8006994:	4825      	ldr	r0, [pc, #148]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 8006996:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	440b      	add	r3, r1
 80069a4:	015b      	lsls	r3, r3, #5
 80069a6:	4403      	add	r3, r0
 80069a8:	3314      	adds	r3, #20
 80069aa:	edd3 7a00 	vldr	s15, [r3]
 80069ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069b2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	481c      	ldr	r0, [pc, #112]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 80069ba:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80069be:	4613      	mov	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	440b      	add	r3, r1
 80069c8:	015b      	lsls	r3, r3, #5
 80069ca:	4403      	add	r3, r0
 80069cc:	3318      	adds	r3, #24
 80069ce:	edd3 7a00 	vldr	s15, [r3]
 80069d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069d6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80069da:	1c59      	adds	r1, r3, #1
 80069dc:	4813      	ldr	r0, [pc, #76]	; (8006a2c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x304>)
 80069de:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	005b      	lsls	r3, r3, #1
 80069ea:	440b      	add	r3, r1
 80069ec:	015b      	lsls	r3, r3, #5
 80069ee:	4403      	add	r3, r0
 80069f0:	331c      	adds	r3, #28
 80069f2:	edd3 7a00 	vldr	s15, [r3]
 80069f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069fe:	ee17 3a90 	vmov	r3, s15
 8006a02:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
		if(check_via_point < 1)
 8006a06:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dc04      	bgt.n	8006a18 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x2f0>
		{
			num_viapoint_of_pose = i ;
 8006a0e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8006a12:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
			break;
 8006a16:	e00b      	b.n	8006a30 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x308>
	for(int i=1;i<=10;i++)
 8006a18:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8006a22:	e758      	b.n	80068d6 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x1ae>
 8006a24:	0800fbf8 	.word	0x0800fbf8
 8006a28:	0800fbfc 	.word	0x0800fbfc
 8006a2c:	2000000c 	.word	0x2000000c
		}
	}

	//find duration of sub trajectory by average from total duration of pose
	duration_per_subTrajectory = (duration_of_pose/(num_viapoint_of_pose-1));
 8006a30:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8006a34:	3b01      	subs	r3, #1
 8006a36:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8006a3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8006a3e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314

	for(int j = 1 ; j <= msg.loop;j++)
 8006a42:	2301      	movs	r3, #1
 8006a44:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8006a48:	1d3b      	adds	r3, r7, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	7a5b      	ldrb	r3, [r3, #9]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8006a54:	4293      	cmp	r3, r2
 8006a56:	f300 80d8 	bgt.w	8006c0a <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4e2>
	{
		for(int i=1;i<=num_viapoint_of_pose-1;i++)
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8006a60:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 8006a64:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	f340 80c8 	ble.w	8006bfe <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4d6>
		{
			//is trajectory queue empty?
			//if trajectory queue "is empty"     -> generate trajectory of pose then put coefficient of trajectory to cycle queue and assign start_action_time = HAL_GetTick() for start drive motor to follow trajectory in timer interrupt function(HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim))
			//if trajectory queue "is not empty" -> generate trajectory of pose then put coefficient of trajectory to cycle queue
			if(check_cycle_queue_empty(&trajectory_queue)==1)
 8006a6e:	4869      	ldr	r0, [pc, #420]	; (8006c14 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4ec>)
 8006a70:	f7fa ff24 	bl	80018bc <check_cycle_queue_empty>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	bf0c      	ite	eq
 8006a7a:	2301      	moveq	r3, #1
 8006a7c:	2300      	movne	r3, #0
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d058      	beq.n	8006b36 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x40e>
			{
				via_point via_point_init;
				via_point via_point_final;
				memcpy(via_point_init.position,pose_list[pose_No][i],100);
 8006a84:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8006a94:	4413      	add	r3, r2
 8006a96:	015b      	lsls	r3, r3, #5
 8006a98:	4a5f      	ldr	r2, [pc, #380]	; (8006c18 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4f0>)
 8006a9a:	1899      	adds	r1, r3, r2
 8006a9c:	f107 030c 	add.w	r3, r7, #12
 8006aa0:	2264      	movs	r2, #100	; 0x64
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f005 ffc4 	bl	800ca30 <memcpy>
				memcpy(via_point_final.position,pose_list[pose_No][i+1],100);
 8006aa8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8006aac:	1c59      	adds	r1, r3, #1
 8006aae:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	440b      	add	r3, r1
 8006abc:	015b      	lsls	r3, r3, #5
 8006abe:	4a56      	ldr	r2, [pc, #344]	; (8006c18 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4f0>)
 8006ac0:	1899      	adds	r1, r3, r2
 8006ac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006ac6:	2264      	movs	r2, #100	; 0x64
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f005 ffb1 	bl	800ca30 <memcpy>

				float temp_coeff_cubic_spline[9][4];

				trajectory_genaration(via_point_init, via_point_final, duration_per_subTrajectory, priority_of_pose, temp_coeff_cubic_spline);
 8006ace:	f107 060c 	add.w	r6, r7, #12
 8006ad2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006ad6:	931e      	str	r3, [sp, #120]	; 0x78
 8006ad8:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8006adc:	931d      	str	r3, [sp, #116]	; 0x74
 8006ade:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006ae2:	931c      	str	r3, [sp, #112]	; 0x70
 8006ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006ae8:	ac0c      	add	r4, sp, #48	; 0x30
 8006aea:	461d      	mov	r5, r3
 8006aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006b00:	466d      	mov	r5, sp
 8006b02:	f106 0410 	add.w	r4, r6, #16
 8006b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006b12:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006b16:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006b1a:	f001 f835 	bl	8007b88 <trajectory_genaration>

				put_cycle_queue(&trajectory_queue, temp_coeff_cubic_spline);
 8006b1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b22:	4619      	mov	r1, r3
 8006b24:	483b      	ldr	r0, [pc, #236]	; (8006c14 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4ec>)
 8006b26:	f7fa fe3f 	bl	80017a8 <put_cycle_queue>
				start_action_time=HAL_GetTick();
 8006b2a:	f001 fd35 	bl	8008598 <HAL_GetTick>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4f4>)
 8006b32:	6013      	str	r3, [r2, #0]
 8006b34:	e05d      	b.n	8006bf2 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4ca>

				snprintf(a, 1000,"***************************************************\n");
				TransmitBuffer = a;
				HAL_UART_Transmit(&huart2, (uint8_t*)TransmitBuffer, strlen(TransmitBuffer), 0xFFFF);*/
			}
			else if(check_cycle_queue_empty(&trajectory_queue)==0)
 8006b36:	4837      	ldr	r0, [pc, #220]	; (8006c14 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4ec>)
 8006b38:	f7fa fec0 	bl	80018bc <check_cycle_queue_empty>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bf0c      	ite	eq
 8006b42:	2301      	moveq	r3, #1
 8006b44:	2300      	movne	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d052      	beq.n	8006bf2 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4ca>
			{
				via_point via_point_init;
				via_point via_point_final;
				memcpy(via_point_init.position,pose_list[pose_No][i],100);
 8006b4c:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8006b5c:	4413      	add	r3, r2
 8006b5e:	015b      	lsls	r3, r3, #5
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4f0>)
 8006b62:	1899      	adds	r1, r3, r2
 8006b64:	f107 030c 	add.w	r3, r7, #12
 8006b68:	2264      	movs	r2, #100	; 0x64
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f005 ff60 	bl	800ca30 <memcpy>
				memcpy(via_point_final.position,pose_list[pose_No][i+1],100);
 8006b70:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8006b74:	1c59      	adds	r1, r3, #1
 8006b76:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	015b      	lsls	r3, r3, #5
 8006b86:	4a24      	ldr	r2, [pc, #144]	; (8006c18 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4f0>)
 8006b88:	1899      	adds	r1, r3, r2
 8006b8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006b8e:	2264      	movs	r2, #100	; 0x64
 8006b90:	4618      	mov	r0, r3
 8006b92:	f005 ff4d 	bl	800ca30 <memcpy>

				float temp_coeff_cubic_spline[9][4];

				trajectory_genaration(via_point_init, via_point_final, duration_per_subTrajectory, priority_of_pose, temp_coeff_cubic_spline);
 8006b96:	f107 060c 	add.w	r6, r7, #12
 8006b9a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006b9e:	931e      	str	r3, [sp, #120]	; 0x78
 8006ba0:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8006ba4:	931d      	str	r3, [sp, #116]	; 0x74
 8006ba6:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8006baa:	931c      	str	r3, [sp, #112]	; 0x70
 8006bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006bb0:	ac0c      	add	r4, sp, #48	; 0x30
 8006bb2:	461d      	mov	r5, r3
 8006bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006bc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8006bc8:	466d      	mov	r5, sp
 8006bca:	f106 0410 	add.w	r4, r6, #16
 8006bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006bd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006bd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006bda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006bde:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006be2:	f000 ffd1 	bl	8007b88 <trajectory_genaration>

				put_cycle_queue(&trajectory_queue, temp_coeff_cubic_spline);
 8006be6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006bea:	4619      	mov	r1, r3
 8006bec:	4809      	ldr	r0, [pc, #36]	; (8006c14 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x4ec>)
 8006bee:	f7fa fddb 	bl	80017a8 <put_cycle_queue>
		for(int i=1;i<=num_viapoint_of_pose-1;i++)
 8006bf2:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8006bfc:	e730      	b.n	8006a60 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x338>
	for(int j = 1 ; j <= msg.loop;j++)
 8006bfe:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8006c02:	3301      	adds	r3, #1
 8006c04:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8006c08:	e71e      	b.n	8006a48 <_Z15pose_message_cbRKN7momiu_p12pose_messageE+0x320>
				TransmitBuffer = a;
				HAL_UART_Transmit(&huart2, (uint8_t*)TransmitBuffer, strlen(TransmitBuffer), 0xFFFF);*/
			}
		}
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c14:	20001cb4 	.word	0x20001cb4
 8006c18:	2000000c 	.word	0x2000000c
 8006c1c:	200027fc 	.word	0x200027fc

08006c20 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d80d      	bhi.n	8006c50 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	fa22 f103 	lsr.w	r1, r2, r3
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	b2ca      	uxtb	r2, r1
 8006c46:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e7ee      	b.n	8006c2e <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8006c50:	bf00      	nop
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d811      	bhi.n	8006c9a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	440a      	add	r2, r1
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	4611      	mov	r1, r2
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	00d2      	lsls	r2, r2, #3
 8006c88:	fa01 f202 	lsl.w	r2, r1, r2
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3301      	adds	r3, #1
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e7ea      	b.n	8006c70 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8006c9a:	bf00      	nop
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	0800ff60 	.word	0x0800ff60

08006cc8 <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff ffe5 	bl	8006ca8 <_ZN3ros11Subscriber_C1Ev>
 8006cde:	4a0b      	ldr	r2, [pc, #44]	; (8006d0c <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fa33 	bl	8005154 <_ZN7momiu_p14momiu_posMotorC1Ev>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	621a      	str	r2, [r3, #32]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	625a      	str	r2, [r3, #36]	; 0x24
  {
    topic_ = topic_name;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	609a      	str	r2, [r3, #8]
  };
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	0800fe74 	.word	0x0800fe74

08006d10 <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff ffc1 	bl	8006ca8 <_ZN3ros11Subscriber_C1Ev>
 8006d26:	4a0b      	ldr	r2, [pc, #44]	; (8006d54 <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fc19 	bl	8005568 <_ZN7momiu_p12pose_messageC1Ev>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	61da      	str	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	621a      	str	r2, [r3, #32]
    topic_ = topic_name;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]
  };
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	0800fe5c 	.word	0x0800fe5c

08006d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
  }
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fb ff15 	bl	8002bac <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
    bytes_ = 0;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
    index_ = 0;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
    topic_ = 0;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c3 2af4 	str.w	r2, [r3, #2804]	; 0xaf4
  };
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8006daa:	b480      	push	{r7}
 8006dac:	b085      	sub	sp, #20
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b18      	cmp	r3, #24
 8006dbc:	dc1e      	bgt.n	8006dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d111      	bne.n	8006df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	60da      	str	r2, [r3, #12]
        return true;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e004      	b.n	8006dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	3301      	adds	r3, #1
 8006df8:	60fb      	str	r3, [r7, #12]
 8006dfa:	e7dd      	b.n	8006db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8006dfc:	2300      	movs	r3, #0
  }
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2b18      	cmp	r3, #24
 8006e1c:	dc19      	bgt.n	8006e52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10d      	bne.n	8006e4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	605a      	str	r2, [r3, #4]
        return true;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e004      	b.n	8006e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	e7e2      	b.n	8006e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 8006e52:	2300      	movs	r3, #0
  }
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	3304      	adds	r3, #4
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fb ff8b 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 8006e72:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 3b08 	ldr.w	r3, [r3, #2824]	; 0xb08
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d903      	bls.n	8006e8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2b00 	strb.w	r2, [r3, #2816]	; 0xb00
    if (mode_ != MODE_FIRST_FF)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	; 0xb0c
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d903      	bls.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
      if (spin_timeout_ > 0)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d014      	beq.n	8006ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3304      	adds	r3, #4
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fb ff64 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	1ad2      	subs	r2, r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf8c      	ite	hi
 8006ed0:	2301      	movhi	r3, #1
 8006ed2:	2300      	movls	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8006eda:	f06f 0301 	mvn.w	r3, #1
 8006ede:	e194      	b.n	800720a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7fb fe7d 	bl	8002be4 <_ZN13STM32Hardware4readEv>
 8006eea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f2c0 8174 	blt.w	80071dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 2afc 	ldr.w	r2, [r3, #2812]	; 0xafc
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	441a      	add	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 2afc 	str.w	r2, [r3, #2812]	; 0xafc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006f0a:	2b07      	cmp	r3, #7
 8006f0c:	d11e      	bne.n	8006f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 3af8 	ldr.w	r3, [r3, #2808]	; 0xaf8
 8006f14:	1c59      	adds	r1, r3, #1
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	f8c2 1af8 	str.w	r1, [r2, #2808]	; 0xaf8
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	b2d1      	uxtb	r1, r2
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4413      	add	r3, r2
 8006f24:	460a      	mov	r2, r1
 8006f26:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
        bytes_--;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
 8006f30:	1e5a      	subs	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1b4      	bne.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2208      	movs	r2, #8
 8006f46:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 8006f4a:	e7af      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d128      	bne.n	8006fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2bff      	cmp	r3, #255	; 0xff
 8006f5a:	d10d      	bne.n	8006f78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f103 0214 	add.w	r2, r3, #20
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8c3 2b0c 	str.w	r2, [r3, #2828]	; 0xb0c
 8006f76:	e799      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fb ff03 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 8006f82:	4602      	mov	r2, r0
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	bf8c      	ite	hi
 8006f90:	2301      	movhi	r3, #1
 8006f92:	2300      	movls	r3, #0
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d088      	beq.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2b00 	strb.w	r2, [r3, #2816]	; 0xb00
          return SPIN_TIMEOUT;
 8006fa2:	f06f 0301 	mvn.w	r3, #1
 8006fa6:	e130      	b.n	800720a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d118      	bne.n	8006fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2bfe      	cmp	r3, #254	; 0xfe
 8006fb6:	d107      	bne.n	8006fc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006fbe:	1c5a      	adds	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 8006fc6:	e771      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
          if (configured_ == false)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3b00 	ldrb.w	r3, [r3, #2816]	; 0xb00
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f47f af68 	bne.w	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f918 	bl	8007212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8006fe2:	e763      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d113      	bne.n	8007016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
        index_ = 0;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 2af8 	str.w	r2, [r3, #2808]	; 0xaf8
        mode_++;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
        checksum_ = data;               /* first byte for calculating size checksum */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	f8c3 2afc 	str.w	r2, [r3, #2812]	; 0xafc
 8007014:	e74a      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 800701c:	2b03      	cmp	r3, #3
 800701e:	d110      	bne.n	8007042 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 2af0 	ldr.w	r2, [r3, #2800]	; 0xaf0
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	021b      	lsls	r3, r3, #8
 800702a:	441a      	add	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 2af0 	str.w	r2, [r3, #2800]	; 0xaf0
        mode_++;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 8007040:	e734      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8007048:	2b04      	cmp	r3, #4
 800704a:	d116      	bne.n	800707a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3afc 	ldr.w	r3, [r3, #2812]	; 0xafc
 8007052:	425a      	negs	r2, r3
 8007054:	b2db      	uxtb	r3, r3
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	bf58      	it	pl
 800705a:	4253      	negpl	r3, r2
 800705c:	2bff      	cmp	r3, #255	; 0xff
 800705e:	d107      	bne.n	8007070 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 800706e:	e71d      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 8007078:	e718      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8007080:	2b05      	cmp	r3, #5
 8007082:	d10f      	bne.n	80070a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	f8c3 2af4 	str.w	r2, [r3, #2804]	; 0xaf4
        mode_++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
        checksum_ = data;               /* first byte included in checksum */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 2afc 	str.w	r2, [r3, #2812]	; 0xafc
 80070a2:	e703      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 80070aa:	2b06      	cmp	r3, #6
 80070ac:	d117      	bne.n	80070de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 2af4 	ldr.w	r2, [r3, #2804]	; 0xaf4
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8c3 2af4 	str.w	r2, [r3, #2804]	; 0xaf4
        mode_ = MODE_MESSAGE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2207      	movs	r2, #7
 80070c4:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
        if (bytes_ == 0)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 3af0 	ldr.w	r3, [r3, #2800]	; 0xaf0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f47f aeec 	bne.w	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2208      	movs	r2, #8
 80070d8:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
 80070dc:	e6e6      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3aec 	ldr.w	r3, [r3, #2796]	; 0xaec
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	f47f aee1 	bne.w	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f8c3 2aec 	str.w	r2, [r3, #2796]	; 0xaec
        if ((checksum_ % 256) == 255)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 3afc 	ldr.w	r3, [r3, #2812]	; 0xafc
 80070f8:	425a      	negs	r2, r3
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	bf58      	it	pl
 8007100:	4253      	negpl	r3, r2
 8007102:	2bff      	cmp	r3, #255	; 0xff
 8007104:	f47f aed2 	bne.w	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d110      	bne.n	8007134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f87d 	bl	8007212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f898 	bl	800724e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	f8c3 2b04 	str.w	r2, [r3, #2820]	; 0xb04
            last_sync_receive_time = c_time;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            return SPIN_ERR;
 800712e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007132:	e06a      	b.n	800720a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 800713a:	2b0a      	cmp	r3, #10
 800713c:	d107      	bne.n	800714e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007144:	4619      	mov	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f960 	bl	800740c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800714c:	e6ae      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 8007154:	2b06      	cmp	r3, #6
 8007156:	d10e      	bne.n	8007176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f603 3214 	addw	r2, r3, #2836	; 0xb14
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f7fb fb2d 	bl	80027c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2b10 	strb.w	r2, [r3, #2832]	; 0xb10
 8007174:	e69a      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 800717c:	2b0b      	cmp	r3, #11
 800717e:	d104      	bne.n	800718a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2b00 	strb.w	r2, [r3, #2816]	; 0xb00
 8007188:	e690      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 8007190:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 800719a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f43f ae84 	beq.w	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 80071aa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 80071b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3af4 	ldr.w	r3, [r3, #2804]	; 0xaf4
 80071be:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80071d6:	4611      	mov	r1, r2
 80071d8:	4798      	blx	r3
    while (true)
 80071da:	e667      	b.n	8006eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80071dc:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3b00 	ldrb.w	r3, [r3, #2816]	; 0xb00
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00f      	beq.n	8007208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3b04 	ldr.w	r3, [r3, #2820]	; 0xb04
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d906      	bls.n	8007208 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f809 	bl	8007212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	f8c3 2b04 	str.w	r2, [r3, #2820]	; 0xb04
    return SPIN_OK;
 8007208:	2300      	movs	r3, #0
  }
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800721a:	f107 030c 	add.w	r3, r7, #12
 800721e:	4618      	mov	r0, r3
 8007220:	f7fa fe2e 	bl	8001e80 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f107 020c 	add.w	r2, r7, #12
 800722e:	210a      	movs	r1, #10
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	4798      	blx	r3
    rt_time = hardware_.time();
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3304      	adds	r3, #4
 8007238:	4618      	mov	r0, r3
 800723a:	f7fb fda5 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 800723e:	4602      	mov	r2, r0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
  }
 8007246:	bf00      	nop
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800724e:	b590      	push	{r4, r7, lr}
 8007250:	b08b      	sub	sp, #44	; 0x2c
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8007256:	f107 030c 	add.w	r3, r7, #12
 800725a:	4618      	mov	r0, r3
 800725c:	f7fa ff00 	bl	8002060 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8007260:	2300      	movs	r3, #0
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	2b18      	cmp	r3, #24
 8007268:	dc63      	bgt.n	8007332 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d056      	beq.n	800732a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	b29b      	uxth	r3, r3
 800728e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007294:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6859      	ldr	r1, [r3, #4]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4608      	mov	r0, r1
 80072ca:	4798      	blx	r3
 80072cc:	4603      	mov	r3, r0
 80072ce:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	6859      	ldr	r1, [r3, #4]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	330c      	adds	r3, #12
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4608      	mov	r0, r1
 80072f8:	4798      	blx	r3
 80072fa:	4603      	mov	r3, r0
 80072fc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80072fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007302:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681c      	ldr	r4, [r3, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fb fc0c 	bl	8002b36 <_ZN3ros9Publisher15getEndpointTypeEv>
 800731e:	4601      	mov	r1, r0
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	461a      	mov	r2, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	3301      	adds	r3, #1
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
 8007330:	e798      	b.n	8007264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007332:	2300      	movs	r3, #0
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	2b18      	cmp	r3, #24
 800733a:	dc5f      	bgt.n	80073fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007340:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d053      	beq.n	80073f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007350:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8007354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	b29b      	uxth	r3, r3
 800735c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007362:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8007366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8007376:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737e:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 8007382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	3308      	adds	r3, #8
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4608      	mov	r0, r1
 800738e:	4798      	blx	r3
 8007390:	4603      	mov	r3, r0
 8007392:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007398:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 800739c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a4:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 80073a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4608      	mov	r0, r1
 80073b4:	4798      	blx	r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80073ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073be:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681c      	ldr	r4, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073ca:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 80073ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d6:	f202 22a2 	addw	r2, r2, #674	; 0x2a2
 80073da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3304      	adds	r3, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4608      	mov	r0, r1
 80073e6:	4798      	blx	r3
 80073e8:	4601      	mov	r1, r0
 80073ea:	f107 030c 	add.w	r3, r7, #12
 80073ee:	461a      	mov	r2, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	3301      	adds	r3, #1
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
 80073fa:	e79c      	b.n	8007336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2b00 	strb.w	r2, [r3, #2816]	; 0xb00
  }
 8007404:	bf00      	nop
 8007406:	372c      	adds	r7, #44	; 0x2c
 8007408:	46bd      	mov	sp, r7
 800740a:	bd90      	pop	{r4, r7, pc}

0800740c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8007416:	f107 0308 	add.w	r3, r7, #8
 800741a:	4618      	mov	r0, r3
 800741c:	f7fa fd30 	bl	8001e80 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	4618      	mov	r0, r3
 8007426:	f7fb fcaf 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 800742a:	4602      	mov	r2, r0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8007436:	f107 0308 	add.w	r3, r7, #8
 800743a:	6839      	ldr	r1, [r7, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f7fa fd8f 	bl	8001f60 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4915      	ldr	r1, [pc, #84]	; (800749c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007448:	fba1 1303 	umull	r1, r3, r1, r3
 800744c:	099b      	lsrs	r3, r3, #6
 800744e:	4413      	add	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8007452:	6939      	ldr	r1, [r7, #16]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4b11      	ldr	r3, [pc, #68]	; (800749c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007458:	fba3 0302 	umull	r0, r3, r3, r2
 800745c:	099b      	lsrs	r3, r3, #6
 800745e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007462:	fb00 f303 	mul.w	r3, r0, r3
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	4a0d      	ldr	r2, [pc, #52]	; (80074a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 800746a:	fb02 f303 	mul.w	r3, r2, r3
 800746e:	440b      	add	r3, r1
 8007470:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8007472:	f107 0308 	add.w	r3, r7, #8
 8007476:	3304      	adds	r3, #4
 8007478:	4619      	mov	r1, r3
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f8a4 	bl	80075c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3304      	adds	r3, #4
 8007484:	4618      	mov	r0, r3
 8007486:	f7fb fc7f 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 800748a:	4602      	mov	r2, r0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
  }
 8007492:	bf00      	nop
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	10624dd3 	.word	0x10624dd3
 80074a0:	000f4240 	.word	0x000f4240

080074a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b088      	sub	sp, #32
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b63      	cmp	r3, #99	; 0x63
 80074b4:	dd09      	ble.n	80074ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3b00 	ldrb.w	r3, [r3, #2816]	; 0xb00
 80074bc:	f083 0301 	eor.w	r3, r3, #1
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e077      	b.n	80075ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80074d6:	3207      	adds	r2, #7
 80074d8:	4611      	mov	r1, r2
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	4798      	blx	r3
 80074de:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	22ff      	movs	r2, #255	; 0xff
 80074e4:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	22fe      	movs	r2, #254	; 0xfe
 80074ec:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	b2da      	uxtb	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	121b      	asrs	r3, r3, #8
 8007500:	b2da      	uxtb	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 8007514:	4413      	add	r3, r2
 8007516:	b2db      	uxtb	r3, r3
 8007518:	43db      	mvns	r3, r3
 800751a:	b2da      	uxtb	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	b2da      	uxtb	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	b21b      	sxth	r3, r3
 8007530:	121b      	asrs	r3, r3, #8
 8007532:	b2da      	uxtb	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 800753a:	2300      	movs	r3, #0
 800753c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800753e:	2305      	movs	r3, #5
 8007540:	61bb      	str	r3, [r7, #24]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	3306      	adds	r3, #6
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	429a      	cmp	r2, r3
 800754a:	dc0d      	bgt.n	8007568 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	4413      	add	r3, r2
 8007552:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	3301      	adds	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
 8007566:	e7ec      	b.n	8007542 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	3307      	adds	r3, #7
 800756c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	425a      	negs	r2, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	bf58      	it	pl
 8007578:	4253      	negpl	r3, r2
 800757a:	b2da      	uxtb	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	1c59      	adds	r1, r3, #1
 8007580:	6179      	str	r1, [r7, #20]
 8007582:	43d2      	mvns	r2, r2
 8007584:	b2d1      	uxtb	r1, r2
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4413      	add	r3, r2
 800758a:	460a      	mov	r2, r1
 800758c:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007596:	dc0a      	bgt.n	80075ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	1d18      	adds	r0, r3, #4
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4619      	mov	r1, r3
 80075a6:	f7fb fba9 	bl	8002cfc <_ZN13STM32Hardware5writeEPhi>
      return l;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	e005      	b.n	80075ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80075ae:	4905      	ldr	r1, [pc, #20]	; (80075c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 f849 	bl	8007648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 80075b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 80075ba:	4618      	mov	r0, r3
 80075bc:	3720      	adds	r7, #32
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	0800fdc0 	.word	0x0800fdc0

080075c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fb fbd6 	bl	8002d88 <_ZN13STM32Hardware4timeEv>
 80075dc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4915      	ldr	r1, [pc, #84]	; (800763c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80075e6:	fba1 1303 	umull	r1, r3, r1, r3
 80075ea:	099b      	lsrs	r3, r3, #6
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	1e5a      	subs	r2, r3, #1
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4b0f      	ldr	r3, [pc, #60]	; (800763c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80075fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007602:	099b      	lsrs	r3, r3, #6
 8007604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007608:	fb00 f303 	mul.w	r3, r0, r3
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	4a0c      	ldr	r2, [pc, #48]	; (8007640 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8007610:	fb02 f303 	mul.w	r3, r2, r3
 8007614:	1aca      	subs	r2, r1, r3
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8007618:	4413      	add	r3, r2
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    normalizeSecNSec(sec_offset, nsec_offset);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 62c3 	add.w	r2, r3, #1560	; 0x618
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 800762c:	4619      	mov	r1, r3
 800762e:	4610      	mov	r0, r2
 8007630:	f7f9 fcbe 	bl	8000fb0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	10624dd3 	.word	0x10624dd3
 8007640:	000f4240 	.word	0x000f4240
 8007644:	3b9aca00 	.word	0x3b9aca00

08007648 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	2103      	movs	r1, #3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f804 	bl	8007664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	460b      	mov	r3, r1
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8007672:	f107 0314 	add.w	r3, r7, #20
 8007676:	4618      	mov	r0, r3
 8007678:	f7fa feb6 	bl	80023e8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800767c:	7afb      	ldrb	r3, [r7, #11]
 800767e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f107 0214 	add.w	r2, r7, #20
 800768e:	2107      	movs	r1, #7
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	4798      	blx	r3
  }
 8007694:	bf00      	nop
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <_Z41__static_initialization_and_destruction_0ii>:
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d137      	bne.n	800771c <_Z41__static_initialization_and_destruction_0ii+0x80>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d132      	bne.n	800771c <_Z41__static_initialization_and_destruction_0ii+0x80>
ros::NodeHandle nh;
 80076b6:	481b      	ldr	r0, [pc, #108]	; (8007724 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80076b8:	f7fe f9f4 	bl	8005aa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu imu1;
 80076bc:	481a      	ldr	r0, [pc, #104]	; (8007728 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80076be:	f7fc ffa9 	bl	8004614 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu1("imu1", &imu1);
 80076c2:	2300      	movs	r3, #0
 80076c4:	4a18      	ldr	r2, [pc, #96]	; (8007728 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80076c6:	4919      	ldr	r1, [pc, #100]	; (800772c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80076c8:	4819      	ldr	r0, [pc, #100]	; (8007730 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80076ca:	f7fb fa09 	bl	8002ae0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
sensor_msgs::Imu imu2;
 80076ce:	4819      	ldr	r0, [pc, #100]	; (8007734 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80076d0:	f7fc ffa0 	bl	8004614 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher pub_imu2("imu2", &imu2);
 80076d4:	2300      	movs	r3, #0
 80076d6:	4a17      	ldr	r2, [pc, #92]	; (8007734 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80076d8:	4917      	ldr	r1, [pc, #92]	; (8007738 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80076da:	4818      	ldr	r0, [pc, #96]	; (800773c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80076dc:	f7fb fa00 	bl	8002ae0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Bool IR_chin;
 80076e0:	4817      	ldr	r0, [pc, #92]	; (8007740 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80076e2:	f7fe f859 	bl	8005798 <_ZN8std_msgs4BoolC1Ev>
ros::Publisher pub_IR_chin("IR_chin", &IR_chin);
 80076e6:	2300      	movs	r3, #0
 80076e8:	4a15      	ldr	r2, [pc, #84]	; (8007740 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80076ea:	4916      	ldr	r1, [pc, #88]	; (8007744 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80076ec:	4816      	ldr	r0, [pc, #88]	; (8007748 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80076ee:	f7fb f9f7 	bl	8002ae0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Float32 IR_face;
 80076f2:	4816      	ldr	r0, [pc, #88]	; (800774c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80076f4:	f7fe f8ba 	bl	800586c <_ZN8std_msgs7Float32C1Ev>
ros::Publisher pub_IR_face("IR_face", &IR_face);
 80076f8:	2300      	movs	r3, #0
 80076fa:	4a14      	ldr	r2, [pc, #80]	; (800774c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80076fc:	4914      	ldr	r1, [pc, #80]	; (8007750 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80076fe:	4815      	ldr	r0, [pc, #84]	; (8007754 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007700:	f7fb f9ee 	bl	8002ae0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<momiu_p::momiu_posMotor> momiu_posMotor_sub_n("momiu_posMotor_t", &momiu_posMotor_cb);
 8007704:	2301      	movs	r3, #1
 8007706:	4a14      	ldr	r2, [pc, #80]	; (8007758 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007708:	4914      	ldr	r1, [pc, #80]	; (800775c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800770a:	4815      	ldr	r0, [pc, #84]	; (8007760 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800770c:	f7ff fadc 	bl	8006cc8 <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<momiu_p::pose_message> pose_message_sub_n("pose", &pose_message_cb);
 8007710:	2301      	movs	r3, #1
 8007712:	4a14      	ldr	r2, [pc, #80]	; (8007764 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007714:	4914      	ldr	r1, [pc, #80]	; (8007768 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8007716:	4815      	ldr	r0, [pc, #84]	; (800776c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8007718:	f7ff fafa 	bl	8006d10 <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvEC1EPKcPFvRKS2_Ei>
}
 800771c:	bf00      	nop
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20001178 	.word	0x20001178
 8007728:	20002800 	.word	0x20002800
 800772c:	0800fdfc 	.word	0x0800fdfc
 8007730:	20002958 	.word	0x20002958
 8007734:	20002970 	.word	0x20002970
 8007738:	0800fe04 	.word	0x0800fe04
 800773c:	20002ac8 	.word	0x20002ac8
 8007740:	20002adc 	.word	0x20002adc
 8007744:	0800fe0c 	.word	0x0800fe0c
 8007748:	20002ae4 	.word	0x20002ae4
 800774c:	20002af8 	.word	0x20002af8
 8007750:	0800fe14 	.word	0x0800fe14
 8007754:	20002b00 	.word	0x20002b00
 8007758:	08006569 	.word	0x08006569
 800775c:	0800fe1c 	.word	0x0800fe1c
 8007760:	20002b14 	.word	0x20002b14
 8007764:	08006729 	.word	0x08006729
 8007768:	0800fe30 	.word	0x0800fe30
 800776c:	20002b3c 	.word	0x20002b3c

08007770 <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	330c      	adds	r3, #12
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd ff69 	bl	8005658 <_ZN7momiu_p12pose_message11deserializeEPh>
    this->cb_(msg);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	69db      	ldr	r3, [r3, #28]
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	320c      	adds	r2, #12
 800778e:	4610      	mov	r0, r2
 8007790:	4798      	blx	r3
  }
 8007792:	bf00      	nop
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
  }
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b082      	sub	sp, #8
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	330c      	adds	r3, #12
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fd ffce 	bl	8005760 <_ZN7momiu_p12pose_message7getTypeEv>
 80077c4:	4603      	mov	r3, r0
  }
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <_ZN3ros10SubscriberIN7momiu_p12pose_messageEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	330c      	adds	r3, #12
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fd ffce 	bl	800577c <_ZN7momiu_p12pose_message6getMD5Ev>
 80077e0:	4603      	mov	r3, r0
  }
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	330c      	adds	r3, #12
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fd fd92 	bl	8005324 <_ZN7momiu_p14momiu_posMotor11deserializeEPh>
    this->cb_(msg);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	320c      	adds	r2, #12
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
  }
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8007820:	4618      	mov	r0, r3
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	330c      	adds	r3, #12
 8007838:	4618      	mov	r0, r3
 800783a:	f7fd fe79 	bl	8005530 <_ZN7momiu_p14momiu_posMotor7getTypeEv>
 800783e:	4603      	mov	r3, r0
  }
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <_ZN3ros10SubscriberIN7momiu_p14momiu_posMotorEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	330c      	adds	r3, #12
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fe79 	bl	800554c <_ZN7momiu_p14momiu_posMotor6getMD5Ev>
 800785a:	4603      	mov	r3, r0
  }
 800785c:	4618      	mov	r0, r3
 800785e:	3708      	adds	r7, #8
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
    return configured_;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 3b00 	ldrb.w	r3, [r3, #2816]	; 0xb00
  };
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <_GLOBAL__sub_I__bno055_i2c_port>:
 800787e:	b580      	push	{r7, lr}
 8007880:	af00      	add	r7, sp, #0
 8007882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007886:	2001      	movs	r0, #1
 8007888:	f7ff ff08 	bl	800769c <_Z41__static_initialization_and_destruction_0ii>
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <drive_all_Dynamixel>:
		.default_m.position		= {175, 180, 180, 180, 180, 180,  40,  40}, .default_m.speed		= { 5,  5,  5,  5,  5,  5,  5,  5},
		.mainternance1.position = {175, 210, 180, 180, 180, 180,  40,  40}, .mainternance1.speed 	= { 0,  0,  0,  0,  0,  0,  0,  0},
		.mainternance2.position = {175, 220, 180, 180, 180, 180,  40,  40}, .mainternance2.speed	= { 0,  0,  0,  0,  0,  0,  0,  0},
};

void drive_all_Dynamixel(float pos_motor[8], float speed_motor[8]){
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	  Dynamixel_servo((0x01),(pos_motor[0]/MX28_DEG_PER_UNIT),(speed_motor[0]/MX28_RPM_PER_UNIT));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4618      	mov	r0, r3
 80078a0:	f7f8 fe6a 	bl	8000578 <__aeabi_f2d>
 80078a4:	a3aa      	add	r3, pc, #680	; (adr r3, 8007b50 <drive_all_Dynamixel+0x2c0>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 ffe7 	bl	800087c <__aeabi_ddiv>
 80078ae:	4602      	mov	r2, r0
 80078b0:	460b      	mov	r3, r1
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	f7f9 f98f 	bl	8000bd8 <__aeabi_d2uiz>
 80078ba:	4603      	mov	r3, r0
 80078bc:	b29c      	uxth	r4, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f8 fe58 	bl	8000578 <__aeabi_f2d>
 80078c8:	a3a3      	add	r3, pc, #652	; (adr r3, 8007b58 <drive_all_Dynamixel+0x2c8>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f8 ffd5 	bl	800087c <__aeabi_ddiv>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4610      	mov	r0, r2
 80078d8:	4619      	mov	r1, r3
 80078da:	f7f9 f97d 	bl	8000bd8 <__aeabi_d2uiz>
 80078de:	4603      	mov	r3, r0
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	4621      	mov	r1, r4
 80078e6:	2001      	movs	r0, #1
 80078e8:	f7f9 fb8e 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x02),(pos_motor[1]/MX28_DEG_PER_UNIT),(speed_motor[1]/MX28_RPM_PER_UNIT));
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7f8 fe40 	bl	8000578 <__aeabi_f2d>
 80078f8:	a395      	add	r3, pc, #596	; (adr r3, 8007b50 <drive_all_Dynamixel+0x2c0>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f7f8 ffbd 	bl	800087c <__aeabi_ddiv>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	f7f9 f965 	bl	8000bd8 <__aeabi_d2uiz>
 800790e:	4603      	mov	r3, r0
 8007910:	b29c      	uxth	r4, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	3304      	adds	r3, #4
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f7f8 fe2d 	bl	8000578 <__aeabi_f2d>
 800791e:	a38e      	add	r3, pc, #568	; (adr r3, 8007b58 <drive_all_Dynamixel+0x2c8>)
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f7f8 ffaa 	bl	800087c <__aeabi_ddiv>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4610      	mov	r0, r2
 800792e:	4619      	mov	r1, r3
 8007930:	f7f9 f952 	bl	8000bd8 <__aeabi_d2uiz>
 8007934:	4603      	mov	r3, r0
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	4621      	mov	r1, r4
 800793c:	2002      	movs	r0, #2
 800793e:	f7f9 fb63 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x03),(pos_motor[2]/MX28_DEG_PER_UNIT),(speed_motor[2]/MX28_RPM_PER_UNIT));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3308      	adds	r3, #8
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f7f8 fe15 	bl	8000578 <__aeabi_f2d>
 800794e:	a380      	add	r3, pc, #512	; (adr r3, 8007b50 <drive_all_Dynamixel+0x2c0>)
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f7f8 ff92 	bl	800087c <__aeabi_ddiv>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4610      	mov	r0, r2
 800795e:	4619      	mov	r1, r3
 8007960:	f7f9 f93a 	bl	8000bd8 <__aeabi_d2uiz>
 8007964:	4603      	mov	r3, r0
 8007966:	b29c      	uxth	r4, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4618      	mov	r0, r3
 8007970:	f7f8 fe02 	bl	8000578 <__aeabi_f2d>
 8007974:	a378      	add	r3, pc, #480	; (adr r3, 8007b58 <drive_all_Dynamixel+0x2c8>)
 8007976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797a:	f7f8 ff7f 	bl	800087c <__aeabi_ddiv>
 800797e:	4602      	mov	r2, r0
 8007980:	460b      	mov	r3, r1
 8007982:	4610      	mov	r0, r2
 8007984:	4619      	mov	r1, r3
 8007986:	f7f9 f927 	bl	8000bd8 <__aeabi_d2uiz>
 800798a:	4603      	mov	r3, r0
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	4621      	mov	r1, r4
 8007992:	2003      	movs	r0, #3
 8007994:	f7f9 fb38 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x04),(pos_motor[3]/MX28_DEG_PER_UNIT),(speed_motor[3]/MX28_RPM_PER_UNIT));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	330c      	adds	r3, #12
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7f8 fdea 	bl	8000578 <__aeabi_f2d>
 80079a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007b50 <drive_all_Dynamixel+0x2c0>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f8 ff67 	bl	800087c <__aeabi_ddiv>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4610      	mov	r0, r2
 80079b4:	4619      	mov	r1, r3
 80079b6:	f7f9 f90f 	bl	8000bd8 <__aeabi_d2uiz>
 80079ba:	4603      	mov	r3, r0
 80079bc:	b29c      	uxth	r4, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	330c      	adds	r3, #12
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7f8 fdd7 	bl	8000578 <__aeabi_f2d>
 80079ca:	a363      	add	r3, pc, #396	; (adr r3, 8007b58 <drive_all_Dynamixel+0x2c8>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 ff54 	bl	800087c <__aeabi_ddiv>
 80079d4:	4602      	mov	r2, r0
 80079d6:	460b      	mov	r3, r1
 80079d8:	4610      	mov	r0, r2
 80079da:	4619      	mov	r1, r3
 80079dc:	f7f9 f8fc 	bl	8000bd8 <__aeabi_d2uiz>
 80079e0:	4603      	mov	r3, r0
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	4621      	mov	r1, r4
 80079e8:	2004      	movs	r0, #4
 80079ea:	f7f9 fb0d 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x05),(pos_motor[4]/MX28_DEG_PER_UNIT),(speed_motor[4]/MX28_RPM_PER_UNIT));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	3310      	adds	r3, #16
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7f8 fdbf 	bl	8000578 <__aeabi_f2d>
 80079fa:	a355      	add	r3, pc, #340	; (adr r3, 8007b50 <drive_all_Dynamixel+0x2c0>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 ff3c 	bl	800087c <__aeabi_ddiv>
 8007a04:	4602      	mov	r2, r0
 8007a06:	460b      	mov	r3, r1
 8007a08:	4610      	mov	r0, r2
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	f7f9 f8e4 	bl	8000bd8 <__aeabi_d2uiz>
 8007a10:	4603      	mov	r3, r0
 8007a12:	b29c      	uxth	r4, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	3310      	adds	r3, #16
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7f8 fdac 	bl	8000578 <__aeabi_f2d>
 8007a20:	a34d      	add	r3, pc, #308	; (adr r3, 8007b58 <drive_all_Dynamixel+0x2c8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 ff29 	bl	800087c <__aeabi_ddiv>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4610      	mov	r0, r2
 8007a30:	4619      	mov	r1, r3
 8007a32:	f7f9 f8d1 	bl	8000bd8 <__aeabi_d2uiz>
 8007a36:	4603      	mov	r3, r0
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	2005      	movs	r0, #5
 8007a40:	f7f9 fae2 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x06),(pos_motor[5]/MX28_DEG_PER_UNIT),(speed_motor[5]/MX28_RPM_PER_UNIT));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3314      	adds	r3, #20
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7f8 fd94 	bl	8000578 <__aeabi_f2d>
 8007a50:	a33f      	add	r3, pc, #252	; (adr r3, 8007b50 <drive_all_Dynamixel+0x2c0>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 ff11 	bl	800087c <__aeabi_ddiv>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4610      	mov	r0, r2
 8007a60:	4619      	mov	r1, r3
 8007a62:	f7f9 f8b9 	bl	8000bd8 <__aeabi_d2uiz>
 8007a66:	4603      	mov	r3, r0
 8007a68:	b29c      	uxth	r4, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	3314      	adds	r3, #20
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7f8 fd81 	bl	8000578 <__aeabi_f2d>
 8007a76:	a338      	add	r3, pc, #224	; (adr r3, 8007b58 <drive_all_Dynamixel+0x2c8>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f8 fefe 	bl	800087c <__aeabi_ddiv>
 8007a80:	4602      	mov	r2, r0
 8007a82:	460b      	mov	r3, r1
 8007a84:	4610      	mov	r0, r2
 8007a86:	4619      	mov	r1, r3
 8007a88:	f7f9 f8a6 	bl	8000bd8 <__aeabi_d2uiz>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	461a      	mov	r2, r3
 8007a92:	4621      	mov	r1, r4
 8007a94:	2006      	movs	r0, #6
 8007a96:	f7f9 fab7 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x07),(pos_motor[6]/AX12_DEG_PER_UNIT),(speed_motor[6]/AX12_RPM_PER_UNIT));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3318      	adds	r3, #24
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7f8 fd69 	bl	8000578 <__aeabi_f2d>
 8007aa6:	a32e      	add	r3, pc, #184	; (adr r3, 8007b60 <drive_all_Dynamixel+0x2d0>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fee6 	bl	800087c <__aeabi_ddiv>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f7f9 f88e 	bl	8000bd8 <__aeabi_d2uiz>
 8007abc:	4603      	mov	r3, r0
 8007abe:	b29c      	uxth	r4, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	3318      	adds	r3, #24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7f8 fd56 	bl	8000578 <__aeabi_f2d>
 8007acc:	a326      	add	r3, pc, #152	; (adr r3, 8007b68 <drive_all_Dynamixel+0x2d8>)
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fed3 	bl	800087c <__aeabi_ddiv>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4610      	mov	r0, r2
 8007adc:	4619      	mov	r1, r3
 8007ade:	f7f9 f87b 	bl	8000bd8 <__aeabi_d2uiz>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4621      	mov	r1, r4
 8007aea:	2007      	movs	r0, #7
 8007aec:	f7f9 fa8c 	bl	8001008 <Dynamixel_servo>
	  Dynamixel_servo((0x08),(pos_motor[7]/AX12_DEG_PER_UNIT),(speed_motor[7]/AX12_RPM_PER_UNIT));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	331c      	adds	r3, #28
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fd3e 	bl	8000578 <__aeabi_f2d>
 8007afc:	a318      	add	r3, pc, #96	; (adr r3, 8007b60 <drive_all_Dynamixel+0x2d0>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 febb 	bl	800087c <__aeabi_ddiv>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f7f9 f863 	bl	8000bd8 <__aeabi_d2uiz>
 8007b12:	4603      	mov	r3, r0
 8007b14:	b29c      	uxth	r4, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	331c      	adds	r3, #28
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7f8 fd2b 	bl	8000578 <__aeabi_f2d>
 8007b22:	a311      	add	r3, pc, #68	; (adr r3, 8007b68 <drive_all_Dynamixel+0x2d8>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fea8 	bl	800087c <__aeabi_ddiv>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4610      	mov	r0, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7f9 f850 	bl	8000bd8 <__aeabi_d2uiz>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	4621      	mov	r1, r4
 8007b40:	2008      	movs	r0, #8
 8007b42:	f7f9 fa61 	bl	8001008 <Dynamixel_servo>
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd90      	pop	{r4, r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	020c49ba 	.word	0x020c49ba
 8007b54:	3fb6872b 	.word	0x3fb6872b
 8007b58:	9fbe76c9 	.word	0x9fbe76c9
 8007b5c:	3fbd2f1a 	.word	0x3fbd2f1a
 8007b60:	28f5c28f 	.word	0x28f5c28f
 8007b64:	3fd28f5c 	.word	0x3fd28f5c
 8007b68:	f9db22d1 	.word	0xf9db22d1
 8007b6c:	3fbc6a7e 	.word	0x3fbc6a7e

08007b70 <default_pose>:

void default_pose(){
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
	drive_all_Dynamixel(pose.default_m.position,pose.default_m.speed);
 8007b74:	4902      	ldr	r1, [pc, #8]	; (8007b80 <default_pose+0x10>)
 8007b76:	4803      	ldr	r0, [pc, #12]	; (8007b84 <default_pose+0x14>)
 8007b78:	f7ff fe8a 	bl	8007890 <drive_all_Dynamixel>
}
 8007b7c:	bf00      	nop
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000b6c 	.word	0x20000b6c
 8007b84:	20000b4c 	.word	0x20000b4c

08007b88 <trajectory_genaration>:
void mainternance2_pose(){
	drive_all_Dynamixel(pose.mainternance2.position, pose.mainternance2.speed);
}

void trajectory_genaration(via_point viapoint_initial, via_point viapoint_final, uint32_t duration, int priority, array_of_4_double *coeffcient)
{
 8007b88:	b084      	sub	sp, #16
 8007b8a:	b480      	push	{r7}
 8007b8c:	b08d      	sub	sp, #52	; 0x34
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	f107 0c38 	add.w	ip, r7, #56	; 0x38
 8007b94:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	coeffcient[0][0] = priority;
 8007b98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ba4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ba8:	edc3 7a00 	vstr	s15, [r3]
	coeffcient[0][1] = duration;
 8007bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bbc:	edc3 7a01 	vstr	s15, [r3, #4]

	for (int  i = 1; i <= 8; ++i)
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bc4:	e089      	b.n	8007cda <trajectory_genaration+0x152>
	{
		float c[5];
		float qi = viapoint_initial.position[i-1];
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007bd0:	4413      	add	r3, r2
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
		//double vi = viapoint_initial.speed[i-1];
		float vi = 0;
 8007bd6:	f04f 0300 	mov.w	r3, #0
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24

		float qf = viapoint_final.position[i-1];
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	3b01      	subs	r3, #1
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007be6:	4413      	add	r3, r2
 8007be8:	3340      	adds	r3, #64	; 0x40
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	623b      	str	r3, [r7, #32]
		//double vf = viapoint_final.speed[i-1];
		float vf = 0;
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
		uint32_t T = duration;
 8007bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bf8:	61bb      	str	r3, [r7, #24]

		c[0] = qi;
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	607b      	str	r3, [r7, #4]
		c[1] = vi;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	60bb      	str	r3, [r7, #8]

		c[2] = ((3*(qf-qi))/(T*T)) - ((vf+(2*vi))/T);
 8007c02:	ed97 7a08 	vldr	s14, [r7, #32]
 8007c06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c0e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8007c12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	fb03 f303 	mul.w	r3, r3, r3
 8007c1c:	ee07 3a90 	vmov	s15, r3
 8007c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c28:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007c2c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007c30:	edd7 7a07 	vldr	s15, [r7, #28]
 8007c34:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c42:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c4a:	edc7 7a03 	vstr	s15, [r7, #12]
		c[3] = ((vf+vi)/(T*T))     - ((2*(qf-qi))/(T*T*T));
 8007c4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8007c52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007c56:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	fb03 f303 	mul.w	r3, r3, r3
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6c:	edd7 6a08 	vldr	s13, [r7, #32]
 8007c70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c78:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	fb03 f303 	mul.w	r3, r3, r3
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c90:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c98:	edc7 7a04 	vstr	s15, [r7, #16]

		coeffcient[i][0] = c[0];
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	011b      	lsls	r3, r3, #4
 8007ca0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ca4:	4413      	add	r3, r2
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	601a      	str	r2, [r3, #0]
		coeffcient[i][1] = c[1];
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cb2:	4413      	add	r3, r2
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	605a      	str	r2, [r3, #4]
		coeffcient[i][2] = c[2];
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	011b      	lsls	r3, r3, #4
 8007cbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cc0:	4413      	add	r3, r2
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	609a      	str	r2, [r3, #8]
		coeffcient[i][3] = c[3];
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cce:	4413      	add	r3, r2
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	60da      	str	r2, [r3, #12]
	for (int  i = 1; i <= 8; ++i)
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	f77f af72 	ble.w	8007bc6 <trajectory_genaration+0x3e>
	}
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	3734      	adds	r7, #52	; 0x34
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	b004      	add	sp, #16
 8007cf0:	4770      	bx	lr

08007cf2 <cubic_spline_position>:

float cubic_spline_position(float coeffcient[4], uint32_t t){
 8007cf2:	b480      	push	{r7}
 8007cf4:	b083      	sub	sp, #12
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]

	return coeffcient[0] + (coeffcient[1]*t) + (coeffcient[2] * (t*t)) + (coeffcient[3]*(t*t*t));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	ed93 7a00 	vldr	s14, [r3]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	3304      	adds	r3, #4
 8007d06:	edd3 6a00 	vldr	s13, [r3]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	ee07 3a90 	vmov	s15, r3
 8007d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	edd3 6a00 	vldr	s13, [r3]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	fb03 f303 	mul.w	r3, r3, r3
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	edd3 6a00 	vldr	s13, [r3]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	fb03 f303 	mul.w	r3, r3, r3
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	fb02 f303 	mul.w	r3, r2, r3
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8007d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	0000      	movs	r0, r0
	...

08007d70 <cubic_spline_velocity>:

float cubic_spline_velocity(float coeffcient[4], uint32_t t){
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]

	return (coeffcient[1] + (2*coeffcient[2]*t) + (3*coeffcient[3]*(t*t)))* 95.49297;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	ed93 7a00 	vldr	s14, [r3]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3308      	adds	r3, #8
 8007d86:	edd3 7a00 	vldr	s15, [r3]
 8007d8a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	ee07 3a90 	vmov	s15, r3
 8007d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	330c      	adds	r3, #12
 8007da4:	edd3 7a00 	vldr	s15, [r3]
 8007da8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8007dac:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	fb03 f303 	mul.w	r3, r3, r3
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc6:	ee17 0a90 	vmov	r0, s15
 8007dca:	f7f8 fbd5 	bl	8000578 <__aeabi_f2d>
 8007dce:	a30a      	add	r3, pc, #40	; (adr r3, 8007df8 <cubic_spline_velocity+0x88>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 fc28 	bl	8000628 <__aeabi_dmul>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7f8 ff1a 	bl	8000c18 <__aeabi_d2f>
 8007de4:	4603      	mov	r3, r0
 8007de6:	ee07 3a90 	vmov	s15, r3
}
 8007dea:	eeb0 0a67 	vmov.f32	s0, s15
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	f3af 8000 	nop.w
 8007df8:	d20afa2f 	.word	0xd20afa2f
 8007dfc:	4057df8c 	.word	0x4057df8c

08007e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <HAL_MspInit+0x4c>)
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	4a0f      	ldr	r2, [pc, #60]	; (8007e4c <HAL_MspInit+0x4c>)
 8007e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e14:	6453      	str	r3, [r2, #68]	; 0x44
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <HAL_MspInit+0x4c>)
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e22:	2300      	movs	r3, #0
 8007e24:	603b      	str	r3, [r7, #0]
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <HAL_MspInit+0x4c>)
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	4a08      	ldr	r2, [pc, #32]	; (8007e4c <HAL_MspInit+0x4c>)
 8007e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e30:	6413      	str	r3, [r2, #64]	; 0x40
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <HAL_MspInit+0x4c>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007e3e:	2007      	movs	r0, #7
 8007e40:	f000 fcaa 	bl	8008798 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e44:	bf00      	nop
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40023800 	.word	0x40023800

08007e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e62:	e7fe      	b.n	8007e62 <HardFault_Handler+0x4>

08007e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e68:	e7fe      	b.n	8007e68 <MemManage_Handler+0x4>

08007e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e6e:	e7fe      	b.n	8007e6e <BusFault_Handler+0x4>

08007e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e74:	e7fe      	b.n	8007e74 <UsageFault_Handler+0x4>

08007e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e76:	b480      	push	{r7}
 8007e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e7a:	bf00      	nop
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e88:	bf00      	nop
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e92:	b480      	push	{r7}
 8007e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e96:	bf00      	nop
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ea4:	f000 fb64 	bl	8008570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ea8:	bf00      	nop
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8007eb0:	4802      	ldr	r0, [pc, #8]	; (8007ebc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007eb2:	f003 fbad 	bl	800b610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007eb6:	bf00      	nop
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20002c68 	.word	0x20002c68

08007ec0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007ec4:	4802      	ldr	r0, [pc, #8]	; (8007ed0 <USART1_IRQHandler+0x10>)
 8007ec6:	f003 fee3 	bl	800bc90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007eca:	bf00      	nop
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20002d70 	.word	0x20002d70

08007ed4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007ed8:	4802      	ldr	r0, [pc, #8]	; (8007ee4 <DMA2_Stream2_IRQHandler+0x10>)
 8007eda:	f000 fe37 	bl	8008b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007ede:	bf00      	nop
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20002d10 	.word	0x20002d10

08007ee8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007eec:	4802      	ldr	r0, [pc, #8]	; (8007ef8 <DMA2_Stream7_IRQHandler+0x10>)
 8007eee:	f000 fe2d 	bl	8008b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20002cb0 	.word	0x20002cb0

08007efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
	return 1;
 8007f00:	2301      	movs	r3, #1
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <_kill>:

int _kill(int pid, int sig)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007f16:	f004 fd61 	bl	800c9dc <__errno>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2216      	movs	r2, #22
 8007f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8007f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <_exit>:

void _exit (int status)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ffe7 	bl	8007f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8007f3e:	e7fe      	b.n	8007f3e <_exit+0x12>

08007f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]
 8007f50:	e00a      	b.n	8007f68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007f52:	f3af 8000 	nop.w
 8007f56:	4601      	mov	r1, r0
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	60ba      	str	r2, [r7, #8]
 8007f5e:	b2ca      	uxtb	r2, r1
 8007f60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	3301      	adds	r3, #1
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	dbf0      	blt.n	8007f52 <_read+0x12>
	}

return len;
 8007f70:	687b      	ldr	r3, [r7, #4]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
 8007f8a:	e009      	b.n	8007fa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	60ba      	str	r2, [r7, #8]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	dbf1      	blt.n	8007f8c <_write+0x12>
	}
	return len;
 8007fa8:	687b      	ldr	r3, [r7, #4]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <_close>:

int _close(int file)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b083      	sub	sp, #12
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
	return -1;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007fda:	605a      	str	r2, [r3, #4]
	return 0;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <_isatty>:

int _isatty(int file)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8007ff2:	2301      	movs	r3, #1
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
	return 0;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008024:	4b11      	ldr	r3, [pc, #68]	; (800806c <_sbrk+0x50>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <_sbrk+0x16>
		heap_end = &end;
 800802c:	4b0f      	ldr	r3, [pc, #60]	; (800806c <_sbrk+0x50>)
 800802e:	4a10      	ldr	r2, [pc, #64]	; (8008070 <_sbrk+0x54>)
 8008030:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008032:	4b0e      	ldr	r3, [pc, #56]	; (800806c <_sbrk+0x50>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <_sbrk+0x50>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4413      	add	r3, r2
 8008040:	466a      	mov	r2, sp
 8008042:	4293      	cmp	r3, r2
 8008044:	d907      	bls.n	8008056 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008046:	f004 fcc9 	bl	800c9dc <__errno>
 800804a:	4603      	mov	r3, r0
 800804c:	220c      	movs	r2, #12
 800804e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8008050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008054:	e006      	b.n	8008064 <_sbrk+0x48>
	}

	heap_end += incr;
 8008056:	4b05      	ldr	r3, [pc, #20]	; (800806c <_sbrk+0x50>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4413      	add	r3, r2
 800805e:	4a03      	ldr	r2, [pc, #12]	; (800806c <_sbrk+0x50>)
 8008060:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008062:	68fb      	ldr	r3, [r7, #12]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20002b60 	.word	0x20002b60
 8008070:	20002e50 	.word	0x20002e50

08008074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008078:	4b08      	ldr	r3, [pc, #32]	; (800809c <SystemInit+0x28>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807e:	4a07      	ldr	r2, [pc, #28]	; (800809c <SystemInit+0x28>)
 8008080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008088:	4b04      	ldr	r3, [pc, #16]	; (800809c <SystemInit+0x28>)
 800808a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800808e:	609a      	str	r2, [r3, #8]
#endif
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	e000ed00 	.word	0xe000ed00

080080a0 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80080a4:	4b0e      	ldr	r3, [pc, #56]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080a6:	4a0f      	ldr	r2, [pc, #60]	; (80080e4 <MX_TIM10_Init+0x44>)
 80080a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1000 - 1;
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80080b0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080b2:	4b0b      	ldr	r3, [pc, #44]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000 - 1;
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80080be:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080c0:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c6:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80080cc:	4804      	ldr	r0, [pc, #16]	; (80080e0 <MX_TIM10_Init+0x40>)
 80080ce:	f003 f9ed 	bl	800b4ac <HAL_TIM_Base_Init>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80080d8:	f7f9 feaa 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80080dc:	bf00      	nop
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	20002c68 	.word	0x20002c68
 80080e4:	40014400 	.word	0x40014400

080080e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a0e      	ldr	r2, [pc, #56]	; (8008130 <HAL_TIM_Base_MspInit+0x48>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d115      	bne.n	8008126 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <HAL_TIM_Base_MspInit+0x4c>)
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	4a0c      	ldr	r2, [pc, #48]	; (8008134 <HAL_TIM_Base_MspInit+0x4c>)
 8008104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008108:	6453      	str	r3, [r2, #68]	; 0x44
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <HAL_TIM_Base_MspInit+0x4c>)
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008116:	2200      	movs	r2, #0
 8008118:	2100      	movs	r1, #0
 800811a:	2019      	movs	r0, #25
 800811c:	f000 fb47 	bl	80087ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008120:	2019      	movs	r0, #25
 8008122:	f000 fb60 	bl	80087e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40014400 	.word	0x40014400
 8008134:	40023800 	.word	0x40023800

08008138 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <MX_USART1_UART_Init+0x48>)
 800813e:	4a11      	ldr	r2, [pc, #68]	; (8008184 <MX_USART1_UART_Init+0x4c>)
 8008140:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8008142:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <MX_USART1_UART_Init+0x48>)
 8008144:	4a10      	ldr	r2, [pc, #64]	; (8008188 <MX_USART1_UART_Init+0x50>)
 8008146:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008148:	4b0d      	ldr	r3, [pc, #52]	; (8008180 <MX_USART1_UART_Init+0x48>)
 800814a:	2200      	movs	r2, #0
 800814c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <MX_USART1_UART_Init+0x48>)
 8008150:	2200      	movs	r2, #0
 8008152:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <MX_USART1_UART_Init+0x48>)
 8008156:	2200      	movs	r2, #0
 8008158:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <MX_USART1_UART_Init+0x48>)
 800815c:	220c      	movs	r2, #12
 800815e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <MX_USART1_UART_Init+0x48>)
 8008162:	2200      	movs	r2, #0
 8008164:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008166:	4b06      	ldr	r3, [pc, #24]	; (8008180 <MX_USART1_UART_Init+0x48>)
 8008168:	2200      	movs	r2, #0
 800816a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800816c:	4804      	ldr	r0, [pc, #16]	; (8008180 <MX_USART1_UART_Init+0x48>)
 800816e:	f003 fc13 	bl	800b998 <HAL_UART_Init>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8008178:	f7f9 fe5a 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800817c:	bf00      	nop
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20002d70 	.word	0x20002d70
 8008184:	40011000 	.word	0x40011000
 8008188:	001e8480 	.word	0x001e8480

0800818c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008190:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 8008192:	4a12      	ldr	r2, [pc, #72]	; (80081dc <MX_USART2_UART_Init+0x50>)
 8008194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008196:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 8008198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800819c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800819e:	4b0e      	ldr	r3, [pc, #56]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80081a4:	4b0c      	ldr	r3, [pc, #48]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80081b0:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081b2:	220c      	movs	r2, #12
 80081b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081b6:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80081bc:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80081c2:	4805      	ldr	r0, [pc, #20]	; (80081d8 <MX_USART2_UART_Init+0x4c>)
 80081c4:	f003 fbe8 	bl	800b998 <HAL_UART_Init>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80081ce:	f7f9 fe2f 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80081d2:	bf00      	nop
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	20002df8 	.word	0x20002df8
 80081dc:	40004400 	.word	0x40004400

080081e0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <MX_USART6_UART_Init+0x48>)
 80081e6:	4a11      	ldr	r2, [pc, #68]	; (800822c <MX_USART6_UART_Init+0x4c>)
 80081e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 1000000;
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <MX_USART6_UART_Init+0x48>)
 80081ec:	4a10      	ldr	r2, [pc, #64]	; (8008230 <MX_USART6_UART_Init+0x50>)
 80081ee:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <MX_USART6_UART_Init+0x48>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <MX_USART6_UART_Init+0x48>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <MX_USART6_UART_Init+0x48>)
 80081fe:	2200      	movs	r2, #0
 8008200:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <MX_USART6_UART_Init+0x48>)
 8008204:	220c      	movs	r2, #12
 8008206:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <MX_USART6_UART_Init+0x48>)
 800820a:	2200      	movs	r2, #0
 800820c:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <MX_USART6_UART_Init+0x48>)
 8008210:	2200      	movs	r2, #0
 8008212:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008214:	4804      	ldr	r0, [pc, #16]	; (8008228 <MX_USART6_UART_Init+0x48>)
 8008216:	f003 fbbf 	bl	800b998 <HAL_UART_Init>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <MX_USART6_UART_Init+0x44>
  {
    Error_Handler();
 8008220:	f7f9 fe06 	bl	8001e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008224:	bf00      	nop
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20002db4 	.word	0x20002db4
 800822c:	40011400 	.word	0x40011400
 8008230:	000f4240 	.word	0x000f4240

08008234 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800823c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	605a      	str	r2, [r3, #4]
 8008246:	609a      	str	r2, [r3, #8]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a7f      	ldr	r2, [pc, #508]	; (8008450 <HAL_UART_MspInit+0x21c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	f040 8095 	bne.w	8008382 <HAL_UART_MspInit+0x14e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008258:	2300      	movs	r3, #0
 800825a:	623b      	str	r3, [r7, #32]
 800825c:	4b7d      	ldr	r3, [pc, #500]	; (8008454 <HAL_UART_MspInit+0x220>)
 800825e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008260:	4a7c      	ldr	r2, [pc, #496]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008262:	f043 0310 	orr.w	r3, r3, #16
 8008266:	6453      	str	r3, [r2, #68]	; 0x44
 8008268:	4b7a      	ldr	r3, [pc, #488]	; (8008454 <HAL_UART_MspInit+0x220>)
 800826a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
 8008278:	4b76      	ldr	r3, [pc, #472]	; (8008454 <HAL_UART_MspInit+0x220>)
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	4a75      	ldr	r2, [pc, #468]	; (8008454 <HAL_UART_MspInit+0x220>)
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	6313      	str	r3, [r2, #48]	; 0x30
 8008284:	4b73      	ldr	r3, [pc, #460]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	61fb      	str	r3, [r7, #28]
 800828e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008290:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008296:	2302      	movs	r3, #2
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829a:	2300      	movs	r3, #0
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800829e:	2303      	movs	r3, #3
 80082a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80082a2:	2307      	movs	r3, #7
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082aa:	4619      	mov	r1, r3
 80082ac:	486a      	ldr	r0, [pc, #424]	; (8008458 <HAL_UART_MspInit+0x224>)
 80082ae:	f000 feb7 	bl	8009020 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80082b2:	4b6a      	ldr	r3, [pc, #424]	; (800845c <HAL_UART_MspInit+0x228>)
 80082b4:	4a6a      	ldr	r2, [pc, #424]	; (8008460 <HAL_UART_MspInit+0x22c>)
 80082b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80082b8:	4b68      	ldr	r3, [pc, #416]	; (800845c <HAL_UART_MspInit+0x228>)
 80082ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082c0:	4b66      	ldr	r3, [pc, #408]	; (800845c <HAL_UART_MspInit+0x228>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082c6:	4b65      	ldr	r3, [pc, #404]	; (800845c <HAL_UART_MspInit+0x228>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80082cc:	4b63      	ldr	r3, [pc, #396]	; (800845c <HAL_UART_MspInit+0x228>)
 80082ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082d4:	4b61      	ldr	r3, [pc, #388]	; (800845c <HAL_UART_MspInit+0x228>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082da:	4b60      	ldr	r3, [pc, #384]	; (800845c <HAL_UART_MspInit+0x228>)
 80082dc:	2200      	movs	r2, #0
 80082de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80082e0:	4b5e      	ldr	r3, [pc, #376]	; (800845c <HAL_UART_MspInit+0x228>)
 80082e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082e6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80082e8:	4b5c      	ldr	r3, [pc, #368]	; (800845c <HAL_UART_MspInit+0x228>)
 80082ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80082ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80082f0:	4b5a      	ldr	r3, [pc, #360]	; (800845c <HAL_UART_MspInit+0x228>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80082f6:	4859      	ldr	r0, [pc, #356]	; (800845c <HAL_UART_MspInit+0x228>)
 80082f8:	f000 fa90 	bl	800881c <HAL_DMA_Init>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8008302:	f7f9 fd95 	bl	8001e30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a54      	ldr	r2, [pc, #336]	; (800845c <HAL_UART_MspInit+0x228>)
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
 800830c:	4a53      	ldr	r2, [pc, #332]	; (800845c <HAL_UART_MspInit+0x228>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008312:	4b54      	ldr	r3, [pc, #336]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008314:	4a54      	ldr	r2, [pc, #336]	; (8008468 <HAL_UART_MspInit+0x234>)
 8008316:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008318:	4b52      	ldr	r3, [pc, #328]	; (8008464 <HAL_UART_MspInit+0x230>)
 800831a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800831e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008320:	4b50      	ldr	r3, [pc, #320]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008322:	2240      	movs	r2, #64	; 0x40
 8008324:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008326:	4b4f      	ldr	r3, [pc, #316]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008328:	2200      	movs	r2, #0
 800832a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800832c:	4b4d      	ldr	r3, [pc, #308]	; (8008464 <HAL_UART_MspInit+0x230>)
 800832e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008332:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008334:	4b4b      	ldr	r3, [pc, #300]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008336:	2200      	movs	r2, #0
 8008338:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800833a:	4b4a      	ldr	r3, [pc, #296]	; (8008464 <HAL_UART_MspInit+0x230>)
 800833c:	2200      	movs	r2, #0
 800833e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008340:	4b48      	ldr	r3, [pc, #288]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008342:	2200      	movs	r2, #0
 8008344:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008346:	4b47      	ldr	r3, [pc, #284]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008348:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800834c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800834e:	4b45      	ldr	r3, [pc, #276]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008350:	2200      	movs	r2, #0
 8008352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008354:	4843      	ldr	r0, [pc, #268]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008356:	f000 fa61 	bl	800881c <HAL_DMA_Init>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d001      	beq.n	8008364 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8008360:	f7f9 fd66 	bl	8001e30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a3f      	ldr	r2, [pc, #252]	; (8008464 <HAL_UART_MspInit+0x230>)
 8008368:	635a      	str	r2, [r3, #52]	; 0x34
 800836a:	4a3e      	ldr	r2, [pc, #248]	; (8008464 <HAL_UART_MspInit+0x230>)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008370:	2200      	movs	r2, #0
 8008372:	2100      	movs	r1, #0
 8008374:	2025      	movs	r0, #37	; 0x25
 8008376:	f000 fa1a 	bl	80087ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800837a:	2025      	movs	r0, #37	; 0x25
 800837c:	f000 fa33 	bl	80087e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8008380:	e062      	b.n	8008448 <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART2)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a39      	ldr	r2, [pc, #228]	; (800846c <HAL_UART_MspInit+0x238>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d12c      	bne.n	80083e6 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800838c:	2300      	movs	r3, #0
 800838e:	61bb      	str	r3, [r7, #24]
 8008390:	4b30      	ldr	r3, [pc, #192]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	4a2f      	ldr	r2, [pc, #188]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800839a:	6413      	str	r3, [r2, #64]	; 0x40
 800839c:	4b2d      	ldr	r3, [pc, #180]	; (8008454 <HAL_UART_MspInit+0x220>)
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	4b29      	ldr	r3, [pc, #164]	; (8008454 <HAL_UART_MspInit+0x220>)
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	4a28      	ldr	r2, [pc, #160]	; (8008454 <HAL_UART_MspInit+0x220>)
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	6313      	str	r3, [r2, #48]	; 0x30
 80083b8:	4b26      	ldr	r3, [pc, #152]	; (8008454 <HAL_UART_MspInit+0x220>)
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80083c4:	230c      	movs	r3, #12
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c8:	2302      	movs	r3, #2
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083d0:	2303      	movs	r3, #3
 80083d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80083d4:	2307      	movs	r3, #7
 80083d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083dc:	4619      	mov	r1, r3
 80083de:	481e      	ldr	r0, [pc, #120]	; (8008458 <HAL_UART_MspInit+0x224>)
 80083e0:	f000 fe1e 	bl	8009020 <HAL_GPIO_Init>
}
 80083e4:	e030      	b.n	8008448 <HAL_UART_MspInit+0x214>
  else if(uartHandle->Instance==USART6)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a21      	ldr	r2, [pc, #132]	; (8008470 <HAL_UART_MspInit+0x23c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d12b      	bne.n	8008448 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART6_CLK_ENABLE();
 80083f0:	2300      	movs	r3, #0
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	4b17      	ldr	r3, [pc, #92]	; (8008454 <HAL_UART_MspInit+0x220>)
 80083f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083f8:	4a16      	ldr	r2, [pc, #88]	; (8008454 <HAL_UART_MspInit+0x220>)
 80083fa:	f043 0320 	orr.w	r3, r3, #32
 80083fe:	6453      	str	r3, [r2, #68]	; 0x44
 8008400:	4b14      	ldr	r3, [pc, #80]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	613b      	str	r3, [r7, #16]
 800840a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	4b10      	ldr	r3, [pc, #64]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	4a0f      	ldr	r2, [pc, #60]	; (8008454 <HAL_UART_MspInit+0x220>)
 8008416:	f043 0304 	orr.w	r3, r3, #4
 800841a:	6313      	str	r3, [r2, #48]	; 0x30
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <HAL_UART_MspInit+0x220>)
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008428:	23c0      	movs	r3, #192	; 0xc0
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800842c:	2302      	movs	r3, #2
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008430:	2300      	movs	r3, #0
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008434:	2303      	movs	r3, #3
 8008436:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008438:	2308      	movs	r3, #8
 800843a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800843c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008440:	4619      	mov	r1, r3
 8008442:	480c      	ldr	r0, [pc, #48]	; (8008474 <HAL_UART_MspInit+0x240>)
 8008444:	f000 fdec 	bl	8009020 <HAL_GPIO_Init>
}
 8008448:	bf00      	nop
 800844a:	3738      	adds	r7, #56	; 0x38
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	40011000 	.word	0x40011000
 8008454:	40023800 	.word	0x40023800
 8008458:	40020000 	.word	0x40020000
 800845c:	20002d10 	.word	0x20002d10
 8008460:	40026440 	.word	0x40026440
 8008464:	20002cb0 	.word	0x20002cb0
 8008468:	400264b8 	.word	0x400264b8
 800846c:	40004400 	.word	0x40004400
 8008470:	40011400 	.word	0x40011400
 8008474:	40020800 	.word	0x40020800

08008478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800847c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800847e:	e003      	b.n	8008488 <LoopCopyDataInit>

08008480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008480:	4b0c      	ldr	r3, [pc, #48]	; (80084b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008486:	3104      	adds	r1, #4

08008488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008488:	480b      	ldr	r0, [pc, #44]	; (80084b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800848a:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800848c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800848e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008490:	d3f6      	bcc.n	8008480 <CopyDataInit>
  ldr  r2, =_sbss
 8008492:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008494:	e002      	b.n	800849c <LoopFillZerobss>

08008496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008498:	f842 3b04 	str.w	r3, [r2], #4

0800849c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800849c:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800849e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80084a0:	d3f9      	bcc.n	8008496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80084a2:	f7ff fde7 	bl	8008074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084a6:	f004 fa9f 	bl	800c9e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80084aa:	f7f9 fc37 	bl	8001d1c <main>
  bx  lr    
 80084ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80084b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80084b4:	08010410 	.word	0x08010410
  ldr  r0, =_sdata
 80084b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80084bc:	200010ac 	.word	0x200010ac
  ldr  r2, =_sbss
 80084c0:	200010b0 	.word	0x200010b0
  ldr  r3, = _ebss
 80084c4:	20002e50 	.word	0x20002e50

080084c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80084c8:	e7fe      	b.n	80084c8 <ADC_IRQHandler>
	...

080084cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80084d0:	4b0e      	ldr	r3, [pc, #56]	; (800850c <HAL_Init+0x40>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a0d      	ldr	r2, [pc, #52]	; (800850c <HAL_Init+0x40>)
 80084d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80084dc:	4b0b      	ldr	r3, [pc, #44]	; (800850c <HAL_Init+0x40>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a0a      	ldr	r2, [pc, #40]	; (800850c <HAL_Init+0x40>)
 80084e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <HAL_Init+0x40>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a07      	ldr	r2, [pc, #28]	; (800850c <HAL_Init+0x40>)
 80084ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084f4:	2003      	movs	r0, #3
 80084f6:	f000 f94f 	bl	8008798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084fa:	2000      	movs	r0, #0
 80084fc:	f000 f808 	bl	8008510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008500:	f7ff fc7e 	bl	8007e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	40023c00 	.word	0x40023c00

08008510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008518:	4b12      	ldr	r3, [pc, #72]	; (8008564 <HAL_InitTick+0x54>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	4b12      	ldr	r3, [pc, #72]	; (8008568 <HAL_InitTick+0x58>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	4619      	mov	r1, r3
 8008522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008526:	fbb3 f3f1 	udiv	r3, r3, r1
 800852a:	fbb2 f3f3 	udiv	r3, r2, r3
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f967 	bl	8008802 <HAL_SYSTICK_Config>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e00e      	b.n	800855c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b0f      	cmp	r3, #15
 8008542:	d80a      	bhi.n	800855a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008544:	2200      	movs	r2, #0
 8008546:	6879      	ldr	r1, [r7, #4]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800854c:	f000 f92f 	bl	80087ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008550:	4a06      	ldr	r2, [pc, #24]	; (800856c <HAL_InitTick+0x5c>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	e000      	b.n	800855c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
}
 800855c:	4618      	mov	r0, r3
 800855e:	3708      	adds	r7, #8
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000ecc 	.word	0x20000ecc
 8008568:	20000ed4 	.word	0x20000ed4
 800856c:	20000ed0 	.word	0x20000ed0

08008570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008574:	4b06      	ldr	r3, [pc, #24]	; (8008590 <HAL_IncTick+0x20>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	4b06      	ldr	r3, [pc, #24]	; (8008594 <HAL_IncTick+0x24>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4413      	add	r3, r2
 8008580:	4a04      	ldr	r2, [pc, #16]	; (8008594 <HAL_IncTick+0x24>)
 8008582:	6013      	str	r3, [r2, #0]
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000ed4 	.word	0x20000ed4
 8008594:	20002e3c 	.word	0x20002e3c

08008598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008598:	b480      	push	{r7}
 800859a:	af00      	add	r7, sp, #0
  return uwTick;
 800859c:	4b03      	ldr	r3, [pc, #12]	; (80085ac <HAL_GetTick+0x14>)
 800859e:	681b      	ldr	r3, [r3, #0]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	20002e3c 	.word	0x20002e3c

080085b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085b8:	f7ff ffee 	bl	8008598 <HAL_GetTick>
 80085bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c8:	d005      	beq.n	80085d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085ca:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <HAL_Delay+0x44>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80085d6:	bf00      	nop
 80085d8:	f7ff ffde 	bl	8008598 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d8f7      	bhi.n	80085d8 <HAL_Delay+0x28>
  {
  }
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	20000ed4 	.word	0x20000ed4

080085f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <__NVIC_SetPriorityGrouping+0x44>)
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008614:	4013      	ands	r3, r2
 8008616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800862a:	4a04      	ldr	r2, [pc, #16]	; (800863c <__NVIC_SetPriorityGrouping+0x44>)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	60d3      	str	r3, [r2, #12]
}
 8008630:	bf00      	nop
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	e000ed00 	.word	0xe000ed00

08008640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008644:	4b04      	ldr	r3, [pc, #16]	; (8008658 <__NVIC_GetPriorityGrouping+0x18>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	0a1b      	lsrs	r3, r3, #8
 800864a:	f003 0307 	and.w	r3, r3, #7
}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	e000ed00 	.word	0xe000ed00

0800865c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866a:	2b00      	cmp	r3, #0
 800866c:	db0b      	blt.n	8008686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	f003 021f 	and.w	r2, r3, #31
 8008674:	4907      	ldr	r1, [pc, #28]	; (8008694 <__NVIC_EnableIRQ+0x38>)
 8008676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	2001      	movs	r0, #1
 800867e:	fa00 f202 	lsl.w	r2, r0, r2
 8008682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	e000e100 	.word	0xe000e100

08008698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	db0a      	blt.n	80086c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	490c      	ldr	r1, [pc, #48]	; (80086e4 <__NVIC_SetPriority+0x4c>)
 80086b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086b6:	0112      	lsls	r2, r2, #4
 80086b8:	b2d2      	uxtb	r2, r2
 80086ba:	440b      	add	r3, r1
 80086bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80086c0:	e00a      	b.n	80086d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	4908      	ldr	r1, [pc, #32]	; (80086e8 <__NVIC_SetPriority+0x50>)
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	f003 030f 	and.w	r3, r3, #15
 80086ce:	3b04      	subs	r3, #4
 80086d0:	0112      	lsls	r2, r2, #4
 80086d2:	b2d2      	uxtb	r2, r2
 80086d4:	440b      	add	r3, r1
 80086d6:	761a      	strb	r2, [r3, #24]
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	e000e100 	.word	0xe000e100
 80086e8:	e000ed00 	.word	0xe000ed00

080086ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b089      	sub	sp, #36	; 0x24
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 0307 	and.w	r3, r3, #7
 80086fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	f1c3 0307 	rsb	r3, r3, #7
 8008706:	2b04      	cmp	r3, #4
 8008708:	bf28      	it	cs
 800870a:	2304      	movcs	r3, #4
 800870c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	3304      	adds	r3, #4
 8008712:	2b06      	cmp	r3, #6
 8008714:	d902      	bls.n	800871c <NVIC_EncodePriority+0x30>
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	3b03      	subs	r3, #3
 800871a:	e000      	b.n	800871e <NVIC_EncodePriority+0x32>
 800871c:	2300      	movs	r3, #0
 800871e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	fa02 f303 	lsl.w	r3, r2, r3
 800872a:	43da      	mvns	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	401a      	ands	r2, r3
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	fa01 f303 	lsl.w	r3, r1, r3
 800873e:	43d9      	mvns	r1, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008744:	4313      	orrs	r3, r2
         );
}
 8008746:	4618      	mov	r0, r3
 8008748:	3724      	adds	r7, #36	; 0x24
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
	...

08008754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3b01      	subs	r3, #1
 8008760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008764:	d301      	bcc.n	800876a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008766:	2301      	movs	r3, #1
 8008768:	e00f      	b.n	800878a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800876a:	4a0a      	ldr	r2, [pc, #40]	; (8008794 <SysTick_Config+0x40>)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3b01      	subs	r3, #1
 8008770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008772:	210f      	movs	r1, #15
 8008774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008778:	f7ff ff8e 	bl	8008698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800877c:	4b05      	ldr	r3, [pc, #20]	; (8008794 <SysTick_Config+0x40>)
 800877e:	2200      	movs	r2, #0
 8008780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008782:	4b04      	ldr	r3, [pc, #16]	; (8008794 <SysTick_Config+0x40>)
 8008784:	2207      	movs	r2, #7
 8008786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	e000e010 	.word	0xe000e010

08008798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ff29 	bl	80085f8 <__NVIC_SetPriorityGrouping>
}
 80087a6:	bf00      	nop
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b086      	sub	sp, #24
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	4603      	mov	r3, r0
 80087b6:	60b9      	str	r1, [r7, #8]
 80087b8:	607a      	str	r2, [r7, #4]
 80087ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80087c0:	f7ff ff3e 	bl	8008640 <__NVIC_GetPriorityGrouping>
 80087c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7ff ff8e 	bl	80086ec <NVIC_EncodePriority>
 80087d0:	4602      	mov	r2, r0
 80087d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ff5d 	bl	8008698 <__NVIC_SetPriority>
}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	4603      	mov	r3, r0
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80087f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff ff31 	bl	800865c <__NVIC_EnableIRQ>
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ffa2 	bl	8008754 <SysTick_Config>
 8008810:	4603      	mov	r3, r0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008824:	2300      	movs	r3, #0
 8008826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008828:	f7ff feb6 	bl	8008598 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e099      	b.n	800896c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0201 	bic.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008858:	e00f      	b.n	800887a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800885a:	f7ff fe9d 	bl	8008598 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b05      	cmp	r3, #5
 8008866:	d908      	bls.n	800887a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2203      	movs	r2, #3
 8008872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e078      	b.n	800896c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e8      	bne.n	800885a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	4b38      	ldr	r3, [pc, #224]	; (8008974 <HAL_DMA_Init+0x158>)
 8008894:	4013      	ands	r3, r2
 8008896:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	2b04      	cmp	r3, #4
 80088d2:	d107      	bne.n	80088e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088dc:	4313      	orrs	r3, r2
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	697a      	ldr	r2, [r7, #20]
 80088ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f023 0307 	bic.w	r3, r3, #7
 80088fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b04      	cmp	r3, #4
 800890c:	d117      	bne.n	800893e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fb01 	bl	8008f28 <DMA_CheckFifoParam>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d008      	beq.n	800893e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2240      	movs	r2, #64	; 0x40
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800893a:	2301      	movs	r3, #1
 800893c:	e016      	b.n	800896c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	697a      	ldr	r2, [r7, #20]
 8008944:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fab8 	bl	8008ebc <DMA_CalcBaseAndBitshift>
 800894c:	4603      	mov	r3, r0
 800894e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008954:	223f      	movs	r2, #63	; 0x3f
 8008956:	409a      	lsls	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	f010803f 	.word	0xf010803f

08008978 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b086      	sub	sp, #24
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <HAL_DMA_Start_IT+0x26>
 800899a:	2302      	movs	r3, #2
 800899c:	e040      	b.n	8008a20 <HAL_DMA_Start_IT+0xa8>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d12f      	bne.n	8008a12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2202      	movs	r2, #2
 80089b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fa4a 	bl	8008e60 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089d0:	223f      	movs	r2, #63	; 0x3f
 80089d2:	409a      	lsls	r2, r3
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0216 	orr.w	r2, r2, #22
 80089e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0208 	orr.w	r2, r2, #8
 80089fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	e005      	b.n	8008a1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008a36:	f7ff fdaf 	bl	8008598 <HAL_GetTick>
 8008a3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b02      	cmp	r3, #2
 8008a46:	d008      	beq.n	8008a5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2280      	movs	r2, #128	; 0x80
 8008a4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e052      	b.n	8008b00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f022 0216 	bic.w	r2, r2, #22
 8008a68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	695a      	ldr	r2, [r3, #20]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d103      	bne.n	8008a8a <HAL_DMA_Abort+0x62>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0208 	bic.w	r2, r2, #8
 8008a98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008aaa:	e013      	b.n	8008ad4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008aac:	f7ff fd74 	bl	8008598 <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b05      	cmp	r3, #5
 8008ab8:	d90c      	bls.n	8008ad4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2203      	movs	r2, #3
 8008acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e015      	b.n	8008b00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e4      	bne.n	8008aac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ae6:	223f      	movs	r2, #63	; 0x3f
 8008ae8:	409a      	lsls	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d004      	beq.n	8008b26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2280      	movs	r2, #128	; 0x80
 8008b20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e00c      	b.n	8008b40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f022 0201 	bic.w	r2, r2, #1
 8008b3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b086      	sub	sp, #24
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b58:	4b92      	ldr	r3, [pc, #584]	; (8008da4 <HAL_DMA_IRQHandler+0x258>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a92      	ldr	r2, [pc, #584]	; (8008da8 <HAL_DMA_IRQHandler+0x25c>)
 8008b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b62:	0a9b      	lsrs	r3, r3, #10
 8008b64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b76:	2208      	movs	r2, #8
 8008b78:	409a      	lsls	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01a      	beq.n	8008bb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d013      	beq.n	8008bb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0204 	bic.w	r2, r2, #4
 8008b9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	409a      	lsls	r2, r3
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb0:	f043 0201 	orr.w	r2, r3, #1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	409a      	lsls	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d012      	beq.n	8008bee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00b      	beq.n	8008bee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bda:	2201      	movs	r2, #1
 8008bdc:	409a      	lsls	r2, r3
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008be6:	f043 0202 	orr.w	r2, r3, #2
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	409a      	lsls	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d012      	beq.n	8008c24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00b      	beq.n	8008c24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c10:	2204      	movs	r2, #4
 8008c12:	409a      	lsls	r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1c:	f043 0204 	orr.w	r2, r3, #4
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c28:	2210      	movs	r2, #16
 8008c2a:	409a      	lsls	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d043      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0308 	and.w	r3, r3, #8
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d03c      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c46:	2210      	movs	r2, #16
 8008c48:	409a      	lsls	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d018      	beq.n	8008c8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d108      	bne.n	8008c7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d024      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
 8008c7a:	e01f      	b.n	8008cbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01b      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
 8008c8c:	e016      	b.n	8008cbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d107      	bne.n	8008cac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0208 	bic.w	r2, r2, #8
 8008caa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	409a      	lsls	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 808e 	beq.w	8008dea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0310 	and.w	r3, r3, #16
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 8086 	beq.w	8008dea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	409a      	lsls	r2, r3
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d136      	bne.n	8008d64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 0216 	bic.w	r2, r2, #22
 8008d04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695a      	ldr	r2, [r3, #20]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d103      	bne.n	8008d26 <HAL_DMA_IRQHandler+0x1da>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f022 0208 	bic.w	r2, r2, #8
 8008d34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3a:	223f      	movs	r2, #63	; 0x3f
 8008d3c:	409a      	lsls	r2, r3
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d07d      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	4798      	blx	r3
        }
        return;
 8008d62:	e078      	b.n	8008e56 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01c      	beq.n	8008dac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d030      	beq.n	8008dea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
 8008d90:	e02b      	b.n	8008dea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d027      	beq.n	8008dea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
 8008da2:	e022      	b.n	8008dea <HAL_DMA_IRQHandler+0x29e>
 8008da4:	20000ecc 	.word	0x20000ecc
 8008da8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10f      	bne.n	8008dda <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0210 	bic.w	r2, r2, #16
 8008dc8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d032      	beq.n	8008e58 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d022      	beq.n	8008e44 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2205      	movs	r2, #5
 8008e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	60bb      	str	r3, [r7, #8]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d307      	bcc.n	8008e32 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1f2      	bne.n	8008e16 <HAL_DMA_IRQHandler+0x2ca>
 8008e30:	e000      	b.n	8008e34 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008e32:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	4798      	blx	r3
 8008e54:	e000      	b.n	8008e58 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008e56:	bf00      	nop
    }
  }
}
 8008e58:	3718      	adds	r7, #24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop

08008e60 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e7c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	2b40      	cmp	r3, #64	; 0x40
 8008e8c:	d108      	bne.n	8008ea0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008e9e:	e007      	b.n	8008eb0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	60da      	str	r2, [r3, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	3b10      	subs	r3, #16
 8008ecc:	4a14      	ldr	r2, [pc, #80]	; (8008f20 <DMA_CalcBaseAndBitshift+0x64>)
 8008ece:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed2:	091b      	lsrs	r3, r3, #4
 8008ed4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008ed6:	4a13      	ldr	r2, [pc, #76]	; (8008f24 <DMA_CalcBaseAndBitshift+0x68>)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4413      	add	r3, r2
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d909      	bls.n	8008efe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	1d1a      	adds	r2, r3, #4
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	659a      	str	r2, [r3, #88]	; 0x58
 8008efc:	e007      	b.n	8008f0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	aaaaaaab 	.word	0xaaaaaaab
 8008f24:	08010014 	.word	0x08010014

08008f28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	699b      	ldr	r3, [r3, #24]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d11f      	bne.n	8008f82 <DMA_CheckFifoParam+0x5a>
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d856      	bhi.n	8008ff6 <DMA_CheckFifoParam+0xce>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <DMA_CheckFifoParam+0x28>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008f73 	.word	0x08008f73
 8008f58:	08008f61 	.word	0x08008f61
 8008f5c:	08008ff7 	.word	0x08008ff7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d046      	beq.n	8008ffa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f70:	e043      	b.n	8008ffa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008f7a:	d140      	bne.n	8008ffe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008f80:	e03d      	b.n	8008ffe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f8a:	d121      	bne.n	8008fd0 <DMA_CheckFifoParam+0xa8>
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d837      	bhi.n	8009002 <DMA_CheckFifoParam+0xda>
 8008f92:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <DMA_CheckFifoParam+0x70>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fa9 	.word	0x08008fa9
 8008f9c:	08008faf 	.word	0x08008faf
 8008fa0:	08008fa9 	.word	0x08008fa9
 8008fa4:	08008fc1 	.word	0x08008fc1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	73fb      	strb	r3, [r7, #15]
      break;
 8008fac:	e030      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d025      	beq.n	8009006 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fbe:	e022      	b.n	8009006 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008fc8:	d11f      	bne.n	800900a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008fce:	e01c      	b.n	800900a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d903      	bls.n	8008fde <DMA_CheckFifoParam+0xb6>
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d003      	beq.n	8008fe4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008fdc:	e018      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe2:	e015      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00e      	beq.n	800900e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ff4:	e00b      	b.n	800900e <DMA_CheckFifoParam+0xe6>
      break;
 8008ff6:	bf00      	nop
 8008ff8:	e00a      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      break;
 8008ffa:	bf00      	nop
 8008ffc:	e008      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      break;
 8008ffe:	bf00      	nop
 8009000:	e006      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      break;
 8009002:	bf00      	nop
 8009004:	e004      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      break;
 8009006:	bf00      	nop
 8009008:	e002      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      break;   
 800900a:	bf00      	nop
 800900c:	e000      	b.n	8009010 <DMA_CheckFifoParam+0xe8>
      break;
 800900e:	bf00      	nop
    }
  } 
  
  return status; 
 8009010:	7bfb      	ldrb	r3, [r7, #15]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop

08009020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009020:	b480      	push	{r7}
 8009022:	b089      	sub	sp, #36	; 0x24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800902e:	2300      	movs	r3, #0
 8009030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009032:	2300      	movs	r3, #0
 8009034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	e159      	b.n	80092f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800903c:	2201      	movs	r2, #1
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	fa02 f303 	lsl.w	r3, r2, r3
 8009044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	4013      	ands	r3, r2
 800904e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	f040 8148 	bne.w	80092ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b01      	cmp	r3, #1
 8009064:	d005      	beq.n	8009072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800906e:	2b02      	cmp	r3, #2
 8009070:	d130      	bne.n	80090d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	2203      	movs	r2, #3
 800907e:	fa02 f303 	lsl.w	r3, r2, r3
 8009082:	43db      	mvns	r3, r3
 8009084:	69ba      	ldr	r2, [r7, #24]
 8009086:	4013      	ands	r3, r2
 8009088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4313      	orrs	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80090a8:	2201      	movs	r2, #1
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	fa02 f303 	lsl.w	r3, r2, r3
 80090b0:	43db      	mvns	r3, r3
 80090b2:	69ba      	ldr	r2, [r7, #24]
 80090b4:	4013      	ands	r3, r2
 80090b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	091b      	lsrs	r3, r3, #4
 80090be:	f003 0201 	and.w	r2, r3, #1
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	fa02 f303 	lsl.w	r3, r2, r3
 80090c8:	69ba      	ldr	r2, [r7, #24]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69ba      	ldr	r2, [r7, #24]
 80090d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f003 0303 	and.w	r3, r3, #3
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d017      	beq.n	8009110 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	2203      	movs	r2, #3
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	43db      	mvns	r3, r3
 80090f2:	69ba      	ldr	r2, [r7, #24]
 80090f4:	4013      	ands	r3, r2
 80090f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	fa02 f303 	lsl.w	r3, r2, r3
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4313      	orrs	r3, r2
 8009108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69ba      	ldr	r2, [r7, #24]
 800910e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d123      	bne.n	8009164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	08da      	lsrs	r2, r3, #3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	3208      	adds	r2, #8
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	220f      	movs	r2, #15
 8009134:	fa02 f303 	lsl.w	r3, r2, r3
 8009138:	43db      	mvns	r3, r3
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	4013      	ands	r3, r2
 800913e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f003 0307 	and.w	r3, r3, #7
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	4313      	orrs	r3, r2
 8009154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	08da      	lsrs	r2, r3, #3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	3208      	adds	r2, #8
 800915e:	69b9      	ldr	r1, [r7, #24]
 8009160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	2203      	movs	r2, #3
 8009170:	fa02 f303 	lsl.w	r3, r2, r3
 8009174:	43db      	mvns	r3, r3
 8009176:	69ba      	ldr	r2, [r7, #24]
 8009178:	4013      	ands	r3, r2
 800917a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f003 0203 	and.w	r2, r3, #3
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4313      	orrs	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80a2 	beq.w	80092ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	4b57      	ldr	r3, [pc, #348]	; (8009308 <HAL_GPIO_Init+0x2e8>)
 80091ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ae:	4a56      	ldr	r2, [pc, #344]	; (8009308 <HAL_GPIO_Init+0x2e8>)
 80091b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091b4:	6453      	str	r3, [r2, #68]	; 0x44
 80091b6:	4b54      	ldr	r3, [pc, #336]	; (8009308 <HAL_GPIO_Init+0x2e8>)
 80091b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091c2:	4a52      	ldr	r2, [pc, #328]	; (800930c <HAL_GPIO_Init+0x2ec>)
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	089b      	lsrs	r3, r3, #2
 80091c8:	3302      	adds	r3, #2
 80091ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	f003 0303 	and.w	r3, r3, #3
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	220f      	movs	r2, #15
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	43db      	mvns	r3, r3
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	4013      	ands	r3, r2
 80091e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a49      	ldr	r2, [pc, #292]	; (8009310 <HAL_GPIO_Init+0x2f0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d019      	beq.n	8009222 <HAL_GPIO_Init+0x202>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a48      	ldr	r2, [pc, #288]	; (8009314 <HAL_GPIO_Init+0x2f4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d013      	beq.n	800921e <HAL_GPIO_Init+0x1fe>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a47      	ldr	r2, [pc, #284]	; (8009318 <HAL_GPIO_Init+0x2f8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00d      	beq.n	800921a <HAL_GPIO_Init+0x1fa>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a46      	ldr	r2, [pc, #280]	; (800931c <HAL_GPIO_Init+0x2fc>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d007      	beq.n	8009216 <HAL_GPIO_Init+0x1f6>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a45      	ldr	r2, [pc, #276]	; (8009320 <HAL_GPIO_Init+0x300>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d101      	bne.n	8009212 <HAL_GPIO_Init+0x1f2>
 800920e:	2304      	movs	r3, #4
 8009210:	e008      	b.n	8009224 <HAL_GPIO_Init+0x204>
 8009212:	2307      	movs	r3, #7
 8009214:	e006      	b.n	8009224 <HAL_GPIO_Init+0x204>
 8009216:	2303      	movs	r3, #3
 8009218:	e004      	b.n	8009224 <HAL_GPIO_Init+0x204>
 800921a:	2302      	movs	r3, #2
 800921c:	e002      	b.n	8009224 <HAL_GPIO_Init+0x204>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <HAL_GPIO_Init+0x204>
 8009222:	2300      	movs	r3, #0
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	f002 0203 	and.w	r2, r2, #3
 800922a:	0092      	lsls	r2, r2, #2
 800922c:	4093      	lsls	r3, r2
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	4313      	orrs	r3, r2
 8009232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009234:	4935      	ldr	r1, [pc, #212]	; (800930c <HAL_GPIO_Init+0x2ec>)
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	089b      	lsrs	r3, r3, #2
 800923a:	3302      	adds	r3, #2
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009242:	4b38      	ldr	r3, [pc, #224]	; (8009324 <HAL_GPIO_Init+0x304>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	43db      	mvns	r3, r3
 800924c:	69ba      	ldr	r2, [r7, #24]
 800924e:	4013      	ands	r3, r2
 8009250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	4313      	orrs	r3, r2
 8009264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009266:	4a2f      	ldr	r2, [pc, #188]	; (8009324 <HAL_GPIO_Init+0x304>)
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800926c:	4b2d      	ldr	r3, [pc, #180]	; (8009324 <HAL_GPIO_Init+0x304>)
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	43db      	mvns	r3, r3
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	4013      	ands	r3, r2
 800927a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4313      	orrs	r3, r2
 800928e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009290:	4a24      	ldr	r2, [pc, #144]	; (8009324 <HAL_GPIO_Init+0x304>)
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009296:	4b23      	ldr	r3, [pc, #140]	; (8009324 <HAL_GPIO_Init+0x304>)
 8009298:	689b      	ldr	r3, [r3, #8]
 800929a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	43db      	mvns	r3, r3
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	4013      	ands	r3, r2
 80092a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80092ba:	4a1a      	ldr	r2, [pc, #104]	; (8009324 <HAL_GPIO_Init+0x304>)
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80092c0:	4b18      	ldr	r3, [pc, #96]	; (8009324 <HAL_GPIO_Init+0x304>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	43db      	mvns	r3, r3
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	4013      	ands	r3, r2
 80092ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80092e4:	4a0f      	ldr	r2, [pc, #60]	; (8009324 <HAL_GPIO_Init+0x304>)
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	3301      	adds	r3, #1
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	2b0f      	cmp	r3, #15
 80092f4:	f67f aea2 	bls.w	800903c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	3724      	adds	r7, #36	; 0x24
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40023800 	.word	0x40023800
 800930c:	40013800 	.word	0x40013800
 8009310:	40020000 	.word	0x40020000
 8009314:	40020400 	.word	0x40020400
 8009318:	40020800 	.word	0x40020800
 800931c:	40020c00 	.word	0x40020c00
 8009320:	40021000 	.word	0x40021000
 8009324:	40013c00 	.word	0x40013c00

08009328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	807b      	strh	r3, [r7, #2]
 8009334:	4613      	mov	r3, r2
 8009336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009338:	787b      	ldrb	r3, [r7, #1]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800933e:	887a      	ldrh	r2, [r7, #2]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009344:	e003      	b.n	800934e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009346:	887b      	ldrh	r3, [r7, #2]
 8009348:	041a      	lsls	r2, r3, #16
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	619a      	str	r2, [r3, #24]
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
	...

0800935c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d101      	bne.n	800936e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e12b      	b.n	80095c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d106      	bne.n	8009388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7f8 fbe4 	bl	8001b50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2224      	movs	r2, #36	; 0x24
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0201 	bic.w	r2, r2, #1
 800939e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80093c0:	f002 f84c 	bl	800b45c <HAL_RCC_GetPCLK1Freq>
 80093c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	4a81      	ldr	r2, [pc, #516]	; (80095d0 <HAL_I2C_Init+0x274>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d807      	bhi.n	80093e0 <HAL_I2C_Init+0x84>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4a80      	ldr	r2, [pc, #512]	; (80095d4 <HAL_I2C_Init+0x278>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	bf94      	ite	ls
 80093d8:	2301      	movls	r3, #1
 80093da:	2300      	movhi	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	e006      	b.n	80093ee <HAL_I2C_Init+0x92>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a7d      	ldr	r2, [pc, #500]	; (80095d8 <HAL_I2C_Init+0x27c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	bf94      	ite	ls
 80093e8:	2301      	movls	r3, #1
 80093ea:	2300      	movhi	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e0e7      	b.n	80095c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4a78      	ldr	r2, [pc, #480]	; (80095dc <HAL_I2C_Init+0x280>)
 80093fa:	fba2 2303 	umull	r2, r3, r2, r3
 80093fe:	0c9b      	lsrs	r3, r3, #18
 8009400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	430a      	orrs	r2, r1
 8009414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4a6a      	ldr	r2, [pc, #424]	; (80095d0 <HAL_I2C_Init+0x274>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d802      	bhi.n	8009430 <HAL_I2C_Init+0xd4>
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	3301      	adds	r3, #1
 800942e:	e009      	b.n	8009444 <HAL_I2C_Init+0xe8>
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009436:	fb02 f303 	mul.w	r3, r2, r3
 800943a:	4a69      	ldr	r2, [pc, #420]	; (80095e0 <HAL_I2C_Init+0x284>)
 800943c:	fba2 2303 	umull	r2, r3, r2, r3
 8009440:	099b      	lsrs	r3, r3, #6
 8009442:	3301      	adds	r3, #1
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6812      	ldr	r2, [r2, #0]
 8009448:	430b      	orrs	r3, r1
 800944a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009456:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	495c      	ldr	r1, [pc, #368]	; (80095d0 <HAL_I2C_Init+0x274>)
 8009460:	428b      	cmp	r3, r1
 8009462:	d819      	bhi.n	8009498 <HAL_I2C_Init+0x13c>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	1e59      	subs	r1, r3, #1
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009472:	1c59      	adds	r1, r3, #1
 8009474:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009478:	400b      	ands	r3, r1
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <HAL_I2C_Init+0x138>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	1e59      	subs	r1, r3, #1
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	fbb1 f3f3 	udiv	r3, r1, r3
 800948c:	3301      	adds	r3, #1
 800948e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009492:	e051      	b.n	8009538 <HAL_I2C_Init+0x1dc>
 8009494:	2304      	movs	r3, #4
 8009496:	e04f      	b.n	8009538 <HAL_I2C_Init+0x1dc>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d111      	bne.n	80094c4 <HAL_I2C_Init+0x168>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	1e58      	subs	r0, r3, #1
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6859      	ldr	r1, [r3, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	440b      	add	r3, r1
 80094ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80094b2:	3301      	adds	r3, #1
 80094b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bf0c      	ite	eq
 80094bc:	2301      	moveq	r3, #1
 80094be:	2300      	movne	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	e012      	b.n	80094ea <HAL_I2C_Init+0x18e>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	1e58      	subs	r0, r3, #1
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6859      	ldr	r1, [r3, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	0099      	lsls	r1, r3, #2
 80094d4:	440b      	add	r3, r1
 80094d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80094da:	3301      	adds	r3, #1
 80094dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bf0c      	ite	eq
 80094e4:	2301      	moveq	r3, #1
 80094e6:	2300      	movne	r3, #0
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <HAL_I2C_Init+0x196>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e022      	b.n	8009538 <HAL_I2C_Init+0x1dc>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10e      	bne.n	8009518 <HAL_I2C_Init+0x1bc>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	1e58      	subs	r0, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	440b      	add	r3, r1
 8009508:	fbb0 f3f3 	udiv	r3, r0, r3
 800950c:	3301      	adds	r3, #1
 800950e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009516:	e00f      	b.n	8009538 <HAL_I2C_Init+0x1dc>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	1e58      	subs	r0, r3, #1
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6859      	ldr	r1, [r3, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	0099      	lsls	r1, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	fbb0 f3f3 	udiv	r3, r0, r3
 800952e:	3301      	adds	r3, #1
 8009530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	6809      	ldr	r1, [r1, #0]
 800953c:	4313      	orrs	r3, r2
 800953e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69da      	ldr	r2, [r3, #28]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a1b      	ldr	r3, [r3, #32]
 8009552:	431a      	orrs	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	430a      	orrs	r2, r1
 800955a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6911      	ldr	r1, [r2, #16]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	68d2      	ldr	r2, [r2, #12]
 8009572:	4311      	orrs	r1, r2
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	6812      	ldr	r2, [r2, #0]
 8009578:	430b      	orrs	r3, r1
 800957a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695a      	ldr	r2, [r3, #20]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	430a      	orrs	r2, r1
 8009596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0201 	orr.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	000186a0 	.word	0x000186a0
 80095d4:	001e847f 	.word	0x001e847f
 80095d8:	003d08ff 	.word	0x003d08ff
 80095dc:	431bde83 	.word	0x431bde83
 80095e0:	10624dd3 	.word	0x10624dd3

080095e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af02      	add	r7, sp, #8
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	461a      	mov	r2, r3
 80095f0:	460b      	mov	r3, r1
 80095f2:	817b      	strh	r3, [r7, #10]
 80095f4:	4613      	mov	r3, r2
 80095f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095f8:	f7fe ffce 	bl	8008598 <HAL_GetTick>
 80095fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009604:	b2db      	uxtb	r3, r3
 8009606:	2b20      	cmp	r3, #32
 8009608:	f040 80e0 	bne.w	80097cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2319      	movs	r3, #25
 8009612:	2201      	movs	r2, #1
 8009614:	4970      	ldr	r1, [pc, #448]	; (80097d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f001 f8f6 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009622:	2302      	movs	r3, #2
 8009624:	e0d3      	b.n	80097ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_I2C_Master_Transmit+0x50>
 8009630:	2302      	movs	r3, #2
 8009632:	e0cc      	b.n	80097ce <HAL_I2C_Master_Transmit+0x1ea>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b01      	cmp	r3, #1
 8009648:	d007      	beq.n	800965a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0201 	orr.w	r2, r2, #1
 8009658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2221      	movs	r2, #33	; 0x21
 800966e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2210      	movs	r2, #16
 8009676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	893a      	ldrh	r2, [r7, #8]
 800968a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	4a50      	ldr	r2, [pc, #320]	; (80097dc <HAL_I2C_Master_Transmit+0x1f8>)
 800969a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800969c:	8979      	ldrh	r1, [r7, #10]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	6a3a      	ldr	r2, [r7, #32]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f000 fde2 	bl	800a26c <I2C_MasterRequestWrite>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e08d      	b.n	80097ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	613b      	str	r3, [r7, #16]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80096c8:	e066      	b.n	8009798 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	6a39      	ldr	r1, [r7, #32]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f001 f970 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00d      	beq.n	80096f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d107      	bne.n	80096f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e06b      	b.n	80097ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	1c5a      	adds	r2, r3, #1
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971e:	3b01      	subs	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	695b      	ldr	r3, [r3, #20]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b04      	cmp	r3, #4
 8009732:	d11b      	bne.n	800976c <HAL_I2C_Master_Transmit+0x188>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009738:	2b00      	cmp	r3, #0
 800973a:	d017      	beq.n	800976c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	781a      	ldrb	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009764:	3b01      	subs	r3, #1
 8009766:	b29a      	uxth	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	6a39      	ldr	r1, [r7, #32]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f001 f960 	bl	800aa36 <I2C_WaitOnBTFFlagUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d00d      	beq.n	8009798 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009780:	2b04      	cmp	r3, #4
 8009782:	d107      	bne.n	8009794 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009792:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e01a      	b.n	80097ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800979c:	2b00      	cmp	r3, #0
 800979e:	d194      	bne.n	80096ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2220      	movs	r2, #32
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	e000      	b.n	80097ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80097cc:	2302      	movs	r3, #2
  }
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	00100002 	.word	0x00100002
 80097dc:	ffff0000 	.word	0xffff0000

080097e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08c      	sub	sp, #48	; 0x30
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	461a      	mov	r2, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	817b      	strh	r3, [r7, #10]
 80097f0:	4613      	mov	r3, r2
 80097f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097f4:	f7fe fed0 	bl	8008598 <HAL_GetTick>
 80097f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b20      	cmp	r3, #32
 8009804:	f040 820b 	bne.w	8009c1e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	2319      	movs	r3, #25
 800980e:	2201      	movs	r2, #1
 8009810:	497c      	ldr	r1, [pc, #496]	; (8009a04 <HAL_I2C_Master_Receive+0x224>)
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fff8 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800981e:	2302      	movs	r3, #2
 8009820:	e1fe      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009828:	2b01      	cmp	r3, #1
 800982a:	d101      	bne.n	8009830 <HAL_I2C_Master_Receive+0x50>
 800982c:	2302      	movs	r3, #2
 800982e:	e1f7      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b01      	cmp	r3, #1
 8009844:	d007      	beq.n	8009856 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0201 	orr.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009864:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2222      	movs	r2, #34	; 0x22
 800986a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2210      	movs	r2, #16
 8009872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	893a      	ldrh	r2, [r7, #8]
 8009886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800988c:	b29a      	uxth	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	4a5c      	ldr	r2, [pc, #368]	; (8009a08 <HAL_I2C_Master_Receive+0x228>)
 8009896:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009898:	8979      	ldrh	r1, [r7, #10]
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f000 fd66 	bl	800a370 <I2C_MasterRequestRead>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e1b8      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d113      	bne.n	80098de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098b6:	2300      	movs	r3, #0
 80098b8:	623b      	str	r3, [r7, #32]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	623b      	str	r3, [r7, #32]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	623b      	str	r3, [r7, #32]
 80098ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e18c      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d11b      	bne.n	800991e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f6:	2300      	movs	r3, #0
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	61fb      	str	r3, [r7, #28]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	699b      	ldr	r3, [r3, #24]
 8009908:	61fb      	str	r3, [r7, #28]
 800990a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	e16c      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009922:	2b02      	cmp	r3, #2
 8009924:	d11b      	bne.n	800995e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009934:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009944:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009946:	2300      	movs	r3, #0
 8009948:	61bb      	str	r3, [r7, #24]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	61bb      	str	r3, [r7, #24]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	e14c      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800996c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800996e:	2300      	movs	r3, #0
 8009970:	617b      	str	r3, [r7, #20]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	617b      	str	r3, [r7, #20]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	617b      	str	r3, [r7, #20]
 8009982:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009984:	e138      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998a:	2b03      	cmp	r3, #3
 800998c:	f200 80f1 	bhi.w	8009b72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009994:	2b01      	cmp	r3, #1
 8009996:	d123      	bne.n	80099e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f001 f88b 	bl	800aab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e139      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691a      	ldr	r2, [r3, #16]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099de:	e10b      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d14e      	bne.n	8009a86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	2200      	movs	r2, #0
 80099f0:	4906      	ldr	r1, [pc, #24]	; (8009a0c <HAL_I2C_Master_Receive+0x22c>)
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f000 ff08 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e10e      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
 8009a02:	bf00      	nop
 8009a04:	00100002 	.word	0x00100002
 8009a08:	ffff0000 	.word	0xffff0000
 8009a0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2a:	b2d2      	uxtb	r2, r2
 8009a2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691a      	ldr	r2, [r3, #16]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	b29a      	uxth	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a84:	e0b8      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a88:	9300      	str	r3, [sp, #0]
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	4966      	ldr	r1, [pc, #408]	; (8009c28 <HAL_I2C_Master_Receive+0x448>)
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 feb9 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e0bf      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691a      	ldr	r2, [r3, #16]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009acc:	3b01      	subs	r3, #1
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	3b01      	subs	r3, #1
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	2200      	movs	r2, #0
 8009aea:	494f      	ldr	r1, [pc, #316]	; (8009c28 <HAL_I2C_Master_Receive+0x448>)
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 fe8b 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e091      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	691a      	ldr	r2, [r3, #16]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	b2d2      	uxtb	r2, r2
 8009b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	3b01      	subs	r3, #1
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691a      	ldr	r2, [r3, #16]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	b2d2      	uxtb	r2, r2
 8009b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b50:	1c5a      	adds	r2, r3, #1
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b70:	e042      	b.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 ff9e 	bl	800aab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e04c      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691a      	ldr	r2, [r3, #16]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b98:	1c5a      	adds	r2, r3, #1
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	f003 0304 	and.w	r3, r3, #4
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	d118      	bne.n	8009bf8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd0:	b2d2      	uxtb	r2, r2
 8009bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	1c5a      	adds	r2, r3, #1
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be2:	3b01      	subs	r3, #1
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f47f aec2 	bne.w	8009986 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2220      	movs	r2, #32
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e000      	b.n	8009c20 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009c1e:	2302      	movs	r3, #2
  }
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3728      	adds	r7, #40	; 0x28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	00010004 	.word	0x00010004

08009c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b088      	sub	sp, #32
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	817b      	strh	r3, [r7, #10]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	813b      	strh	r3, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009c46:	f7fe fca7 	bl	8008598 <HAL_GetTick>
 8009c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b20      	cmp	r3, #32
 8009c56:	f040 80d9 	bne.w	8009e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	2319      	movs	r3, #25
 8009c60:	2201      	movs	r2, #1
 8009c62:	496d      	ldr	r1, [pc, #436]	; (8009e18 <HAL_I2C_Mem_Write+0x1ec>)
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f000 fdcf 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009c70:	2302      	movs	r3, #2
 8009c72:	e0cc      	b.n	8009e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d101      	bne.n	8009c82 <HAL_I2C_Mem_Write+0x56>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e0c5      	b.n	8009e0e <HAL_I2C_Mem_Write+0x1e2>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d007      	beq.n	8009ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0201 	orr.w	r2, r2, #1
 8009ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2221      	movs	r2, #33	; 0x21
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2240      	movs	r2, #64	; 0x40
 8009cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a3a      	ldr	r2, [r7, #32]
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4a4d      	ldr	r2, [pc, #308]	; (8009e1c <HAL_I2C_Mem_Write+0x1f0>)
 8009ce8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009cea:	88f8      	ldrh	r0, [r7, #6]
 8009cec:	893a      	ldrh	r2, [r7, #8]
 8009cee:	8979      	ldrh	r1, [r7, #10]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	9301      	str	r3, [sp, #4]
 8009cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 fc06 	bl	800a50c <I2C_RequestMemoryWrite>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d052      	beq.n	8009dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e081      	b.n	8009e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 fe50 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00d      	beq.n	8009d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d107      	bne.n	8009d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e06b      	b.n	8009e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d50:	3b01      	subs	r3, #1
 8009d52:	b29a      	uxth	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	695b      	ldr	r3, [r3, #20]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d11b      	bne.n	8009dac <HAL_I2C_Mem_Write+0x180>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d017      	beq.n	8009dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d80:	781a      	ldrb	r2, [r3, #0]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	1c5a      	adds	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d96:	3b01      	subs	r3, #1
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	3b01      	subs	r3, #1
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1aa      	bne.n	8009d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 fe3c 	bl	800aa36 <I2C_WaitOnBTFFlagUntilTimeout>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00d      	beq.n	8009de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	d107      	bne.n	8009ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e016      	b.n	8009e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2220      	movs	r2, #32
 8009df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e000      	b.n	8009e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009e0c:	2302      	movs	r3, #2
  }
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	00100002 	.word	0x00100002
 8009e1c:	ffff0000 	.word	0xffff0000

08009e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08c      	sub	sp, #48	; 0x30
 8009e24:	af02      	add	r7, sp, #8
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	4608      	mov	r0, r1
 8009e2a:	4611      	mov	r1, r2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	4603      	mov	r3, r0
 8009e30:	817b      	strh	r3, [r7, #10]
 8009e32:	460b      	mov	r3, r1
 8009e34:	813b      	strh	r3, [r7, #8]
 8009e36:	4613      	mov	r3, r2
 8009e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e3a:	f7fe fbad 	bl	8008598 <HAL_GetTick>
 8009e3e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	f040 8208 	bne.w	800a25e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	2319      	movs	r3, #25
 8009e54:	2201      	movs	r2, #1
 8009e56:	497b      	ldr	r1, [pc, #492]	; (800a044 <HAL_I2C_Mem_Read+0x224>)
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 fcd5 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009e64:	2302      	movs	r3, #2
 8009e66:	e1fb      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_I2C_Mem_Read+0x56>
 8009e72:	2302      	movs	r3, #2
 8009e74:	e1f4      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d007      	beq.n	8009e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0201 	orr.w	r2, r2, #1
 8009e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2222      	movs	r2, #34	; 0x22
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2240      	movs	r2, #64	; 0x40
 8009eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4a5b      	ldr	r2, [pc, #364]	; (800a048 <HAL_I2C_Mem_Read+0x228>)
 8009edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009ede:	88f8      	ldrh	r0, [r7, #6]
 8009ee0:	893a      	ldrh	r2, [r7, #8]
 8009ee2:	8979      	ldrh	r1, [r7, #10]
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	4603      	mov	r3, r0
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f000 fba2 	bl	800a638 <I2C_RequestMemoryRead>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e1b0      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d113      	bne.n	8009f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f06:	2300      	movs	r3, #0
 8009f08:	623b      	str	r3, [r7, #32]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	623b      	str	r3, [r7, #32]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	623b      	str	r3, [r7, #32]
 8009f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	e184      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d11b      	bne.n	8009f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f46:	2300      	movs	r3, #0
 8009f48:	61fb      	str	r3, [r7, #28]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	695b      	ldr	r3, [r3, #20]
 8009f50:	61fb      	str	r3, [r7, #28]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	61fb      	str	r3, [r7, #28]
 8009f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f6a:	601a      	str	r2, [r3, #0]
 8009f6c:	e164      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d11b      	bne.n	8009fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f96:	2300      	movs	r3, #0
 8009f98:	61bb      	str	r3, [r7, #24]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	61bb      	str	r3, [r7, #24]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	e144      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009fae:	2300      	movs	r3, #0
 8009fb0:	617b      	str	r3, [r7, #20]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009fc4:	e138      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	f200 80f1 	bhi.w	800a1b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	d123      	bne.n	800a020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 fd6b 	bl	800aab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e139      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	b2d2      	uxtb	r2, r2
 8009ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a008:	3b01      	subs	r3, #1
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a014:	b29b      	uxth	r3, r3
 800a016:	3b01      	subs	r3, #1
 800a018:	b29a      	uxth	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a01e:	e10b      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a024:	2b02      	cmp	r3, #2
 800a026:	d14e      	bne.n	800a0c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	9300      	str	r3, [sp, #0]
 800a02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02e:	2200      	movs	r2, #0
 800a030:	4906      	ldr	r1, [pc, #24]	; (800a04c <HAL_I2C_Mem_Read+0x22c>)
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fbe8 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d008      	beq.n	800a050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e10e      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
 800a042:	bf00      	nop
 800a044:	00100002 	.word	0x00100002
 800a048:	ffff0000 	.word	0xffff0000
 800a04c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a05e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691a      	ldr	r2, [r3, #16]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a07c:	3b01      	subs	r3, #1
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a088:	b29b      	uxth	r3, r3
 800a08a:	3b01      	subs	r3, #1
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	691a      	ldr	r2, [r3, #16]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	b2d2      	uxtb	r2, r2
 800a09e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0c4:	e0b8      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	4966      	ldr	r1, [pc, #408]	; (800a268 <HAL_I2C_Mem_Read+0x448>)
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f000 fb99 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d001      	beq.n	800a0e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0bf      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a0ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	691a      	ldr	r2, [r3, #16]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	b2d2      	uxtb	r2, r2
 800a0fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a10c:	3b01      	subs	r3, #1
 800a10e:	b29a      	uxth	r2, r3
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a118:	b29b      	uxth	r3, r3
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a128:	2200      	movs	r2, #0
 800a12a:	494f      	ldr	r1, [pc, #316]	; (800a268 <HAL_I2C_Mem_Read+0x448>)
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 fb6b 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e091      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a14a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	691a      	ldr	r2, [r3, #16]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a168:	3b01      	subs	r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a174:	b29b      	uxth	r3, r3
 800a176:	3b01      	subs	r3, #1
 800a178:	b29a      	uxth	r2, r3
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	691a      	ldr	r2, [r3, #16]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	b2d2      	uxtb	r2, r2
 800a18a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a1b0:	e042      	b.n	800a238 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fc7e 	bl	800aab8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e04c      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d0:	b2d2      	uxtb	r2, r2
 800a1d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	b29a      	uxth	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	f003 0304 	and.w	r3, r3, #4
 800a202:	2b04      	cmp	r3, #4
 800a204:	d118      	bne.n	800a238 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	691a      	ldr	r2, [r3, #16]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a210:	b2d2      	uxtb	r2, r2
 800a212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a222:	3b01      	subs	r3, #1
 800a224:	b29a      	uxth	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a22e:	b29b      	uxth	r3, r3
 800a230:	3b01      	subs	r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f47f aec2 	bne.w	8009fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2220      	movs	r2, #32
 800a246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e000      	b.n	800a260 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a25e:	2302      	movs	r3, #2
  }
}
 800a260:	4618      	mov	r0, r3
 800a262:	3728      	adds	r7, #40	; 0x28
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	00010004 	.word	0x00010004

0800a26c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af02      	add	r7, sp, #8
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	607a      	str	r2, [r7, #4]
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	460b      	mov	r3, r1
 800a27a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a280:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	2b08      	cmp	r3, #8
 800a286:	d006      	beq.n	800a296 <I2C_MasterRequestWrite+0x2a>
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d003      	beq.n	800a296 <I2C_MasterRequestWrite+0x2a>
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a294:	d108      	bne.n	800a2a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	e00b      	b.n	800a2c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ac:	2b12      	cmp	r3, #18
 800a2ae:	d107      	bne.n	800a2c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 fa9b 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00d      	beq.n	800a2f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e6:	d103      	bne.n	800a2f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	e035      	b.n	800a360 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2fc:	d108      	bne.n	800a310 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a2fe:	897b      	ldrh	r3, [r7, #10]
 800a300:	b2db      	uxtb	r3, r3
 800a302:	461a      	mov	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a30c:	611a      	str	r2, [r3, #16]
 800a30e:	e01b      	b.n	800a348 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a310:	897b      	ldrh	r3, [r7, #10]
 800a312:	11db      	asrs	r3, r3, #7
 800a314:	b2db      	uxtb	r3, r3
 800a316:	f003 0306 	and.w	r3, r3, #6
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f063 030f 	orn	r3, r3, #15
 800a320:	b2da      	uxtb	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	490e      	ldr	r1, [pc, #56]	; (800a368 <I2C_MasterRequestWrite+0xfc>)
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 fac1 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e010      	b.n	800a360 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a33e:	897b      	ldrh	r3, [r7, #10]
 800a340:	b2da      	uxtb	r2, r3
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4907      	ldr	r1, [pc, #28]	; (800a36c <I2C_MasterRequestWrite+0x100>)
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 fab1 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	e000      	b.n	800a360 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3718      	adds	r7, #24
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	00010008 	.word	0x00010008
 800a36c:	00010002 	.word	0x00010002

0800a370 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	607a      	str	r2, [r7, #4]
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	460b      	mov	r3, r1
 800a37e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a394:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b08      	cmp	r3, #8
 800a39a:	d006      	beq.n	800a3aa <I2C_MasterRequestRead+0x3a>
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d003      	beq.n	800a3aa <I2C_MasterRequestRead+0x3a>
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a3a8:	d108      	bne.n	800a3bc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e00b      	b.n	800a3d4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c0:	2b11      	cmp	r3, #17
 800a3c2:	d107      	bne.n	800a3d4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f000 fa11 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00d      	beq.n	800a408 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3fa:	d103      	bne.n	800a404 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a402:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e079      	b.n	800a4fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a410:	d108      	bne.n	800a424 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a412:	897b      	ldrh	r3, [r7, #10]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f043 0301 	orr.w	r3, r3, #1
 800a41a:	b2da      	uxtb	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	611a      	str	r2, [r3, #16]
 800a422:	e05f      	b.n	800a4e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a424:	897b      	ldrh	r3, [r7, #10]
 800a426:	11db      	asrs	r3, r3, #7
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	f003 0306 	and.w	r3, r3, #6
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	f063 030f 	orn	r3, r3, #15
 800a434:	b2da      	uxtb	r2, r3
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4930      	ldr	r1, [pc, #192]	; (800a504 <I2C_MasterRequestRead+0x194>)
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 fa37 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e054      	b.n	800a4fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a452:	897b      	ldrh	r3, [r7, #10]
 800a454:	b2da      	uxtb	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	4929      	ldr	r1, [pc, #164]	; (800a508 <I2C_MasterRequestRead+0x198>)
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fa27 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e044      	b.n	800a4fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a472:	2300      	movs	r3, #0
 800a474:	613b      	str	r3, [r7, #16]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	613b      	str	r3, [r7, #16]
 800a486:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a496:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f9af 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00d      	beq.n	800a4cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4be:	d103      	bne.n	800a4c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a4c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e017      	b.n	800a4fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a4cc:	897b      	ldrh	r3, [r7, #10]
 800a4ce:	11db      	asrs	r3, r3, #7
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	f003 0306 	and.w	r3, r3, #6
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f063 030e 	orn	r3, r3, #14
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	4907      	ldr	r1, [pc, #28]	; (800a508 <I2C_MasterRequestRead+0x198>)
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 f9e3 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e000      	b.n	800a4fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	00010008 	.word	0x00010008
 800a508:	00010002 	.word	0x00010002

0800a50c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	4603      	mov	r3, r0
 800a51c:	817b      	strh	r3, [r7, #10]
 800a51e:	460b      	mov	r3, r1
 800a520:	813b      	strh	r3, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 f960 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00d      	beq.n	800a56a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a55c:	d103      	bne.n	800a566 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a566:	2303      	movs	r3, #3
 800a568:	e05f      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a56a:	897b      	ldrh	r3, [r7, #10]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	6a3a      	ldr	r2, [r7, #32]
 800a57e:	492d      	ldr	r1, [pc, #180]	; (800a634 <I2C_RequestMemoryWrite+0x128>)
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 f998 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e04c      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a590:	2300      	movs	r3, #0
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	617b      	str	r3, [r7, #20]
 800a5a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a8:	6a39      	ldr	r1, [r7, #32]
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fa02 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00d      	beq.n	800a5d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	d107      	bne.n	800a5ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e02b      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5d2:	88fb      	ldrh	r3, [r7, #6]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d105      	bne.n	800a5e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5d8:	893b      	ldrh	r3, [r7, #8]
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	611a      	str	r2, [r3, #16]
 800a5e2:	e021      	b.n	800a628 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a5e4:	893b      	ldrh	r3, [r7, #8]
 800a5e6:	0a1b      	lsrs	r3, r3, #8
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5f4:	6a39      	ldr	r1, [r7, #32]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 f9dc 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00d      	beq.n	800a61e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	2b04      	cmp	r3, #4
 800a608:	d107      	bne.n	800a61a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e005      	b.n	800a62a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a61e:	893b      	ldrh	r3, [r7, #8]
 800a620:	b2da      	uxtb	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	00010002 	.word	0x00010002

0800a638 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	461a      	mov	r2, r3
 800a646:	4603      	mov	r3, r0
 800a648:	817b      	strh	r3, [r7, #10]
 800a64a:	460b      	mov	r3, r1
 800a64c:	813b      	strh	r3, [r7, #8]
 800a64e:	4613      	mov	r3, r2
 800a650:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a660:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	9300      	str	r3, [sp, #0]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	2200      	movs	r2, #0
 800a67a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 f8c2 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00d      	beq.n	800a6a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a698:	d103      	bne.n	800a6a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	e0aa      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6a6:	897b      	ldrh	r3, [r7, #10]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	6a3a      	ldr	r2, [r7, #32]
 800a6ba:	4952      	ldr	r1, [pc, #328]	; (800a804 <I2C_RequestMemoryRead+0x1cc>)
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f8fa 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e097      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	617b      	str	r3, [r7, #20]
 800a6e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e4:	6a39      	ldr	r1, [r7, #32]
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f000 f964 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00d      	beq.n	800a70e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f6:	2b04      	cmp	r3, #4
 800a6f8:	d107      	bne.n	800a70a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e076      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d105      	bne.n	800a720 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a714:	893b      	ldrh	r3, [r7, #8]
 800a716:	b2da      	uxtb	r2, r3
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	611a      	str	r2, [r3, #16]
 800a71e:	e021      	b.n	800a764 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a720:	893b      	ldrh	r3, [r7, #8]
 800a722:	0a1b      	lsrs	r3, r3, #8
 800a724:	b29b      	uxth	r3, r3
 800a726:	b2da      	uxtb	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a730:	6a39      	ldr	r1, [r7, #32]
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 f93e 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00d      	beq.n	800a75a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a742:	2b04      	cmp	r3, #4
 800a744:	d107      	bne.n	800a756 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e050      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a75a:	893b      	ldrh	r3, [r7, #8]
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a766:	6a39      	ldr	r1, [r7, #32]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f923 	bl	800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00d      	beq.n	800a790 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d107      	bne.n	800a78c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a78a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e035      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a79e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	6a3b      	ldr	r3, [r7, #32]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f82b 	bl	800a808 <I2C_WaitOnFlagUntilTimeout>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00d      	beq.n	800a7d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c6:	d103      	bne.n	800a7d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e013      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a7d4:	897b      	ldrh	r3, [r7, #10]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	6a3a      	ldr	r2, [r7, #32]
 800a7e8:	4906      	ldr	r1, [pc, #24]	; (800a804 <I2C_RequestMemoryRead+0x1cc>)
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f000 f863 	bl	800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	00010002 	.word	0x00010002

0800a808 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	603b      	str	r3, [r7, #0]
 800a814:	4613      	mov	r3, r2
 800a816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a818:	e025      	b.n	800a866 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a820:	d021      	beq.n	800a866 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a822:	f7fd feb9 	bl	8008598 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d302      	bcc.n	800a838 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d116      	bne.n	800a866 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2220      	movs	r2, #32
 800a842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a852:	f043 0220 	orr.w	r2, r3, #32
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a862:	2301      	movs	r3, #1
 800a864:	e023      	b.n	800a8ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	0c1b      	lsrs	r3, r3, #16
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d10d      	bne.n	800a88c <I2C_WaitOnFlagUntilTimeout+0x84>
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	43da      	mvns	r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	4013      	ands	r3, r2
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	bf0c      	ite	eq
 800a882:	2301      	moveq	r3, #1
 800a884:	2300      	movne	r3, #0
 800a886:	b2db      	uxtb	r3, r3
 800a888:	461a      	mov	r2, r3
 800a88a:	e00c      	b.n	800a8a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	43da      	mvns	r2, r3
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4013      	ands	r3, r2
 800a898:	b29b      	uxth	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf0c      	ite	eq
 800a89e:	2301      	moveq	r3, #1
 800a8a0:	2300      	movne	r3, #0
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d0b6      	beq.n	800a81a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	60f8      	str	r0, [r7, #12]
 800a8be:	60b9      	str	r1, [r7, #8]
 800a8c0:	607a      	str	r2, [r7, #4]
 800a8c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a8c4:	e051      	b.n	800a96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8d4:	d123      	bne.n	800a91e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	f043 0204 	orr.w	r2, r3, #4
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e046      	b.n	800a9ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a924:	d021      	beq.n	800a96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a926:	f7fd fe37 	bl	8008598 <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d302      	bcc.n	800a93c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d116      	bne.n	800a96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2200      	movs	r2, #0
 800a940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2220      	movs	r2, #32
 800a946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f043 0220 	orr.w	r2, r3, #32
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e020      	b.n	800a9ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	0c1b      	lsrs	r3, r3, #16
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b01      	cmp	r3, #1
 800a972:	d10c      	bne.n	800a98e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	43da      	mvns	r2, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	4013      	ands	r3, r2
 800a980:	b29b      	uxth	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	bf14      	ite	ne
 800a986:	2301      	movne	r3, #1
 800a988:	2300      	moveq	r3, #0
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	e00b      	b.n	800a9a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	699b      	ldr	r3, [r3, #24]
 800a994:	43da      	mvns	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	4013      	ands	r3, r2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bf14      	ite	ne
 800a9a0:	2301      	movne	r3, #1
 800a9a2:	2300      	moveq	r3, #0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d18d      	bne.n	800a8c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9c0:	e02d      	b.n	800aa1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	f000 f8ce 	bl	800ab64 <I2C_IsAcknowledgeFailed>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e02d      	b.n	800aa2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d8:	d021      	beq.n	800aa1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9da:	f7fd fddd 	bl	8008598 <HAL_GetTick>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d302      	bcc.n	800a9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d116      	bne.n	800aa1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2220      	movs	r2, #32
 800a9fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2200      	movs	r2, #0
 800aa02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	f043 0220 	orr.w	r2, r3, #32
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e007      	b.n	800aa2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa28:	2b80      	cmp	r3, #128	; 0x80
 800aa2a:	d1ca      	bne.n	800a9c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	b084      	sub	sp, #16
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa42:	e02d      	b.n	800aaa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f000 f88d 	bl	800ab64 <I2C_IsAcknowledgeFailed>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e02d      	b.n	800aab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa5a:	d021      	beq.n	800aaa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa5c:	f7fd fd9c 	bl	8008598 <HAL_GetTick>
 800aa60:	4602      	mov	r2, r0
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d302      	bcc.n	800aa72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d116      	bne.n	800aaa0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2220      	movs	r2, #32
 800aa7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8c:	f043 0220 	orr.w	r2, r3, #32
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e007      	b.n	800aab0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d1ca      	bne.n	800aa44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3710      	adds	r7, #16
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aac4:	e042      	b.n	800ab4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	f003 0310 	and.w	r3, r3, #16
 800aad0:	2b10      	cmp	r3, #16
 800aad2:	d119      	bne.n	800ab08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f06f 0210 	mvn.w	r2, #16
 800aadc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e029      	b.n	800ab5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab08:	f7fd fd46 	bl	8008598 <HAL_GetTick>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d302      	bcc.n	800ab1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d116      	bne.n	800ab4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2200      	movs	r2, #0
 800ab22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	f043 0220 	orr.w	r2, r3, #32
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e007      	b.n	800ab5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab56:	2b40      	cmp	r3, #64	; 0x40
 800ab58:	d1b5      	bne.n	800aac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	695b      	ldr	r3, [r3, #20]
 800ab72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab7a:	d11b      	bne.n	800abb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2220      	movs	r2, #32
 800ab90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	f043 0204 	orr.w	r2, r3, #4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e000      	b.n	800abb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
	...

0800abc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e264      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0301 	and.w	r3, r3, #1
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d075      	beq.n	800acce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800abe2:	4ba3      	ldr	r3, [pc, #652]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 030c 	and.w	r3, r3, #12
 800abea:	2b04      	cmp	r3, #4
 800abec:	d00c      	beq.n	800ac08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800abee:	4ba0      	ldr	r3, [pc, #640]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800abf6:	2b08      	cmp	r3, #8
 800abf8:	d112      	bne.n	800ac20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800abfa:	4b9d      	ldr	r3, [pc, #628]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac06:	d10b      	bne.n	800ac20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac08:	4b99      	ldr	r3, [pc, #612]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d05b      	beq.n	800accc <HAL_RCC_OscConfig+0x108>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d157      	bne.n	800accc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e23f      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac28:	d106      	bne.n	800ac38 <HAL_RCC_OscConfig+0x74>
 800ac2a:	4b91      	ldr	r3, [pc, #580]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a90      	ldr	r2, [pc, #576]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac34:	6013      	str	r3, [r2, #0]
 800ac36:	e01d      	b.n	800ac74 <HAL_RCC_OscConfig+0xb0>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac40:	d10c      	bne.n	800ac5c <HAL_RCC_OscConfig+0x98>
 800ac42:	4b8b      	ldr	r3, [pc, #556]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a8a      	ldr	r2, [pc, #552]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac4c:	6013      	str	r3, [r2, #0]
 800ac4e:	4b88      	ldr	r3, [pc, #544]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a87      	ldr	r2, [pc, #540]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac58:	6013      	str	r3, [r2, #0]
 800ac5a:	e00b      	b.n	800ac74 <HAL_RCC_OscConfig+0xb0>
 800ac5c:	4b84      	ldr	r3, [pc, #528]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a83      	ldr	r2, [pc, #524]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	4b81      	ldr	r3, [pc, #516]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a80      	ldr	r2, [pc, #512]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d013      	beq.n	800aca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac7c:	f7fd fc8c 	bl	8008598 <HAL_GetTick>
 800ac80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac82:	e008      	b.n	800ac96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac84:	f7fd fc88 	bl	8008598 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b64      	cmp	r3, #100	; 0x64
 800ac90:	d901      	bls.n	800ac96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e204      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ac96:	4b76      	ldr	r3, [pc, #472]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0f0      	beq.n	800ac84 <HAL_RCC_OscConfig+0xc0>
 800aca2:	e014      	b.n	800acce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aca4:	f7fd fc78 	bl	8008598 <HAL_GetTick>
 800aca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acaa:	e008      	b.n	800acbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800acac:	f7fd fc74 	bl	8008598 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	2b64      	cmp	r3, #100	; 0x64
 800acb8:	d901      	bls.n	800acbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800acba:	2303      	movs	r3, #3
 800acbc:	e1f0      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800acbe:	4b6c      	ldr	r3, [pc, #432]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1f0      	bne.n	800acac <HAL_RCC_OscConfig+0xe8>
 800acca:	e000      	b.n	800acce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800accc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0302 	and.w	r3, r3, #2
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d063      	beq.n	800ada2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800acda:	4b65      	ldr	r3, [pc, #404]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f003 030c 	and.w	r3, r3, #12
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00b      	beq.n	800acfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ace6:	4b62      	ldr	r3, [pc, #392]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800acee:	2b08      	cmp	r3, #8
 800acf0:	d11c      	bne.n	800ad2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800acf2:	4b5f      	ldr	r3, [pc, #380]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d116      	bne.n	800ad2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800acfe:	4b5c      	ldr	r3, [pc, #368]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0302 	and.w	r3, r3, #2
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d005      	beq.n	800ad16 <HAL_RCC_OscConfig+0x152>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d001      	beq.n	800ad16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e1c4      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad16:	4b56      	ldr	r3, [pc, #344]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4952      	ldr	r1, [pc, #328]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad2a:	e03a      	b.n	800ada2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d020      	beq.n	800ad76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad34:	4b4f      	ldr	r3, [pc, #316]	; (800ae74 <HAL_RCC_OscConfig+0x2b0>)
 800ad36:	2201      	movs	r2, #1
 800ad38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad3a:	f7fd fc2d 	bl	8008598 <HAL_GetTick>
 800ad3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad40:	e008      	b.n	800ad54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad42:	f7fd fc29 	bl	8008598 <HAL_GetTick>
 800ad46:	4602      	mov	r2, r0
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	1ad3      	subs	r3, r2, r3
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d901      	bls.n	800ad54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e1a5      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad54:	4b46      	ldr	r3, [pc, #280]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d0f0      	beq.n	800ad42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad60:	4b43      	ldr	r3, [pc, #268]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	4940      	ldr	r1, [pc, #256]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad70:	4313      	orrs	r3, r2
 800ad72:	600b      	str	r3, [r1, #0]
 800ad74:	e015      	b.n	800ada2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad76:	4b3f      	ldr	r3, [pc, #252]	; (800ae74 <HAL_RCC_OscConfig+0x2b0>)
 800ad78:	2200      	movs	r2, #0
 800ad7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad7c:	f7fd fc0c 	bl	8008598 <HAL_GetTick>
 800ad80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad82:	e008      	b.n	800ad96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ad84:	f7fd fc08 	bl	8008598 <HAL_GetTick>
 800ad88:	4602      	mov	r2, r0
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	1ad3      	subs	r3, r2, r3
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d901      	bls.n	800ad96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e184      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ad96:	4b36      	ldr	r3, [pc, #216]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f0      	bne.n	800ad84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0308 	and.w	r3, r3, #8
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d030      	beq.n	800ae10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	695b      	ldr	r3, [r3, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d016      	beq.n	800ade4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adb6:	4b30      	ldr	r3, [pc, #192]	; (800ae78 <HAL_RCC_OscConfig+0x2b4>)
 800adb8:	2201      	movs	r2, #1
 800adba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adbc:	f7fd fbec 	bl	8008598 <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800adc4:	f7fd fbe8 	bl	8008598 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b02      	cmp	r3, #2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e164      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800add6:	4b26      	ldr	r3, [pc, #152]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800add8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adda:	f003 0302 	and.w	r3, r3, #2
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0f0      	beq.n	800adc4 <HAL_RCC_OscConfig+0x200>
 800ade2:	e015      	b.n	800ae10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ade4:	4b24      	ldr	r3, [pc, #144]	; (800ae78 <HAL_RCC_OscConfig+0x2b4>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800adea:	f7fd fbd5 	bl	8008598 <HAL_GetTick>
 800adee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800adf2:	f7fd fbd1 	bl	8008598 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e14d      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae04:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1f0      	bne.n	800adf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0304 	and.w	r3, r3, #4
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80a0 	beq.w	800af5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10f      	bne.n	800ae4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]
 800ae32:	4b0f      	ldr	r3, [pc, #60]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	4a0e      	ldr	r2, [pc, #56]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae3c:	6413      	str	r3, [r2, #64]	; 0x40
 800ae3e:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <HAL_RCC_OscConfig+0x2ac>)
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae46:	60bb      	str	r3, [r7, #8]
 800ae48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae4e:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <HAL_RCC_OscConfig+0x2b8>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d121      	bne.n	800ae9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ae5a:	4b08      	ldr	r3, [pc, #32]	; (800ae7c <HAL_RCC_OscConfig+0x2b8>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a07      	ldr	r2, [pc, #28]	; (800ae7c <HAL_RCC_OscConfig+0x2b8>)
 800ae60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae66:	f7fd fb97 	bl	8008598 <HAL_GetTick>
 800ae6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae6c:	e011      	b.n	800ae92 <HAL_RCC_OscConfig+0x2ce>
 800ae6e:	bf00      	nop
 800ae70:	40023800 	.word	0x40023800
 800ae74:	42470000 	.word	0x42470000
 800ae78:	42470e80 	.word	0x42470e80
 800ae7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae80:	f7fd fb8a 	bl	8008598 <HAL_GetTick>
 800ae84:	4602      	mov	r2, r0
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d901      	bls.n	800ae92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800ae8e:	2303      	movs	r3, #3
 800ae90:	e106      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ae92:	4b85      	ldr	r3, [pc, #532]	; (800b0a8 <HAL_RCC_OscConfig+0x4e4>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0f0      	beq.n	800ae80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d106      	bne.n	800aeb4 <HAL_RCC_OscConfig+0x2f0>
 800aea6:	4b81      	ldr	r3, [pc, #516]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeaa:	4a80      	ldr	r2, [pc, #512]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aeac:	f043 0301 	orr.w	r3, r3, #1
 800aeb0:	6713      	str	r3, [r2, #112]	; 0x70
 800aeb2:	e01c      	b.n	800aeee <HAL_RCC_OscConfig+0x32a>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	2b05      	cmp	r3, #5
 800aeba:	d10c      	bne.n	800aed6 <HAL_RCC_OscConfig+0x312>
 800aebc:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec0:	4a7a      	ldr	r2, [pc, #488]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aec2:	f043 0304 	orr.w	r3, r3, #4
 800aec6:	6713      	str	r3, [r2, #112]	; 0x70
 800aec8:	4b78      	ldr	r3, [pc, #480]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aeca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aecc:	4a77      	ldr	r2, [pc, #476]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	6713      	str	r3, [r2, #112]	; 0x70
 800aed4:	e00b      	b.n	800aeee <HAL_RCC_OscConfig+0x32a>
 800aed6:	4b75      	ldr	r3, [pc, #468]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeda:	4a74      	ldr	r2, [pc, #464]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aedc:	f023 0301 	bic.w	r3, r3, #1
 800aee0:	6713      	str	r3, [r2, #112]	; 0x70
 800aee2:	4b72      	ldr	r3, [pc, #456]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee6:	4a71      	ldr	r2, [pc, #452]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aee8:	f023 0304 	bic.w	r3, r3, #4
 800aeec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d015      	beq.n	800af22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aef6:	f7fd fb4f 	bl	8008598 <HAL_GetTick>
 800aefa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aefc:	e00a      	b.n	800af14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aefe:	f7fd fb4b 	bl	8008598 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d901      	bls.n	800af14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e0c5      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af14:	4b65      	ldr	r3, [pc, #404]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800af16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0ee      	beq.n	800aefe <HAL_RCC_OscConfig+0x33a>
 800af20:	e014      	b.n	800af4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af22:	f7fd fb39 	bl	8008598 <HAL_GetTick>
 800af26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af28:	e00a      	b.n	800af40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af2a:	f7fd fb35 	bl	8008598 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	f241 3288 	movw	r2, #5000	; 0x1388
 800af38:	4293      	cmp	r3, r2
 800af3a:	d901      	bls.n	800af40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e0af      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800af40:	4b5a      	ldr	r3, [pc, #360]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800af42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af44:	f003 0302 	and.w	r3, r3, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1ee      	bne.n	800af2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d105      	bne.n	800af5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af52:	4b56      	ldr	r3, [pc, #344]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800af54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af56:	4a55      	ldr	r2, [pc, #340]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800af58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 809b 	beq.w	800b09e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800af68:	4b50      	ldr	r3, [pc, #320]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f003 030c 	and.w	r3, r3, #12
 800af70:	2b08      	cmp	r3, #8
 800af72:	d05c      	beq.n	800b02e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	699b      	ldr	r3, [r3, #24]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d141      	bne.n	800b000 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af7c:	4b4c      	ldr	r3, [pc, #304]	; (800b0b0 <HAL_RCC_OscConfig+0x4ec>)
 800af7e:	2200      	movs	r2, #0
 800af80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af82:	f7fd fb09 	bl	8008598 <HAL_GetTick>
 800af86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af88:	e008      	b.n	800af9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af8a:	f7fd fb05 	bl	8008598 <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	2b02      	cmp	r3, #2
 800af96:	d901      	bls.n	800af9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	e081      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af9c:	4b43      	ldr	r3, [pc, #268]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1f0      	bne.n	800af8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	69da      	ldr	r2, [r3, #28]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	431a      	orrs	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb6:	019b      	lsls	r3, r3, #6
 800afb8:	431a      	orrs	r2, r3
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	085b      	lsrs	r3, r3, #1
 800afc0:	3b01      	subs	r3, #1
 800afc2:	041b      	lsls	r3, r3, #16
 800afc4:	431a      	orrs	r2, r3
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	061b      	lsls	r3, r3, #24
 800afcc:	4937      	ldr	r1, [pc, #220]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800afce:	4313      	orrs	r3, r2
 800afd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afd2:	4b37      	ldr	r3, [pc, #220]	; (800b0b0 <HAL_RCC_OscConfig+0x4ec>)
 800afd4:	2201      	movs	r2, #1
 800afd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afd8:	f7fd fade 	bl	8008598 <HAL_GetTick>
 800afdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800afde:	e008      	b.n	800aff2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800afe0:	f7fd fada 	bl	8008598 <HAL_GetTick>
 800afe4:	4602      	mov	r2, r0
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	2b02      	cmp	r3, #2
 800afec:	d901      	bls.n	800aff2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e056      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aff2:	4b2e      	ldr	r3, [pc, #184]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0f0      	beq.n	800afe0 <HAL_RCC_OscConfig+0x41c>
 800affe:	e04e      	b.n	800b09e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b000:	4b2b      	ldr	r3, [pc, #172]	; (800b0b0 <HAL_RCC_OscConfig+0x4ec>)
 800b002:	2200      	movs	r2, #0
 800b004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b006:	f7fd fac7 	bl	8008598 <HAL_GetTick>
 800b00a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b00c:	e008      	b.n	800b020 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b00e:	f7fd fac3 	bl	8008598 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d901      	bls.n	800b020 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e03f      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b020:	4b22      	ldr	r3, [pc, #136]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1f0      	bne.n	800b00e <HAL_RCC_OscConfig+0x44a>
 800b02c:	e037      	b.n	800b09e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d101      	bne.n	800b03a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e032      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b03a:	4b1c      	ldr	r3, [pc, #112]	; (800b0ac <HAL_RCC_OscConfig+0x4e8>)
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	2b01      	cmp	r3, #1
 800b046:	d028      	beq.n	800b09a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b052:	429a      	cmp	r2, r3
 800b054:	d121      	bne.n	800b09a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b060:	429a      	cmp	r2, r3
 800b062:	d11a      	bne.n	800b09a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b06a:	4013      	ands	r3, r2
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b070:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b072:	4293      	cmp	r3, r2
 800b074:	d111      	bne.n	800b09a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	3b01      	subs	r3, #1
 800b084:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b086:	429a      	cmp	r2, r3
 800b088:	d107      	bne.n	800b09a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b096:	429a      	cmp	r2, r3
 800b098:	d001      	beq.n	800b09e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	40007000 	.word	0x40007000
 800b0ac:	40023800 	.word	0x40023800
 800b0b0:	42470060 	.word	0x42470060

0800b0b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e0cc      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b0c8:	4b68      	ldr	r3, [pc, #416]	; (800b26c <HAL_RCC_ClockConfig+0x1b8>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0307 	and.w	r3, r3, #7
 800b0d0:	683a      	ldr	r2, [r7, #0]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d90c      	bls.n	800b0f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0d6:	4b65      	ldr	r3, [pc, #404]	; (800b26c <HAL_RCC_ClockConfig+0x1b8>)
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	b2d2      	uxtb	r2, r2
 800b0dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0de:	4b63      	ldr	r3, [pc, #396]	; (800b26c <HAL_RCC_ClockConfig+0x1b8>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f003 0307 	and.w	r3, r3, #7
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d001      	beq.n	800b0f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e0b8      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0302 	and.w	r3, r3, #2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d020      	beq.n	800b13e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b00      	cmp	r3, #0
 800b106:	d005      	beq.n	800b114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b108:	4b59      	ldr	r3, [pc, #356]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	4a58      	ldr	r2, [pc, #352]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b10e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0308 	and.w	r3, r3, #8
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d005      	beq.n	800b12c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b120:	4b53      	ldr	r3, [pc, #332]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	4a52      	ldr	r2, [pc, #328]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b12a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b12c:	4b50      	ldr	r3, [pc, #320]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	494d      	ldr	r1, [pc, #308]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b13a:	4313      	orrs	r3, r2
 800b13c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b00      	cmp	r3, #0
 800b148:	d044      	beq.n	800b1d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d107      	bne.n	800b162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b152:	4b47      	ldr	r3, [pc, #284]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d119      	bne.n	800b192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	e07f      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	2b02      	cmp	r3, #2
 800b168:	d003      	beq.n	800b172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d107      	bne.n	800b182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b172:	4b3f      	ldr	r3, [pc, #252]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d109      	bne.n	800b192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e06f      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b182:	4b3b      	ldr	r3, [pc, #236]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d101      	bne.n	800b192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e067      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b192:	4b37      	ldr	r3, [pc, #220]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f023 0203 	bic.w	r2, r3, #3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	4934      	ldr	r1, [pc, #208]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b1a4:	f7fd f9f8 	bl	8008598 <HAL_GetTick>
 800b1a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1aa:	e00a      	b.n	800b1c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1ac:	f7fd f9f4 	bl	8008598 <HAL_GetTick>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d901      	bls.n	800b1c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e04f      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b1c2:	4b2b      	ldr	r3, [pc, #172]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f003 020c 	and.w	r2, r3, #12
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	009b      	lsls	r3, r3, #2
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d1eb      	bne.n	800b1ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b1d4:	4b25      	ldr	r3, [pc, #148]	; (800b26c <HAL_RCC_ClockConfig+0x1b8>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0307 	and.w	r3, r3, #7
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d20c      	bcs.n	800b1fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1e2:	4b22      	ldr	r3, [pc, #136]	; (800b26c <HAL_RCC_ClockConfig+0x1b8>)
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ea:	4b20      	ldr	r3, [pc, #128]	; (800b26c <HAL_RCC_ClockConfig+0x1b8>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d001      	beq.n	800b1fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e032      	b.n	800b262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 0304 	and.w	r3, r3, #4
 800b204:	2b00      	cmp	r3, #0
 800b206:	d008      	beq.n	800b21a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b208:	4b19      	ldr	r3, [pc, #100]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	4916      	ldr	r1, [pc, #88]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b216:	4313      	orrs	r3, r2
 800b218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0308 	and.w	r3, r3, #8
 800b222:	2b00      	cmp	r3, #0
 800b224:	d009      	beq.n	800b23a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b226:	4b12      	ldr	r3, [pc, #72]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	691b      	ldr	r3, [r3, #16]
 800b232:	00db      	lsls	r3, r3, #3
 800b234:	490e      	ldr	r1, [pc, #56]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b236:	4313      	orrs	r3, r2
 800b238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b23a:	f000 f821 	bl	800b280 <HAL_RCC_GetSysClockFreq>
 800b23e:	4602      	mov	r2, r0
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <HAL_RCC_ClockConfig+0x1bc>)
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	091b      	lsrs	r3, r3, #4
 800b246:	f003 030f 	and.w	r3, r3, #15
 800b24a:	490a      	ldr	r1, [pc, #40]	; (800b274 <HAL_RCC_ClockConfig+0x1c0>)
 800b24c:	5ccb      	ldrb	r3, [r1, r3]
 800b24e:	fa22 f303 	lsr.w	r3, r2, r3
 800b252:	4a09      	ldr	r2, [pc, #36]	; (800b278 <HAL_RCC_ClockConfig+0x1c4>)
 800b254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b256:	4b09      	ldr	r3, [pc, #36]	; (800b27c <HAL_RCC_ClockConfig+0x1c8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fd f958 	bl	8008510 <HAL_InitTick>

  return HAL_OK;
 800b260:	2300      	movs	r3, #0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	40023c00 	.word	0x40023c00
 800b270:	40023800 	.word	0x40023800
 800b274:	0800fffc 	.word	0x0800fffc
 800b278:	20000ecc 	.word	0x20000ecc
 800b27c:	20000ed0 	.word	0x20000ed0

0800b280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b288:	2300      	movs	r3, #0
 800b28a:	607b      	str	r3, [r7, #4]
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	2300      	movs	r3, #0
 800b292:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b294:	2300      	movs	r3, #0
 800b296:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b298:	4b67      	ldr	r3, [pc, #412]	; (800b438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f003 030c 	and.w	r3, r3, #12
 800b2a0:	2b08      	cmp	r3, #8
 800b2a2:	d00d      	beq.n	800b2c0 <HAL_RCC_GetSysClockFreq+0x40>
 800b2a4:	2b08      	cmp	r3, #8
 800b2a6:	f200 80bd 	bhi.w	800b424 <HAL_RCC_GetSysClockFreq+0x1a4>
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <HAL_RCC_GetSysClockFreq+0x34>
 800b2ae:	2b04      	cmp	r3, #4
 800b2b0:	d003      	beq.n	800b2ba <HAL_RCC_GetSysClockFreq+0x3a>
 800b2b2:	e0b7      	b.n	800b424 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b2b4:	4b61      	ldr	r3, [pc, #388]	; (800b43c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b2b6:	60bb      	str	r3, [r7, #8]
       break;
 800b2b8:	e0b7      	b.n	800b42a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b2ba:	4b61      	ldr	r3, [pc, #388]	; (800b440 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800b2bc:	60bb      	str	r3, [r7, #8]
      break;
 800b2be:	e0b4      	b.n	800b42a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b2c0:	4b5d      	ldr	r3, [pc, #372]	; (800b438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b2ca:	4b5b      	ldr	r3, [pc, #364]	; (800b438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d04d      	beq.n	800b372 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2d6:	4b58      	ldr	r3, [pc, #352]	; (800b438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	099b      	lsrs	r3, r3, #6
 800b2dc:	461a      	mov	r2, r3
 800b2de:	f04f 0300 	mov.w	r3, #0
 800b2e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b2e6:	f04f 0100 	mov.w	r1, #0
 800b2ea:	ea02 0800 	and.w	r8, r2, r0
 800b2ee:	ea03 0901 	and.w	r9, r3, r1
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	f04f 0300 	mov.w	r3, #0
 800b2fe:	014b      	lsls	r3, r1, #5
 800b300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b304:	0142      	lsls	r2, r0, #5
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	ebb0 0008 	subs.w	r0, r0, r8
 800b30e:	eb61 0109 	sbc.w	r1, r1, r9
 800b312:	f04f 0200 	mov.w	r2, #0
 800b316:	f04f 0300 	mov.w	r3, #0
 800b31a:	018b      	lsls	r3, r1, #6
 800b31c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b320:	0182      	lsls	r2, r0, #6
 800b322:	1a12      	subs	r2, r2, r0
 800b324:	eb63 0301 	sbc.w	r3, r3, r1
 800b328:	f04f 0000 	mov.w	r0, #0
 800b32c:	f04f 0100 	mov.w	r1, #0
 800b330:	00d9      	lsls	r1, r3, #3
 800b332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b336:	00d0      	lsls	r0, r2, #3
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	eb12 0208 	adds.w	r2, r2, r8
 800b340:	eb43 0309 	adc.w	r3, r3, r9
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f04f 0100 	mov.w	r1, #0
 800b34c:	0259      	lsls	r1, r3, #9
 800b34e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b352:	0250      	lsls	r0, r2, #9
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4610      	mov	r0, r2
 800b35a:	4619      	mov	r1, r3
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	461a      	mov	r2, r3
 800b360:	f04f 0300 	mov.w	r3, #0
 800b364:	f7f5 fca8 	bl	8000cb8 <__aeabi_uldivmod>
 800b368:	4602      	mov	r2, r0
 800b36a:	460b      	mov	r3, r1
 800b36c:	4613      	mov	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	e04a      	b.n	800b408 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b372:	4b31      	ldr	r3, [pc, #196]	; (800b438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	099b      	lsrs	r3, r3, #6
 800b378:	461a      	mov	r2, r3
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b382:	f04f 0100 	mov.w	r1, #0
 800b386:	ea02 0400 	and.w	r4, r2, r0
 800b38a:	ea03 0501 	and.w	r5, r3, r1
 800b38e:	4620      	mov	r0, r4
 800b390:	4629      	mov	r1, r5
 800b392:	f04f 0200 	mov.w	r2, #0
 800b396:	f04f 0300 	mov.w	r3, #0
 800b39a:	014b      	lsls	r3, r1, #5
 800b39c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b3a0:	0142      	lsls	r2, r0, #5
 800b3a2:	4610      	mov	r0, r2
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	1b00      	subs	r0, r0, r4
 800b3a8:	eb61 0105 	sbc.w	r1, r1, r5
 800b3ac:	f04f 0200 	mov.w	r2, #0
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	018b      	lsls	r3, r1, #6
 800b3b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b3ba:	0182      	lsls	r2, r0, #6
 800b3bc:	1a12      	subs	r2, r2, r0
 800b3be:	eb63 0301 	sbc.w	r3, r3, r1
 800b3c2:	f04f 0000 	mov.w	r0, #0
 800b3c6:	f04f 0100 	mov.w	r1, #0
 800b3ca:	00d9      	lsls	r1, r3, #3
 800b3cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b3d0:	00d0      	lsls	r0, r2, #3
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	1912      	adds	r2, r2, r4
 800b3d8:	eb45 0303 	adc.w	r3, r5, r3
 800b3dc:	f04f 0000 	mov.w	r0, #0
 800b3e0:	f04f 0100 	mov.w	r1, #0
 800b3e4:	0299      	lsls	r1, r3, #10
 800b3e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b3ea:	0290      	lsls	r0, r2, #10
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f04f 0300 	mov.w	r3, #0
 800b3fc:	f7f5 fc5c 	bl	8000cb8 <__aeabi_uldivmod>
 800b400:	4602      	mov	r2, r0
 800b402:	460b      	mov	r3, r1
 800b404:	4613      	mov	r3, r2
 800b406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b408:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	0c1b      	lsrs	r3, r3, #16
 800b40e:	f003 0303 	and.w	r3, r3, #3
 800b412:	3301      	adds	r3, #1
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b420:	60bb      	str	r3, [r7, #8]
      break;
 800b422:	e002      	b.n	800b42a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b424:	4b05      	ldr	r3, [pc, #20]	; (800b43c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b426:	60bb      	str	r3, [r7, #8]
      break;
 800b428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b42a:	68bb      	ldr	r3, [r7, #8]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b436:	bf00      	nop
 800b438:	40023800 	.word	0x40023800
 800b43c:	00f42400 	.word	0x00f42400
 800b440:	007a1200 	.word	0x007a1200

0800b444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b444:	b480      	push	{r7}
 800b446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b448:	4b03      	ldr	r3, [pc, #12]	; (800b458 <HAL_RCC_GetHCLKFreq+0x14>)
 800b44a:	681b      	ldr	r3, [r3, #0]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	20000ecc 	.word	0x20000ecc

0800b45c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b460:	f7ff fff0 	bl	800b444 <HAL_RCC_GetHCLKFreq>
 800b464:	4602      	mov	r2, r0
 800b466:	4b05      	ldr	r3, [pc, #20]	; (800b47c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	0a9b      	lsrs	r3, r3, #10
 800b46c:	f003 0307 	and.w	r3, r3, #7
 800b470:	4903      	ldr	r1, [pc, #12]	; (800b480 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b472:	5ccb      	ldrb	r3, [r1, r3]
 800b474:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b478:	4618      	mov	r0, r3
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	40023800 	.word	0x40023800
 800b480:	0801000c 	.word	0x0801000c

0800b484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b488:	f7ff ffdc 	bl	800b444 <HAL_RCC_GetHCLKFreq>
 800b48c:	4602      	mov	r2, r0
 800b48e:	4b05      	ldr	r3, [pc, #20]	; (800b4a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	0b5b      	lsrs	r3, r3, #13
 800b494:	f003 0307 	and.w	r3, r3, #7
 800b498:	4903      	ldr	r1, [pc, #12]	; (800b4a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b49a:	5ccb      	ldrb	r3, [r1, r3]
 800b49c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40023800 	.word	0x40023800
 800b4a8:	0801000c 	.word	0x0801000c

0800b4ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e041      	b.n	800b542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d106      	bne.n	800b4d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7fc fe08 	bl	80080e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2202      	movs	r2, #2
 800b4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f000 f9c0 	bl	800b870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b55a:	b2db      	uxtb	r3, r3
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d001      	beq.n	800b564 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	e044      	b.n	800b5ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68da      	ldr	r2, [r3, #12]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f042 0201 	orr.w	r2, r2, #1
 800b57a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <HAL_TIM_Base_Start_IT+0xb0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d018      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58e:	d013      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a1a      	ldr	r2, [pc, #104]	; (800b600 <HAL_TIM_Base_Start_IT+0xb4>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d00e      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a19      	ldr	r2, [pc, #100]	; (800b604 <HAL_TIM_Base_Start_IT+0xb8>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d009      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a17      	ldr	r2, [pc, #92]	; (800b608 <HAL_TIM_Base_Start_IT+0xbc>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d004      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x6c>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a16      	ldr	r2, [pc, #88]	; (800b60c <HAL_TIM_Base_Start_IT+0xc0>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d111      	bne.n	800b5dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	f003 0307 	and.w	r3, r3, #7
 800b5c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b06      	cmp	r3, #6
 800b5c8:	d010      	beq.n	800b5ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f042 0201 	orr.w	r2, r2, #1
 800b5d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5da:	e007      	b.n	800b5ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f042 0201 	orr.w	r2, r2, #1
 800b5ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	40010000 	.word	0x40010000
 800b600:	40000400 	.word	0x40000400
 800b604:	40000800 	.word	0x40000800
 800b608:	40000c00 	.word	0x40000c00
 800b60c:	40014000 	.word	0x40014000

0800b610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b02      	cmp	r3, #2
 800b624:	d122      	bne.n	800b66c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	f003 0302 	and.w	r3, r3, #2
 800b630:	2b02      	cmp	r3, #2
 800b632:	d11b      	bne.n	800b66c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f06f 0202 	mvn.w	r2, #2
 800b63c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f8ee 	bl	800b834 <HAL_TIM_IC_CaptureCallback>
 800b658:	e005      	b.n	800b666 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f8e0 	bl	800b820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f8f1 	bl	800b848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	f003 0304 	and.w	r3, r3, #4
 800b676:	2b04      	cmp	r3, #4
 800b678:	d122      	bne.n	800b6c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b04      	cmp	r3, #4
 800b686:	d11b      	bne.n	800b6c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f06f 0204 	mvn.w	r2, #4
 800b690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2202      	movs	r2, #2
 800b696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	699b      	ldr	r3, [r3, #24]
 800b69e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f8c4 	bl	800b834 <HAL_TIM_IC_CaptureCallback>
 800b6ac:	e005      	b.n	800b6ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 f8b6 	bl	800b820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f8c7 	bl	800b848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	f003 0308 	and.w	r3, r3, #8
 800b6ca:	2b08      	cmp	r3, #8
 800b6cc:	d122      	bne.n	800b714 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	f003 0308 	and.w	r3, r3, #8
 800b6d8:	2b08      	cmp	r3, #8
 800b6da:	d11b      	bne.n	800b714 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f06f 0208 	mvn.w	r2, #8
 800b6e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2204      	movs	r2, #4
 800b6ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	f003 0303 	and.w	r3, r3, #3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d003      	beq.n	800b702 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f89a 	bl	800b834 <HAL_TIM_IC_CaptureCallback>
 800b700:	e005      	b.n	800b70e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f88c 	bl	800b820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f89d 	bl	800b848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	691b      	ldr	r3, [r3, #16]
 800b71a:	f003 0310 	and.w	r3, r3, #16
 800b71e:	2b10      	cmp	r3, #16
 800b720:	d122      	bne.n	800b768 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b10      	cmp	r3, #16
 800b72e:	d11b      	bne.n	800b768 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f06f 0210 	mvn.w	r2, #16
 800b738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2208      	movs	r2, #8
 800b73e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69db      	ldr	r3, [r3, #28]
 800b746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f870 	bl	800b834 <HAL_TIM_IC_CaptureCallback>
 800b754:	e005      	b.n	800b762 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f862 	bl	800b820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 f873 	bl	800b848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	f003 0301 	and.w	r3, r3, #1
 800b772:	2b01      	cmp	r3, #1
 800b774:	d10e      	bne.n	800b794 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b01      	cmp	r3, #1
 800b782:	d107      	bne.n	800b794 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f06f 0201 	mvn.w	r2, #1
 800b78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7fa fa26 	bl	8005be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b79e:	2b80      	cmp	r3, #128	; 0x80
 800b7a0:	d10e      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7ac:	2b80      	cmp	r3, #128	; 0x80
 800b7ae:	d107      	bne.n	800b7c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f8e2 	bl	800b984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ca:	2b40      	cmp	r3, #64	; 0x40
 800b7cc:	d10e      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7d8:	2b40      	cmp	r3, #64	; 0x40
 800b7da:	d107      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f838 	bl	800b85c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d10e      	bne.n	800b818 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0320 	and.w	r3, r3, #32
 800b804:	2b20      	cmp	r3, #32
 800b806:	d107      	bne.n	800b818 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0220 	mvn.w	r2, #32
 800b810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f8ac 	bl	800b970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b818:	bf00      	nop
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b870:	b480      	push	{r7}
 800b872:	b085      	sub	sp, #20
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4a34      	ldr	r2, [pc, #208]	; (800b954 <TIM_Base_SetConfig+0xe4>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d00f      	beq.n	800b8a8 <TIM_Base_SetConfig+0x38>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b88e:	d00b      	beq.n	800b8a8 <TIM_Base_SetConfig+0x38>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a31      	ldr	r2, [pc, #196]	; (800b958 <TIM_Base_SetConfig+0xe8>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d007      	beq.n	800b8a8 <TIM_Base_SetConfig+0x38>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a30      	ldr	r2, [pc, #192]	; (800b95c <TIM_Base_SetConfig+0xec>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d003      	beq.n	800b8a8 <TIM_Base_SetConfig+0x38>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a2f      	ldr	r2, [pc, #188]	; (800b960 <TIM_Base_SetConfig+0xf0>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d108      	bne.n	800b8ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	4a25      	ldr	r2, [pc, #148]	; (800b954 <TIM_Base_SetConfig+0xe4>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d01b      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c8:	d017      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a22      	ldr	r2, [pc, #136]	; (800b958 <TIM_Base_SetConfig+0xe8>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d013      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	4a21      	ldr	r2, [pc, #132]	; (800b95c <TIM_Base_SetConfig+0xec>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d00f      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	4a20      	ldr	r2, [pc, #128]	; (800b960 <TIM_Base_SetConfig+0xf0>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d00b      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4a1f      	ldr	r2, [pc, #124]	; (800b964 <TIM_Base_SetConfig+0xf4>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d007      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	4a1e      	ldr	r2, [pc, #120]	; (800b968 <TIM_Base_SetConfig+0xf8>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d003      	beq.n	800b8fa <TIM_Base_SetConfig+0x8a>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	4a1d      	ldr	r2, [pc, #116]	; (800b96c <TIM_Base_SetConfig+0xfc>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d108      	bne.n	800b90c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	4313      	orrs	r3, r2
 800b90a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	689a      	ldr	r2, [r3, #8]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a08      	ldr	r2, [pc, #32]	; (800b954 <TIM_Base_SetConfig+0xe4>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d103      	bne.n	800b940 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	691a      	ldr	r2, [r3, #16]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	615a      	str	r2, [r3, #20]
}
 800b946:	bf00      	nop
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	40010000 	.word	0x40010000
 800b958:	40000400 	.word	0x40000400
 800b95c:	40000800 	.word	0x40000800
 800b960:	40000c00 	.word	0x40000c00
 800b964:	40014000 	.word	0x40014000
 800b968:	40014400 	.word	0x40014400
 800b96c:	40014800 	.word	0x40014800

0800b970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b978:	bf00      	nop
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b98c:	bf00      	nop
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e03f      	b.n	800ba2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d106      	bne.n	800b9c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7fc fc38 	bl	8008234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2224      	movs	r2, #36	; 0x24
 800b9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68da      	ldr	r2, [r3, #12]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fe19 	bl	800c614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	691a      	ldr	r2, [r3, #16]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	695a      	ldr	r2, [r3, #20]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68da      	ldr	r2, [r3, #12]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2220      	movs	r2, #32
 800ba1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2220      	movs	r2, #32
 800ba24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b08a      	sub	sp, #40	; 0x28
 800ba36:	af02      	add	r7, sp, #8
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	603b      	str	r3, [r7, #0]
 800ba3e:	4613      	mov	r3, r2
 800ba40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba42:	2300      	movs	r3, #0
 800ba44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	d17c      	bne.n	800bb4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <HAL_UART_Transmit+0x2c>
 800ba58:	88fb      	ldrh	r3, [r7, #6]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e075      	b.n	800bb4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d101      	bne.n	800ba70 <HAL_UART_Transmit+0x3e>
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	e06e      	b.n	800bb4e <HAL_UART_Transmit+0x11c>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2221      	movs	r2, #33	; 0x21
 800ba82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba86:	f7fc fd87 	bl	8008598 <HAL_GetTick>
 800ba8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	88fa      	ldrh	r2, [r7, #6]
 800ba90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	88fa      	ldrh	r2, [r7, #6]
 800ba96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa0:	d108      	bne.n	800bab4 <HAL_UART_Transmit+0x82>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d104      	bne.n	800bab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	61bb      	str	r3, [r7, #24]
 800bab2:	e003      	b.n	800babc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bab8:	2300      	movs	r3, #0
 800baba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bac4:	e02a      	b.n	800bb1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	2200      	movs	r2, #0
 800bace:	2180      	movs	r1, #128	; 0x80
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f000 fb9a 	bl	800c20a <UART_WaitOnFlagUntilTimeout>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e036      	b.n	800bb4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10b      	bne.n	800bafe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800baf4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800baf6:	69bb      	ldr	r3, [r7, #24]
 800baf8:	3302      	adds	r3, #2
 800bafa:	61bb      	str	r3, [r7, #24]
 800bafc:	e007      	b.n	800bb0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	781a      	ldrb	r2, [r3, #0]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	3b01      	subs	r3, #1
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1cf      	bne.n	800bac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2140      	movs	r1, #64	; 0x40
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fb6a 	bl	800c20a <UART_WaitOnFlagUntilTimeout>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e006      	b.n	800bb4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	e000      	b.n	800bb4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bb4c:	2302      	movs	r3, #2
  }
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	4613      	mov	r3, r2
 800bb64:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b20      	cmp	r3, #32
 800bb70:	d153      	bne.n	800bc1a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <HAL_UART_Transmit_DMA+0x26>
 800bb78:	88fb      	ldrh	r3, [r7, #6]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e04c      	b.n	800bc1c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d101      	bne.n	800bb90 <HAL_UART_Transmit_DMA+0x38>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	e045      	b.n	800bc1c <HAL_UART_Transmit_DMA+0xc4>
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2201      	movs	r2, #1
 800bb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	88fa      	ldrh	r2, [r7, #6]
 800bba2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	88fa      	ldrh	r2, [r7, #6]
 800bba8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2221      	movs	r2, #33	; 0x21
 800bbb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbbc:	4a19      	ldr	r2, [pc, #100]	; (800bc24 <HAL_UART_Transmit_DMA+0xcc>)
 800bbbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc4:	4a18      	ldr	r2, [pc, #96]	; (800bc28 <HAL_UART_Transmit_DMA+0xd0>)
 800bbc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbcc:	4a17      	ldr	r2, [pc, #92]	; (800bc2c <HAL_UART_Transmit_DMA+0xd4>)
 800bbce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800bbd8:	f107 0308 	add.w	r3, r7, #8
 800bbdc:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	6819      	ldr	r1, [r3, #0]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	3304      	adds	r3, #4
 800bbec:	461a      	mov	r2, r3
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	f7fc fec2 	bl	8008978 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbfc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	695a      	ldr	r2, [r3, #20]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc14:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	e000      	b.n	800bc1c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800bc1a:	2302      	movs	r3, #2
  }
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	0800c03d 	.word	0x0800c03d
 800bc28:	0800c08f 	.word	0x0800c08f
 800bc2c:	0800c177 	.word	0x0800c177

0800bc30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	2b20      	cmp	r3, #32
 800bc48:	d11d      	bne.n	800bc86 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <HAL_UART_Receive_DMA+0x26>
 800bc50:	88fb      	ldrh	r3, [r7, #6]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d101      	bne.n	800bc5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e016      	b.n	800bc88 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d101      	bne.n	800bc68 <HAL_UART_Receive_DMA+0x38>
 800bc64:	2302      	movs	r3, #2
 800bc66:	e00f      	b.n	800bc88 <HAL_UART_Receive_DMA+0x58>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800bc76:	88fb      	ldrh	r3, [r7, #6]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	68b9      	ldr	r1, [r7, #8]
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f000 fb0f 	bl	800c2a0 <UART_Start_Receive_DMA>
 800bc82:	4603      	mov	r3, r0
 800bc84:	e000      	b.n	800bc88 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bc86:	2302      	movs	r3, #2
  }
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08a      	sub	sp, #40	; 0x28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d10d      	bne.n	800bce2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	f003 0320 	and.w	r3, r3, #32
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d008      	beq.n	800bce2 <HAL_UART_IRQHandler+0x52>
 800bcd0:	6a3b      	ldr	r3, [r7, #32]
 800bcd2:	f003 0320 	and.w	r3, r3, #32
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fc03 	bl	800c4e6 <UART_Receive_IT>
      return;
 800bce0:	e17c      	b.n	800bfdc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 80b1 	beq.w	800be4c <HAL_UART_IRQHandler+0x1bc>
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d105      	bne.n	800bd00 <HAL_UART_IRQHandler+0x70>
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 80a6 	beq.w	800be4c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00a      	beq.n	800bd20 <HAL_UART_IRQHandler+0x90>
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d005      	beq.n	800bd20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd18:	f043 0201 	orr.w	r2, r3, #1
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	f003 0304 	and.w	r3, r3, #4
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <HAL_UART_IRQHandler+0xb0>
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	f003 0301 	and.w	r3, r3, #1
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d005      	beq.n	800bd40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd38:	f043 0202 	orr.w	r2, r3, #2
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	f003 0302 	and.w	r3, r3, #2
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d00a      	beq.n	800bd60 <HAL_UART_IRQHandler+0xd0>
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d005      	beq.n	800bd60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd58:	f043 0204 	orr.w	r2, r3, #4
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	f003 0308 	and.w	r3, r3, #8
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00f      	beq.n	800bd8a <HAL_UART_IRQHandler+0xfa>
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	f003 0320 	and.w	r3, r3, #32
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d104      	bne.n	800bd7e <HAL_UART_IRQHandler+0xee>
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d005      	beq.n	800bd8a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd82:	f043 0208 	orr.w	r2, r3, #8
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 811f 	beq.w	800bfd2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	f003 0320 	and.w	r3, r3, #32
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d007      	beq.n	800bdae <HAL_UART_IRQHandler+0x11e>
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	f003 0320 	and.w	r3, r3, #32
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d002      	beq.n	800bdae <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fb9c 	bl	800c4e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdb8:	2b40      	cmp	r3, #64	; 0x40
 800bdba:	bf0c      	ite	eq
 800bdbc:	2301      	moveq	r3, #1
 800bdbe:	2300      	movne	r3, #0
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc8:	f003 0308 	and.w	r3, r3, #8
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d102      	bne.n	800bdd6 <HAL_UART_IRQHandler+0x146>
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d031      	beq.n	800be3a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fadc 	bl	800c394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	695b      	ldr	r3, [r3, #20]
 800bde2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde6:	2b40      	cmp	r3, #64	; 0x40
 800bde8:	d123      	bne.n	800be32 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	695a      	ldr	r2, [r3, #20]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdf8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d013      	beq.n	800be2a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	4a77      	ldr	r2, [pc, #476]	; (800bfe4 <HAL_UART_IRQHandler+0x354>)
 800be08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fc fe7a 	bl	8008b08 <HAL_DMA_Abort_IT>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d016      	beq.n	800be48 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be28:	e00e      	b.n	800be48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f8f0 	bl	800c010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be30:	e00a      	b.n	800be48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 f8ec 	bl	800c010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be38:	e006      	b.n	800be48 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f8e8 	bl	800c010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be46:	e0c4      	b.n	800bfd2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be48:	bf00      	nop
    return;
 800be4a:	e0c2      	b.n	800bfd2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be50:	2b01      	cmp	r3, #1
 800be52:	f040 80a2 	bne.w	800bf9a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	f003 0310 	and.w	r3, r3, #16
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 809c 	beq.w	800bf9a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800be62:	6a3b      	ldr	r3, [r7, #32]
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 8096 	beq.w	800bf9a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	60fb      	str	r3, [r7, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	60fb      	str	r3, [r7, #12]
 800be82:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8e:	2b40      	cmp	r3, #64	; 0x40
 800be90:	d14f      	bne.n	800bf32 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800be9c:	8a3b      	ldrh	r3, [r7, #16]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f000 8099 	beq.w	800bfd6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bea8:	8a3a      	ldrh	r2, [r7, #16]
 800beaa:	429a      	cmp	r2, r3
 800beac:	f080 8093 	bcs.w	800bfd6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	8a3a      	ldrh	r2, [r7, #16]
 800beb4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec0:	d02b      	beq.n	800bf1a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	68da      	ldr	r2, [r3, #12]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bed0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	695a      	ldr	r2, [r3, #20]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0201 	bic.w	r2, r2, #1
 800bee0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	695a      	ldr	r2, [r3, #20]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bef0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	68da      	ldr	r2, [r3, #12]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f022 0210 	bic.w	r2, r2, #16
 800bf0e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7fc fd87 	bl	8008a28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f87a 	bl	800c024 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bf30:	e051      	b.n	800bfd6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	1ad3      	subs	r3, r2, r3
 800bf3e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d047      	beq.n	800bfda <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800bf4a:	8a7b      	ldrh	r3, [r7, #18]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d044      	beq.n	800bfda <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68da      	ldr	r2, [r3, #12]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bf5e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	695a      	ldr	r2, [r3, #20]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f022 0201 	bic.w	r2, r2, #1
 800bf6e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68da      	ldr	r2, [r3, #12]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f022 0210 	bic.w	r2, r2, #16
 800bf8c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf8e:	8a7b      	ldrh	r3, [r7, #18]
 800bf90:	4619      	mov	r1, r3
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f846 	bl	800c024 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800bf98:	e01f      	b.n	800bfda <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d008      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x326>
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d003      	beq.n	800bfb6 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fa31 	bl	800c416 <UART_Transmit_IT>
    return;
 800bfb4:	e012      	b.n	800bfdc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00d      	beq.n	800bfdc <HAL_UART_IRQHandler+0x34c>
 800bfc0:	6a3b      	ldr	r3, [r7, #32]
 800bfc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d008      	beq.n	800bfdc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa73 	bl	800c4b6 <UART_EndTransmit_IT>
    return;
 800bfd0:	e004      	b.n	800bfdc <HAL_UART_IRQHandler+0x34c>
    return;
 800bfd2:	bf00      	nop
 800bfd4:	e002      	b.n	800bfdc <HAL_UART_IRQHandler+0x34c>
      return;
 800bfd6:	bf00      	nop
 800bfd8:	e000      	b.n	800bfdc <HAL_UART_IRQHandler+0x34c>
      return;
 800bfda:	bf00      	nop
  }
}
 800bfdc:	3728      	adds	r7, #40	; 0x28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	0800c3ef 	.word	0x0800c3ef

0800bfe8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	460b      	mov	r3, r1
 800c02e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c054:	2b00      	cmp	r3, #0
 800c056:	d113      	bne.n	800c080 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2200      	movs	r2, #0
 800c05c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	695a      	ldr	r2, [r3, #20]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c06c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68da      	ldr	r2, [r3, #12]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c07c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c07e:	e002      	b.n	800c086 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f7f9 fd87 	bl	8005b94 <HAL_UART_TxCpltCallback>
}
 800c086:	bf00      	nop
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7ff ffa3 	bl	800bfe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0a2:	bf00      	nop
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b084      	sub	sp, #16
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d12a      	bne.n	800c11c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68da      	ldr	r2, [r3, #12]
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c0da:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	695a      	ldr	r2, [r3, #20]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0201 	bic.w	r2, r2, #1
 800c0ea:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	695a      	ldr	r2, [r3, #20]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0fa:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d107      	bne.n	800c11c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68da      	ldr	r2, [r3, #12]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f022 0210 	bic.w	r2, r2, #16
 800c11a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c120:	2b01      	cmp	r3, #1
 800c122:	d106      	bne.n	800c132 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c128:	4619      	mov	r1, r3
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7ff ff7a 	bl	800c024 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c130:	e002      	b.n	800c138 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f7f9 fd40 	bl	8005bb8 <HAL_UART_RxCpltCallback>
}
 800c138:	bf00      	nop
 800c13a:	3710      	adds	r7, #16
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b084      	sub	sp, #16
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c14c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c152:	2b01      	cmp	r3, #1
 800c154:	d108      	bne.n	800c168 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c15a:	085b      	lsrs	r3, r3, #1
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	4619      	mov	r1, r3
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff ff5f 	bl	800c024 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c166:	e002      	b.n	800c16e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f7ff ff47 	bl	800bffc <HAL_UART_RxHalfCpltCallback>
}
 800c16e:	bf00      	nop
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b084      	sub	sp, #16
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c17e:	2300      	movs	r3, #0
 800c180:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c186:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c192:	2b80      	cmp	r3, #128	; 0x80
 800c194:	bf0c      	ite	eq
 800c196:	2301      	moveq	r3, #1
 800c198:	2300      	movne	r3, #0
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1a4:	b2db      	uxtb	r3, r3
 800c1a6:	2b21      	cmp	r3, #33	; 0x21
 800c1a8:	d108      	bne.n	800c1bc <UART_DMAError+0x46>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d005      	beq.n	800c1bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c1b6:	68b8      	ldr	r0, [r7, #8]
 800c1b8:	f000 f8d6 	bl	800c368 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1c6:	2b40      	cmp	r3, #64	; 0x40
 800c1c8:	bf0c      	ite	eq
 800c1ca:	2301      	moveq	r3, #1
 800c1cc:	2300      	movne	r3, #0
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b22      	cmp	r3, #34	; 0x22
 800c1dc:	d108      	bne.n	800c1f0 <UART_DMAError+0x7a>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c1ea:	68b8      	ldr	r0, [r7, #8]
 800c1ec:	f000 f8d2 	bl	800c394 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f4:	f043 0210 	orr.w	r2, r3, #16
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c1fc:	68b8      	ldr	r0, [r7, #8]
 800c1fe:	f7ff ff07 	bl	800c010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c202:	bf00      	nop
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b084      	sub	sp, #16
 800c20e:	af00      	add	r7, sp, #0
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	603b      	str	r3, [r7, #0]
 800c216:	4613      	mov	r3, r2
 800c218:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c21a:	e02c      	b.n	800c276 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c222:	d028      	beq.n	800c276 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d007      	beq.n	800c23a <UART_WaitOnFlagUntilTimeout+0x30>
 800c22a:	f7fc f9b5 	bl	8008598 <HAL_GetTick>
 800c22e:	4602      	mov	r2, r0
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	1ad3      	subs	r3, r2, r3
 800c234:	69ba      	ldr	r2, [r7, #24]
 800c236:	429a      	cmp	r2, r3
 800c238:	d21d      	bcs.n	800c276 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	68da      	ldr	r2, [r3, #12]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c248:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	695a      	ldr	r2, [r3, #20]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f022 0201 	bic.w	r2, r2, #1
 800c258:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2220      	movs	r2, #32
 800c266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c272:	2303      	movs	r3, #3
 800c274:	e00f      	b.n	800c296 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	4013      	ands	r3, r2
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	429a      	cmp	r2, r3
 800c284:	bf0c      	ite	eq
 800c286:	2301      	moveq	r3, #1
 800c288:	2300      	movne	r3, #0
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	461a      	mov	r2, r3
 800c28e:	79fb      	ldrb	r3, [r7, #7]
 800c290:	429a      	cmp	r2, r3
 800c292:	d0c3      	beq.n	800c21c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
	...

0800c2a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	88fa      	ldrh	r2, [r7, #6]
 800c2b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2222      	movs	r2, #34	; 0x22
 800c2c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2cc:	4a23      	ldr	r2, [pc, #140]	; (800c35c <UART_Start_Receive_DMA+0xbc>)
 800c2ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d4:	4a22      	ldr	r2, [pc, #136]	; (800c360 <UART_Start_Receive_DMA+0xc0>)
 800c2d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	4a21      	ldr	r2, [pc, #132]	; (800c364 <UART_Start_Receive_DMA+0xc4>)
 800c2de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c2e8:	f107 0308 	add.w	r3, r7, #8
 800c2ec:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	681a      	ldr	r2, [r3, #0]
 800c2fe:	88fb      	ldrh	r3, [r7, #6]
 800c300:	f7fc fb3a 	bl	8008978 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c304:	2300      	movs	r3, #0
 800c306:	613b      	str	r3, [r7, #16]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	613b      	str	r3, [r7, #16]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	613b      	str	r3, [r7, #16]
 800c318:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	68da      	ldr	r2, [r3, #12]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c330:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	695a      	ldr	r2, [r3, #20]
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f042 0201 	orr.w	r2, r2, #1
 800c340:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	695a      	ldr	r2, [r3, #20]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c350:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	0800c0ab 	.word	0x0800c0ab
 800c360:	0800c141 	.word	0x0800c141
 800c364:	0800c177 	.word	0x0800c177

0800c368 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68da      	ldr	r2, [r3, #12]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c37e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2220      	movs	r2, #32
 800c384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68da      	ldr	r2, [r3, #12]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c3aa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	695a      	ldr	r2, [r3, #20]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0201 	bic.w	r2, r2, #1
 800c3ba:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d107      	bne.n	800c3d4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	68da      	ldr	r2, [r3, #12]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f022 0210 	bic.w	r2, r2, #16
 800c3d2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2220      	movs	r2, #32
 800c3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c3e2:	bf00      	nop
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2200      	movs	r2, #0
 800c400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7ff fe01 	bl	800c010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c40e:	bf00      	nop
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c424:	b2db      	uxtb	r3, r3
 800c426:	2b21      	cmp	r3, #33	; 0x21
 800c428:	d13e      	bne.n	800c4a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c432:	d114      	bne.n	800c45e <UART_Transmit_IT+0x48>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d110      	bne.n	800c45e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a1b      	ldr	r3, [r3, #32]
 800c440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	1c9a      	adds	r2, r3, #2
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	621a      	str	r2, [r3, #32]
 800c45c:	e008      	b.n	800c470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	1c59      	adds	r1, r3, #1
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	6211      	str	r1, [r2, #32]
 800c468:	781a      	ldrb	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c474:	b29b      	uxth	r3, r3
 800c476:	3b01      	subs	r3, #1
 800c478:	b29b      	uxth	r3, r3
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	4619      	mov	r1, r3
 800c47e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c480:	2b00      	cmp	r3, #0
 800c482:	d10f      	bne.n	800c4a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68da      	ldr	r2, [r3, #12]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	68da      	ldr	r2, [r3, #12]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	e000      	b.n	800c4aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c4a8:	2302      	movs	r3, #2
  }
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3714      	adds	r7, #20
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4b6:	b580      	push	{r7, lr}
 800c4b8:	b082      	sub	sp, #8
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68da      	ldr	r2, [r3, #12]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2220      	movs	r2, #32
 800c4d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7f9 fb5c 	bl	8005b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c4dc:	2300      	movs	r3, #0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3708      	adds	r7, #8
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b084      	sub	sp, #16
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b22      	cmp	r3, #34	; 0x22
 800c4f8:	f040 8087 	bne.w	800c60a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c504:	d117      	bne.n	800c536 <UART_Receive_IT+0x50>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	691b      	ldr	r3, [r3, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d113      	bne.n	800c536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c516:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	b29b      	uxth	r3, r3
 800c520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c524:	b29a      	uxth	r2, r3
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52e:	1c9a      	adds	r2, r3, #2
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	629a      	str	r2, [r3, #40]	; 0x28
 800c534:	e026      	b.n	800c584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c53a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c548:	d007      	beq.n	800c55a <UART_Receive_IT+0x74>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d10a      	bne.n	800c568 <UART_Receive_IT+0x82>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d106      	bne.n	800c568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	b2da      	uxtb	r2, r3
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	701a      	strb	r2, [r3, #0]
 800c566:	e008      	b.n	800c57a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c574:	b2da      	uxtb	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57e:	1c5a      	adds	r2, r3, #1
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c588:	b29b      	uxth	r3, r3
 800c58a:	3b01      	subs	r3, #1
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	4619      	mov	r1, r3
 800c592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c594:	2b00      	cmp	r3, #0
 800c596:	d136      	bne.n	800c606 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	68da      	ldr	r2, [r3, #12]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0220 	bic.w	r2, r2, #32
 800c5a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	68da      	ldr	r2, [r3, #12]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c5b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	695a      	ldr	r2, [r3, #20]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 0201 	bic.w	r2, r2, #1
 800c5c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2220      	movs	r2, #32
 800c5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d10e      	bne.n	800c5f6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 0210 	bic.w	r2, r2, #16
 800c5e6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fd18 	bl	800c024 <HAL_UARTEx_RxEventCallback>
 800c5f4:	e002      	b.n	800c5fc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7f9 fade 	bl	8005bb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800c602:	2300      	movs	r3, #0
 800c604:	e002      	b.n	800c60c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800c606:	2300      	movs	r3, #0
 800c608:	e000      	b.n	800c60c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800c60a:	2302      	movs	r3, #2
  }
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c618:	b09f      	sub	sp, #124	; 0x7c
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c62a:	68d9      	ldr	r1, [r3, #12]
 800c62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	ea40 0301 	orr.w	r3, r0, r1
 800c634:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c638:	689a      	ldr	r2, [r3, #8]
 800c63a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	431a      	orrs	r2, r3
 800c640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c642:	695b      	ldr	r3, [r3, #20]
 800c644:	431a      	orrs	r2, r3
 800c646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800c64e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c658:	f021 010c 	bic.w	r1, r1, #12
 800c65c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c662:	430b      	orrs	r3, r1
 800c664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c672:	6999      	ldr	r1, [r3, #24]
 800c674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	ea40 0301 	orr.w	r3, r0, r1
 800c67c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c67e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4bc5      	ldr	r3, [pc, #788]	; (800c998 <UART_SetConfig+0x384>)
 800c684:	429a      	cmp	r2, r3
 800c686:	d004      	beq.n	800c692 <UART_SetConfig+0x7e>
 800c688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	4bc3      	ldr	r3, [pc, #780]	; (800c99c <UART_SetConfig+0x388>)
 800c68e:	429a      	cmp	r2, r3
 800c690:	d103      	bne.n	800c69a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c692:	f7fe fef7 	bl	800b484 <HAL_RCC_GetPCLK2Freq>
 800c696:	6778      	str	r0, [r7, #116]	; 0x74
 800c698:	e002      	b.n	800c6a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c69a:	f7fe fedf 	bl	800b45c <HAL_RCC_GetPCLK1Freq>
 800c69e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c6a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6a8:	f040 80b6 	bne.w	800c818 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c6ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6ae:	461c      	mov	r4, r3
 800c6b0:	f04f 0500 	mov.w	r5, #0
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	1891      	adds	r1, r2, r2
 800c6ba:	6439      	str	r1, [r7, #64]	; 0x40
 800c6bc:	415b      	adcs	r3, r3
 800c6be:	647b      	str	r3, [r7, #68]	; 0x44
 800c6c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6c4:	1912      	adds	r2, r2, r4
 800c6c6:	eb45 0303 	adc.w	r3, r5, r3
 800c6ca:	f04f 0000 	mov.w	r0, #0
 800c6ce:	f04f 0100 	mov.w	r1, #0
 800c6d2:	00d9      	lsls	r1, r3, #3
 800c6d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c6d8:	00d0      	lsls	r0, r2, #3
 800c6da:	4602      	mov	r2, r0
 800c6dc:	460b      	mov	r3, r1
 800c6de:	1911      	adds	r1, r2, r4
 800c6e0:	6639      	str	r1, [r7, #96]	; 0x60
 800c6e2:	416b      	adcs	r3, r5
 800c6e4:	667b      	str	r3, [r7, #100]	; 0x64
 800c6e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f04f 0300 	mov.w	r3, #0
 800c6f0:	1891      	adds	r1, r2, r2
 800c6f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c6f4:	415b      	adcs	r3, r3
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c6fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c700:	f7f4 fada 	bl	8000cb8 <__aeabi_uldivmod>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4ba5      	ldr	r3, [pc, #660]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c70a:	fba3 2302 	umull	r2, r3, r3, r2
 800c70e:	095b      	lsrs	r3, r3, #5
 800c710:	011e      	lsls	r6, r3, #4
 800c712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c714:	461c      	mov	r4, r3
 800c716:	f04f 0500 	mov.w	r5, #0
 800c71a:	4622      	mov	r2, r4
 800c71c:	462b      	mov	r3, r5
 800c71e:	1891      	adds	r1, r2, r2
 800c720:	6339      	str	r1, [r7, #48]	; 0x30
 800c722:	415b      	adcs	r3, r3
 800c724:	637b      	str	r3, [r7, #52]	; 0x34
 800c726:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c72a:	1912      	adds	r2, r2, r4
 800c72c:	eb45 0303 	adc.w	r3, r5, r3
 800c730:	f04f 0000 	mov.w	r0, #0
 800c734:	f04f 0100 	mov.w	r1, #0
 800c738:	00d9      	lsls	r1, r3, #3
 800c73a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c73e:	00d0      	lsls	r0, r2, #3
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	1911      	adds	r1, r2, r4
 800c746:	65b9      	str	r1, [r7, #88]	; 0x58
 800c748:	416b      	adcs	r3, r5
 800c74a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	461a      	mov	r2, r3
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	1891      	adds	r1, r2, r2
 800c758:	62b9      	str	r1, [r7, #40]	; 0x28
 800c75a:	415b      	adcs	r3, r3
 800c75c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c75e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c762:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c766:	f7f4 faa7 	bl	8000cb8 <__aeabi_uldivmod>
 800c76a:	4602      	mov	r2, r0
 800c76c:	460b      	mov	r3, r1
 800c76e:	4b8c      	ldr	r3, [pc, #560]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c770:	fba3 1302 	umull	r1, r3, r3, r2
 800c774:	095b      	lsrs	r3, r3, #5
 800c776:	2164      	movs	r1, #100	; 0x64
 800c778:	fb01 f303 	mul.w	r3, r1, r3
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	3332      	adds	r3, #50	; 0x32
 800c782:	4a87      	ldr	r2, [pc, #540]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c784:	fba2 2303 	umull	r2, r3, r2, r3
 800c788:	095b      	lsrs	r3, r3, #5
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c790:	441e      	add	r6, r3
 800c792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c794:	4618      	mov	r0, r3
 800c796:	f04f 0100 	mov.w	r1, #0
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	1894      	adds	r4, r2, r2
 800c7a0:	623c      	str	r4, [r7, #32]
 800c7a2:	415b      	adcs	r3, r3
 800c7a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c7a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7aa:	1812      	adds	r2, r2, r0
 800c7ac:	eb41 0303 	adc.w	r3, r1, r3
 800c7b0:	f04f 0400 	mov.w	r4, #0
 800c7b4:	f04f 0500 	mov.w	r5, #0
 800c7b8:	00dd      	lsls	r5, r3, #3
 800c7ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c7be:	00d4      	lsls	r4, r2, #3
 800c7c0:	4622      	mov	r2, r4
 800c7c2:	462b      	mov	r3, r5
 800c7c4:	1814      	adds	r4, r2, r0
 800c7c6:	653c      	str	r4, [r7, #80]	; 0x50
 800c7c8:	414b      	adcs	r3, r1
 800c7ca:	657b      	str	r3, [r7, #84]	; 0x54
 800c7cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	f04f 0300 	mov.w	r3, #0
 800c7d6:	1891      	adds	r1, r2, r2
 800c7d8:	61b9      	str	r1, [r7, #24]
 800c7da:	415b      	adcs	r3, r3
 800c7dc:	61fb      	str	r3, [r7, #28]
 800c7de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c7e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c7e6:	f7f4 fa67 	bl	8000cb8 <__aeabi_uldivmod>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4b6c      	ldr	r3, [pc, #432]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c7f0:	fba3 1302 	umull	r1, r3, r3, r2
 800c7f4:	095b      	lsrs	r3, r3, #5
 800c7f6:	2164      	movs	r1, #100	; 0x64
 800c7f8:	fb01 f303 	mul.w	r3, r1, r3
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	00db      	lsls	r3, r3, #3
 800c800:	3332      	adds	r3, #50	; 0x32
 800c802:	4a67      	ldr	r2, [pc, #412]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c804:	fba2 2303 	umull	r2, r3, r2, r3
 800c808:	095b      	lsrs	r3, r3, #5
 800c80a:	f003 0207 	and.w	r2, r3, #7
 800c80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4432      	add	r2, r6
 800c814:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c816:	e0b9      	b.n	800c98c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c81a:	461c      	mov	r4, r3
 800c81c:	f04f 0500 	mov.w	r5, #0
 800c820:	4622      	mov	r2, r4
 800c822:	462b      	mov	r3, r5
 800c824:	1891      	adds	r1, r2, r2
 800c826:	6139      	str	r1, [r7, #16]
 800c828:	415b      	adcs	r3, r3
 800c82a:	617b      	str	r3, [r7, #20]
 800c82c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c830:	1912      	adds	r2, r2, r4
 800c832:	eb45 0303 	adc.w	r3, r5, r3
 800c836:	f04f 0000 	mov.w	r0, #0
 800c83a:	f04f 0100 	mov.w	r1, #0
 800c83e:	00d9      	lsls	r1, r3, #3
 800c840:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c844:	00d0      	lsls	r0, r2, #3
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	eb12 0804 	adds.w	r8, r2, r4
 800c84e:	eb43 0905 	adc.w	r9, r3, r5
 800c852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	4618      	mov	r0, r3
 800c858:	f04f 0100 	mov.w	r1, #0
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	008b      	lsls	r3, r1, #2
 800c866:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c86a:	0082      	lsls	r2, r0, #2
 800c86c:	4640      	mov	r0, r8
 800c86e:	4649      	mov	r1, r9
 800c870:	f7f4 fa22 	bl	8000cb8 <__aeabi_uldivmod>
 800c874:	4602      	mov	r2, r0
 800c876:	460b      	mov	r3, r1
 800c878:	4b49      	ldr	r3, [pc, #292]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c87a:	fba3 2302 	umull	r2, r3, r3, r2
 800c87e:	095b      	lsrs	r3, r3, #5
 800c880:	011e      	lsls	r6, r3, #4
 800c882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c884:	4618      	mov	r0, r3
 800c886:	f04f 0100 	mov.w	r1, #0
 800c88a:	4602      	mov	r2, r0
 800c88c:	460b      	mov	r3, r1
 800c88e:	1894      	adds	r4, r2, r2
 800c890:	60bc      	str	r4, [r7, #8]
 800c892:	415b      	adcs	r3, r3
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c89a:	1812      	adds	r2, r2, r0
 800c89c:	eb41 0303 	adc.w	r3, r1, r3
 800c8a0:	f04f 0400 	mov.w	r4, #0
 800c8a4:	f04f 0500 	mov.w	r5, #0
 800c8a8:	00dd      	lsls	r5, r3, #3
 800c8aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c8ae:	00d4      	lsls	r4, r2, #3
 800c8b0:	4622      	mov	r2, r4
 800c8b2:	462b      	mov	r3, r5
 800c8b4:	1814      	adds	r4, r2, r0
 800c8b6:	64bc      	str	r4, [r7, #72]	; 0x48
 800c8b8:	414b      	adcs	r3, r1
 800c8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f04f 0100 	mov.w	r1, #0
 800c8c6:	f04f 0200 	mov.w	r2, #0
 800c8ca:	f04f 0300 	mov.w	r3, #0
 800c8ce:	008b      	lsls	r3, r1, #2
 800c8d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c8d4:	0082      	lsls	r2, r0, #2
 800c8d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c8da:	f7f4 f9ed 	bl	8000cb8 <__aeabi_uldivmod>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4b2f      	ldr	r3, [pc, #188]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c8e4:	fba3 1302 	umull	r1, r3, r3, r2
 800c8e8:	095b      	lsrs	r3, r3, #5
 800c8ea:	2164      	movs	r1, #100	; 0x64
 800c8ec:	fb01 f303 	mul.w	r3, r1, r3
 800c8f0:	1ad3      	subs	r3, r2, r3
 800c8f2:	011b      	lsls	r3, r3, #4
 800c8f4:	3332      	adds	r3, #50	; 0x32
 800c8f6:	4a2a      	ldr	r2, [pc, #168]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c8f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fc:	095b      	lsrs	r3, r3, #5
 800c8fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c902:	441e      	add	r6, r3
 800c904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c906:	4618      	mov	r0, r3
 800c908:	f04f 0100 	mov.w	r1, #0
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	1894      	adds	r4, r2, r2
 800c912:	603c      	str	r4, [r7, #0]
 800c914:	415b      	adcs	r3, r3
 800c916:	607b      	str	r3, [r7, #4]
 800c918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c91c:	1812      	adds	r2, r2, r0
 800c91e:	eb41 0303 	adc.w	r3, r1, r3
 800c922:	f04f 0400 	mov.w	r4, #0
 800c926:	f04f 0500 	mov.w	r5, #0
 800c92a:	00dd      	lsls	r5, r3, #3
 800c92c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c930:	00d4      	lsls	r4, r2, #3
 800c932:	4622      	mov	r2, r4
 800c934:	462b      	mov	r3, r5
 800c936:	eb12 0a00 	adds.w	sl, r2, r0
 800c93a:	eb43 0b01 	adc.w	fp, r3, r1
 800c93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	4618      	mov	r0, r3
 800c944:	f04f 0100 	mov.w	r1, #0
 800c948:	f04f 0200 	mov.w	r2, #0
 800c94c:	f04f 0300 	mov.w	r3, #0
 800c950:	008b      	lsls	r3, r1, #2
 800c952:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c956:	0082      	lsls	r2, r0, #2
 800c958:	4650      	mov	r0, sl
 800c95a:	4659      	mov	r1, fp
 800c95c:	f7f4 f9ac 	bl	8000cb8 <__aeabi_uldivmod>
 800c960:	4602      	mov	r2, r0
 800c962:	460b      	mov	r3, r1
 800c964:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c966:	fba3 1302 	umull	r1, r3, r3, r2
 800c96a:	095b      	lsrs	r3, r3, #5
 800c96c:	2164      	movs	r1, #100	; 0x64
 800c96e:	fb01 f303 	mul.w	r3, r1, r3
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	011b      	lsls	r3, r3, #4
 800c976:	3332      	adds	r3, #50	; 0x32
 800c978:	4a09      	ldr	r2, [pc, #36]	; (800c9a0 <UART_SetConfig+0x38c>)
 800c97a:	fba2 2303 	umull	r2, r3, r2, r3
 800c97e:	095b      	lsrs	r3, r3, #5
 800c980:	f003 020f 	and.w	r2, r3, #15
 800c984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4432      	add	r2, r6
 800c98a:	609a      	str	r2, [r3, #8]
}
 800c98c:	bf00      	nop
 800c98e:	377c      	adds	r7, #124	; 0x7c
 800c990:	46bd      	mov	sp, r7
 800c992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c996:	bf00      	nop
 800c998:	40011000 	.word	0x40011000
 800c99c:	40011400 	.word	0x40011400
 800c9a0:	51eb851f 	.word	0x51eb851f

0800c9a4 <__cxa_pure_virtual>:
 800c9a4:	b508      	push	{r3, lr}
 800c9a6:	f000 f80d 	bl	800c9c4 <_ZSt9terminatev>

0800c9aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c9aa:	b508      	push	{r3, lr}
 800c9ac:	4780      	blx	r0
 800c9ae:	f000 f80e 	bl	800c9ce <abort>
	...

0800c9b4 <_ZSt13get_terminatev>:
 800c9b4:	4b02      	ldr	r3, [pc, #8]	; (800c9c0 <_ZSt13get_terminatev+0xc>)
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	f3bf 8f5b 	dmb	ish
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20000ed8 	.word	0x20000ed8

0800c9c4 <_ZSt9terminatev>:
 800c9c4:	b508      	push	{r3, lr}
 800c9c6:	f7ff fff5 	bl	800c9b4 <_ZSt13get_terminatev>
 800c9ca:	f7ff ffee 	bl	800c9aa <_ZN10__cxxabiv111__terminateEPFvvE>

0800c9ce <abort>:
 800c9ce:	b508      	push	{r3, lr}
 800c9d0:	2006      	movs	r0, #6
 800c9d2:	f000 fd6b 	bl	800d4ac <raise>
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	f7fb faa8 	bl	8007f2c <_exit>

0800c9dc <__errno>:
 800c9dc:	4b01      	ldr	r3, [pc, #4]	; (800c9e4 <__errno+0x8>)
 800c9de:	6818      	ldr	r0, [r3, #0]
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	20000edc 	.word	0x20000edc

0800c9e8 <__libc_init_array>:
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	4d0d      	ldr	r5, [pc, #52]	; (800ca20 <__libc_init_array+0x38>)
 800c9ec:	4c0d      	ldr	r4, [pc, #52]	; (800ca24 <__libc_init_array+0x3c>)
 800c9ee:	1b64      	subs	r4, r4, r5
 800c9f0:	10a4      	asrs	r4, r4, #2
 800c9f2:	2600      	movs	r6, #0
 800c9f4:	42a6      	cmp	r6, r4
 800c9f6:	d109      	bne.n	800ca0c <__libc_init_array+0x24>
 800c9f8:	4d0b      	ldr	r5, [pc, #44]	; (800ca28 <__libc_init_array+0x40>)
 800c9fa:	4c0c      	ldr	r4, [pc, #48]	; (800ca2c <__libc_init_array+0x44>)
 800c9fc:	f002 ff5a 	bl	800f8b4 <_init>
 800ca00:	1b64      	subs	r4, r4, r5
 800ca02:	10a4      	asrs	r4, r4, #2
 800ca04:	2600      	movs	r6, #0
 800ca06:	42a6      	cmp	r6, r4
 800ca08:	d105      	bne.n	800ca16 <__libc_init_array+0x2e>
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca10:	4798      	blx	r3
 800ca12:	3601      	adds	r6, #1
 800ca14:	e7ee      	b.n	800c9f4 <__libc_init_array+0xc>
 800ca16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca1a:	4798      	blx	r3
 800ca1c:	3601      	adds	r6, #1
 800ca1e:	e7f2      	b.n	800ca06 <__libc_init_array+0x1e>
 800ca20:	08010404 	.word	0x08010404
 800ca24:	08010404 	.word	0x08010404
 800ca28:	08010404 	.word	0x08010404
 800ca2c:	0801040c 	.word	0x0801040c

0800ca30 <memcpy>:
 800ca30:	440a      	add	r2, r1
 800ca32:	4291      	cmp	r1, r2
 800ca34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ca38:	d100      	bne.n	800ca3c <memcpy+0xc>
 800ca3a:	4770      	bx	lr
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca46:	4291      	cmp	r1, r2
 800ca48:	d1f9      	bne.n	800ca3e <memcpy+0xe>
 800ca4a:	bd10      	pop	{r4, pc}

0800ca4c <memset>:
 800ca4c:	4402      	add	r2, r0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d100      	bne.n	800ca56 <memset+0xa>
 800ca54:	4770      	bx	lr
 800ca56:	f803 1b01 	strb.w	r1, [r3], #1
 800ca5a:	e7f9      	b.n	800ca50 <memset+0x4>

0800ca5c <__cvt>:
 800ca5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca60:	ec55 4b10 	vmov	r4, r5, d0
 800ca64:	2d00      	cmp	r5, #0
 800ca66:	460e      	mov	r6, r1
 800ca68:	4619      	mov	r1, r3
 800ca6a:	462b      	mov	r3, r5
 800ca6c:	bfbb      	ittet	lt
 800ca6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca72:	461d      	movlt	r5, r3
 800ca74:	2300      	movge	r3, #0
 800ca76:	232d      	movlt	r3, #45	; 0x2d
 800ca78:	700b      	strb	r3, [r1, #0]
 800ca7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca80:	4691      	mov	r9, r2
 800ca82:	f023 0820 	bic.w	r8, r3, #32
 800ca86:	bfbc      	itt	lt
 800ca88:	4622      	movlt	r2, r4
 800ca8a:	4614      	movlt	r4, r2
 800ca8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca90:	d005      	beq.n	800ca9e <__cvt+0x42>
 800ca92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca96:	d100      	bne.n	800ca9a <__cvt+0x3e>
 800ca98:	3601      	adds	r6, #1
 800ca9a:	2102      	movs	r1, #2
 800ca9c:	e000      	b.n	800caa0 <__cvt+0x44>
 800ca9e:	2103      	movs	r1, #3
 800caa0:	ab03      	add	r3, sp, #12
 800caa2:	9301      	str	r3, [sp, #4]
 800caa4:	ab02      	add	r3, sp, #8
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	ec45 4b10 	vmov	d0, r4, r5
 800caac:	4653      	mov	r3, sl
 800caae:	4632      	mov	r2, r6
 800cab0:	f000 fe9a 	bl	800d7e8 <_dtoa_r>
 800cab4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cab8:	4607      	mov	r7, r0
 800caba:	d102      	bne.n	800cac2 <__cvt+0x66>
 800cabc:	f019 0f01 	tst.w	r9, #1
 800cac0:	d022      	beq.n	800cb08 <__cvt+0xac>
 800cac2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cac6:	eb07 0906 	add.w	r9, r7, r6
 800caca:	d110      	bne.n	800caee <__cvt+0x92>
 800cacc:	783b      	ldrb	r3, [r7, #0]
 800cace:	2b30      	cmp	r3, #48	; 0x30
 800cad0:	d10a      	bne.n	800cae8 <__cvt+0x8c>
 800cad2:	2200      	movs	r2, #0
 800cad4:	2300      	movs	r3, #0
 800cad6:	4620      	mov	r0, r4
 800cad8:	4629      	mov	r1, r5
 800cada:	f7f4 f80d 	bl	8000af8 <__aeabi_dcmpeq>
 800cade:	b918      	cbnz	r0, 800cae8 <__cvt+0x8c>
 800cae0:	f1c6 0601 	rsb	r6, r6, #1
 800cae4:	f8ca 6000 	str.w	r6, [sl]
 800cae8:	f8da 3000 	ldr.w	r3, [sl]
 800caec:	4499      	add	r9, r3
 800caee:	2200      	movs	r2, #0
 800caf0:	2300      	movs	r3, #0
 800caf2:	4620      	mov	r0, r4
 800caf4:	4629      	mov	r1, r5
 800caf6:	f7f3 ffff 	bl	8000af8 <__aeabi_dcmpeq>
 800cafa:	b108      	cbz	r0, 800cb00 <__cvt+0xa4>
 800cafc:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb00:	2230      	movs	r2, #48	; 0x30
 800cb02:	9b03      	ldr	r3, [sp, #12]
 800cb04:	454b      	cmp	r3, r9
 800cb06:	d307      	bcc.n	800cb18 <__cvt+0xbc>
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb0c:	1bdb      	subs	r3, r3, r7
 800cb0e:	4638      	mov	r0, r7
 800cb10:	6013      	str	r3, [r2, #0]
 800cb12:	b004      	add	sp, #16
 800cb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb18:	1c59      	adds	r1, r3, #1
 800cb1a:	9103      	str	r1, [sp, #12]
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	e7f0      	b.n	800cb02 <__cvt+0xa6>

0800cb20 <__exponent>:
 800cb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb22:	4603      	mov	r3, r0
 800cb24:	2900      	cmp	r1, #0
 800cb26:	bfb8      	it	lt
 800cb28:	4249      	neglt	r1, r1
 800cb2a:	f803 2b02 	strb.w	r2, [r3], #2
 800cb2e:	bfb4      	ite	lt
 800cb30:	222d      	movlt	r2, #45	; 0x2d
 800cb32:	222b      	movge	r2, #43	; 0x2b
 800cb34:	2909      	cmp	r1, #9
 800cb36:	7042      	strb	r2, [r0, #1]
 800cb38:	dd2a      	ble.n	800cb90 <__exponent+0x70>
 800cb3a:	f10d 0407 	add.w	r4, sp, #7
 800cb3e:	46a4      	mov	ip, r4
 800cb40:	270a      	movs	r7, #10
 800cb42:	46a6      	mov	lr, r4
 800cb44:	460a      	mov	r2, r1
 800cb46:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb4a:	fb07 1516 	mls	r5, r7, r6, r1
 800cb4e:	3530      	adds	r5, #48	; 0x30
 800cb50:	2a63      	cmp	r2, #99	; 0x63
 800cb52:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800cb56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	dcf1      	bgt.n	800cb42 <__exponent+0x22>
 800cb5e:	3130      	adds	r1, #48	; 0x30
 800cb60:	f1ae 0502 	sub.w	r5, lr, #2
 800cb64:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb68:	1c44      	adds	r4, r0, #1
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4561      	cmp	r1, ip
 800cb6e:	d30a      	bcc.n	800cb86 <__exponent+0x66>
 800cb70:	f10d 0209 	add.w	r2, sp, #9
 800cb74:	eba2 020e 	sub.w	r2, r2, lr
 800cb78:	4565      	cmp	r5, ip
 800cb7a:	bf88      	it	hi
 800cb7c:	2200      	movhi	r2, #0
 800cb7e:	4413      	add	r3, r2
 800cb80:	1a18      	subs	r0, r3, r0
 800cb82:	b003      	add	sp, #12
 800cb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb8e:	e7ed      	b.n	800cb6c <__exponent+0x4c>
 800cb90:	2330      	movs	r3, #48	; 0x30
 800cb92:	3130      	adds	r1, #48	; 0x30
 800cb94:	7083      	strb	r3, [r0, #2]
 800cb96:	70c1      	strb	r1, [r0, #3]
 800cb98:	1d03      	adds	r3, r0, #4
 800cb9a:	e7f1      	b.n	800cb80 <__exponent+0x60>

0800cb9c <_printf_float>:
 800cb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cba0:	ed2d 8b02 	vpush	{d8}
 800cba4:	b08d      	sub	sp, #52	; 0x34
 800cba6:	460c      	mov	r4, r1
 800cba8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cbac:	4616      	mov	r6, r2
 800cbae:	461f      	mov	r7, r3
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	f001 fdbd 	bl	800e730 <_localeconv_r>
 800cbb6:	f8d0 a000 	ldr.w	sl, [r0]
 800cbba:	4650      	mov	r0, sl
 800cbbc:	f7f3 fb1a 	bl	80001f4 <strlen>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	930a      	str	r3, [sp, #40]	; 0x28
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	9305      	str	r3, [sp, #20]
 800cbc8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbcc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cbd0:	3307      	adds	r3, #7
 800cbd2:	f023 0307 	bic.w	r3, r3, #7
 800cbd6:	f103 0208 	add.w	r2, r3, #8
 800cbda:	f8c8 2000 	str.w	r2, [r8]
 800cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbe6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cbea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbee:	9307      	str	r3, [sp, #28]
 800cbf0:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbf4:	ee08 0a10 	vmov	s16, r0
 800cbf8:	4b9f      	ldr	r3, [pc, #636]	; (800ce78 <_printf_float+0x2dc>)
 800cbfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc02:	f7f3 ffab 	bl	8000b5c <__aeabi_dcmpun>
 800cc06:	bb88      	cbnz	r0, 800cc6c <_printf_float+0xd0>
 800cc08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc0c:	4b9a      	ldr	r3, [pc, #616]	; (800ce78 <_printf_float+0x2dc>)
 800cc0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc12:	f7f3 ff85 	bl	8000b20 <__aeabi_dcmple>
 800cc16:	bb48      	cbnz	r0, 800cc6c <_printf_float+0xd0>
 800cc18:	2200      	movs	r2, #0
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4640      	mov	r0, r8
 800cc1e:	4649      	mov	r1, r9
 800cc20:	f7f3 ff74 	bl	8000b0c <__aeabi_dcmplt>
 800cc24:	b110      	cbz	r0, 800cc2c <_printf_float+0x90>
 800cc26:	232d      	movs	r3, #45	; 0x2d
 800cc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc2c:	4b93      	ldr	r3, [pc, #588]	; (800ce7c <_printf_float+0x2e0>)
 800cc2e:	4894      	ldr	r0, [pc, #592]	; (800ce80 <_printf_float+0x2e4>)
 800cc30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc34:	bf94      	ite	ls
 800cc36:	4698      	movls	r8, r3
 800cc38:	4680      	movhi	r8, r0
 800cc3a:	2303      	movs	r3, #3
 800cc3c:	6123      	str	r3, [r4, #16]
 800cc3e:	9b05      	ldr	r3, [sp, #20]
 800cc40:	f023 0204 	bic.w	r2, r3, #4
 800cc44:	6022      	str	r2, [r4, #0]
 800cc46:	f04f 0900 	mov.w	r9, #0
 800cc4a:	9700      	str	r7, [sp, #0]
 800cc4c:	4633      	mov	r3, r6
 800cc4e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc50:	4621      	mov	r1, r4
 800cc52:	4628      	mov	r0, r5
 800cc54:	f000 f9d8 	bl	800d008 <_printf_common>
 800cc58:	3001      	adds	r0, #1
 800cc5a:	f040 8090 	bne.w	800cd7e <_printf_float+0x1e2>
 800cc5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc62:	b00d      	add	sp, #52	; 0x34
 800cc64:	ecbd 8b02 	vpop	{d8}
 800cc68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc6c:	4642      	mov	r2, r8
 800cc6e:	464b      	mov	r3, r9
 800cc70:	4640      	mov	r0, r8
 800cc72:	4649      	mov	r1, r9
 800cc74:	f7f3 ff72 	bl	8000b5c <__aeabi_dcmpun>
 800cc78:	b140      	cbz	r0, 800cc8c <_printf_float+0xf0>
 800cc7a:	464b      	mov	r3, r9
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	bfbc      	itt	lt
 800cc80:	232d      	movlt	r3, #45	; 0x2d
 800cc82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc86:	487f      	ldr	r0, [pc, #508]	; (800ce84 <_printf_float+0x2e8>)
 800cc88:	4b7f      	ldr	r3, [pc, #508]	; (800ce88 <_printf_float+0x2ec>)
 800cc8a:	e7d1      	b.n	800cc30 <_printf_float+0x94>
 800cc8c:	6863      	ldr	r3, [r4, #4]
 800cc8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc92:	9206      	str	r2, [sp, #24]
 800cc94:	1c5a      	adds	r2, r3, #1
 800cc96:	d13f      	bne.n	800cd18 <_printf_float+0x17c>
 800cc98:	2306      	movs	r3, #6
 800cc9a:	6063      	str	r3, [r4, #4]
 800cc9c:	9b05      	ldr	r3, [sp, #20]
 800cc9e:	6861      	ldr	r1, [r4, #4]
 800cca0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cca4:	2300      	movs	r3, #0
 800cca6:	9303      	str	r3, [sp, #12]
 800cca8:	ab0a      	add	r3, sp, #40	; 0x28
 800ccaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ccae:	ab09      	add	r3, sp, #36	; 0x24
 800ccb0:	ec49 8b10 	vmov	d0, r8, r9
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	6022      	str	r2, [r4, #0]
 800ccb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7ff fecd 	bl	800ca5c <__cvt>
 800ccc2:	9b06      	ldr	r3, [sp, #24]
 800ccc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccc6:	2b47      	cmp	r3, #71	; 0x47
 800ccc8:	4680      	mov	r8, r0
 800ccca:	d108      	bne.n	800ccde <_printf_float+0x142>
 800cccc:	1cc8      	adds	r0, r1, #3
 800ccce:	db02      	blt.n	800ccd6 <_printf_float+0x13a>
 800ccd0:	6863      	ldr	r3, [r4, #4]
 800ccd2:	4299      	cmp	r1, r3
 800ccd4:	dd41      	ble.n	800cd5a <_printf_float+0x1be>
 800ccd6:	f1ab 0b02 	sub.w	fp, fp, #2
 800ccda:	fa5f fb8b 	uxtb.w	fp, fp
 800ccde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cce2:	d820      	bhi.n	800cd26 <_printf_float+0x18a>
 800cce4:	3901      	subs	r1, #1
 800cce6:	465a      	mov	r2, fp
 800cce8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccec:	9109      	str	r1, [sp, #36]	; 0x24
 800ccee:	f7ff ff17 	bl	800cb20 <__exponent>
 800ccf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccf4:	1813      	adds	r3, r2, r0
 800ccf6:	2a01      	cmp	r2, #1
 800ccf8:	4681      	mov	r9, r0
 800ccfa:	6123      	str	r3, [r4, #16]
 800ccfc:	dc02      	bgt.n	800cd04 <_printf_float+0x168>
 800ccfe:	6822      	ldr	r2, [r4, #0]
 800cd00:	07d2      	lsls	r2, r2, #31
 800cd02:	d501      	bpl.n	800cd08 <_printf_float+0x16c>
 800cd04:	3301      	adds	r3, #1
 800cd06:	6123      	str	r3, [r4, #16]
 800cd08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d09c      	beq.n	800cc4a <_printf_float+0xae>
 800cd10:	232d      	movs	r3, #45	; 0x2d
 800cd12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd16:	e798      	b.n	800cc4a <_printf_float+0xae>
 800cd18:	9a06      	ldr	r2, [sp, #24]
 800cd1a:	2a47      	cmp	r2, #71	; 0x47
 800cd1c:	d1be      	bne.n	800cc9c <_printf_float+0x100>
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1bc      	bne.n	800cc9c <_printf_float+0x100>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e7b9      	b.n	800cc9a <_printf_float+0xfe>
 800cd26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd2a:	d118      	bne.n	800cd5e <_printf_float+0x1c2>
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	6863      	ldr	r3, [r4, #4]
 800cd30:	dd0b      	ble.n	800cd4a <_printf_float+0x1ae>
 800cd32:	6121      	str	r1, [r4, #16]
 800cd34:	b913      	cbnz	r3, 800cd3c <_printf_float+0x1a0>
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	07d0      	lsls	r0, r2, #31
 800cd3a:	d502      	bpl.n	800cd42 <_printf_float+0x1a6>
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	440b      	add	r3, r1
 800cd40:	6123      	str	r3, [r4, #16]
 800cd42:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd44:	f04f 0900 	mov.w	r9, #0
 800cd48:	e7de      	b.n	800cd08 <_printf_float+0x16c>
 800cd4a:	b913      	cbnz	r3, 800cd52 <_printf_float+0x1b6>
 800cd4c:	6822      	ldr	r2, [r4, #0]
 800cd4e:	07d2      	lsls	r2, r2, #31
 800cd50:	d501      	bpl.n	800cd56 <_printf_float+0x1ba>
 800cd52:	3302      	adds	r3, #2
 800cd54:	e7f4      	b.n	800cd40 <_printf_float+0x1a4>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e7f2      	b.n	800cd40 <_printf_float+0x1a4>
 800cd5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd60:	4299      	cmp	r1, r3
 800cd62:	db05      	blt.n	800cd70 <_printf_float+0x1d4>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	6121      	str	r1, [r4, #16]
 800cd68:	07d8      	lsls	r0, r3, #31
 800cd6a:	d5ea      	bpl.n	800cd42 <_printf_float+0x1a6>
 800cd6c:	1c4b      	adds	r3, r1, #1
 800cd6e:	e7e7      	b.n	800cd40 <_printf_float+0x1a4>
 800cd70:	2900      	cmp	r1, #0
 800cd72:	bfd4      	ite	le
 800cd74:	f1c1 0202 	rsble	r2, r1, #2
 800cd78:	2201      	movgt	r2, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	e7e0      	b.n	800cd40 <_printf_float+0x1a4>
 800cd7e:	6823      	ldr	r3, [r4, #0]
 800cd80:	055a      	lsls	r2, r3, #21
 800cd82:	d407      	bmi.n	800cd94 <_printf_float+0x1f8>
 800cd84:	6923      	ldr	r3, [r4, #16]
 800cd86:	4642      	mov	r2, r8
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b8      	blx	r7
 800cd8e:	3001      	adds	r0, #1
 800cd90:	d12c      	bne.n	800cdec <_printf_float+0x250>
 800cd92:	e764      	b.n	800cc5e <_printf_float+0xc2>
 800cd94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd98:	f240 80e0 	bls.w	800cf5c <_printf_float+0x3c0>
 800cd9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cda0:	2200      	movs	r2, #0
 800cda2:	2300      	movs	r3, #0
 800cda4:	f7f3 fea8 	bl	8000af8 <__aeabi_dcmpeq>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d034      	beq.n	800ce16 <_printf_float+0x27a>
 800cdac:	4a37      	ldr	r2, [pc, #220]	; (800ce8c <_printf_float+0x2f0>)
 800cdae:	2301      	movs	r3, #1
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	47b8      	blx	r7
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	f43f af51 	beq.w	800cc5e <_printf_float+0xc2>
 800cdbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	db02      	blt.n	800cdca <_printf_float+0x22e>
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	07d8      	lsls	r0, r3, #31
 800cdc8:	d510      	bpl.n	800cdec <_printf_float+0x250>
 800cdca:	ee18 3a10 	vmov	r3, s16
 800cdce:	4652      	mov	r2, sl
 800cdd0:	4631      	mov	r1, r6
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	47b8      	blx	r7
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	f43f af41 	beq.w	800cc5e <_printf_float+0xc2>
 800cddc:	f04f 0800 	mov.w	r8, #0
 800cde0:	f104 091a 	add.w	r9, r4, #26
 800cde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cde6:	3b01      	subs	r3, #1
 800cde8:	4543      	cmp	r3, r8
 800cdea:	dc09      	bgt.n	800ce00 <_printf_float+0x264>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	079b      	lsls	r3, r3, #30
 800cdf0:	f100 8105 	bmi.w	800cffe <_printf_float+0x462>
 800cdf4:	68e0      	ldr	r0, [r4, #12]
 800cdf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdf8:	4298      	cmp	r0, r3
 800cdfa:	bfb8      	it	lt
 800cdfc:	4618      	movlt	r0, r3
 800cdfe:	e730      	b.n	800cc62 <_printf_float+0xc6>
 800ce00:	2301      	movs	r3, #1
 800ce02:	464a      	mov	r2, r9
 800ce04:	4631      	mov	r1, r6
 800ce06:	4628      	mov	r0, r5
 800ce08:	47b8      	blx	r7
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	f43f af27 	beq.w	800cc5e <_printf_float+0xc2>
 800ce10:	f108 0801 	add.w	r8, r8, #1
 800ce14:	e7e6      	b.n	800cde4 <_printf_float+0x248>
 800ce16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	dc39      	bgt.n	800ce90 <_printf_float+0x2f4>
 800ce1c:	4a1b      	ldr	r2, [pc, #108]	; (800ce8c <_printf_float+0x2f0>)
 800ce1e:	2301      	movs	r3, #1
 800ce20:	4631      	mov	r1, r6
 800ce22:	4628      	mov	r0, r5
 800ce24:	47b8      	blx	r7
 800ce26:	3001      	adds	r0, #1
 800ce28:	f43f af19 	beq.w	800cc5e <_printf_float+0xc2>
 800ce2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce30:	4313      	orrs	r3, r2
 800ce32:	d102      	bne.n	800ce3a <_printf_float+0x29e>
 800ce34:	6823      	ldr	r3, [r4, #0]
 800ce36:	07d9      	lsls	r1, r3, #31
 800ce38:	d5d8      	bpl.n	800cdec <_printf_float+0x250>
 800ce3a:	ee18 3a10 	vmov	r3, s16
 800ce3e:	4652      	mov	r2, sl
 800ce40:	4631      	mov	r1, r6
 800ce42:	4628      	mov	r0, r5
 800ce44:	47b8      	blx	r7
 800ce46:	3001      	adds	r0, #1
 800ce48:	f43f af09 	beq.w	800cc5e <_printf_float+0xc2>
 800ce4c:	f04f 0900 	mov.w	r9, #0
 800ce50:	f104 0a1a 	add.w	sl, r4, #26
 800ce54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce56:	425b      	negs	r3, r3
 800ce58:	454b      	cmp	r3, r9
 800ce5a:	dc01      	bgt.n	800ce60 <_printf_float+0x2c4>
 800ce5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce5e:	e792      	b.n	800cd86 <_printf_float+0x1ea>
 800ce60:	2301      	movs	r3, #1
 800ce62:	4652      	mov	r2, sl
 800ce64:	4631      	mov	r1, r6
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f43f aef7 	beq.w	800cc5e <_printf_float+0xc2>
 800ce70:	f109 0901 	add.w	r9, r9, #1
 800ce74:	e7ee      	b.n	800ce54 <_printf_float+0x2b8>
 800ce76:	bf00      	nop
 800ce78:	7fefffff 	.word	0x7fefffff
 800ce7c:	08010020 	.word	0x08010020
 800ce80:	08010024 	.word	0x08010024
 800ce84:	0801002c 	.word	0x0801002c
 800ce88:	08010028 	.word	0x08010028
 800ce8c:	08010030 	.word	0x08010030
 800ce90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce94:	429a      	cmp	r2, r3
 800ce96:	bfa8      	it	ge
 800ce98:	461a      	movge	r2, r3
 800ce9a:	2a00      	cmp	r2, #0
 800ce9c:	4691      	mov	r9, r2
 800ce9e:	dc37      	bgt.n	800cf10 <_printf_float+0x374>
 800cea0:	f04f 0b00 	mov.w	fp, #0
 800cea4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cea8:	f104 021a 	add.w	r2, r4, #26
 800ceac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ceae:	9305      	str	r3, [sp, #20]
 800ceb0:	eba3 0309 	sub.w	r3, r3, r9
 800ceb4:	455b      	cmp	r3, fp
 800ceb6:	dc33      	bgt.n	800cf20 <_printf_float+0x384>
 800ceb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cebc:	429a      	cmp	r2, r3
 800cebe:	db3b      	blt.n	800cf38 <_printf_float+0x39c>
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	07da      	lsls	r2, r3, #31
 800cec4:	d438      	bmi.n	800cf38 <_printf_float+0x39c>
 800cec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cec8:	9b05      	ldr	r3, [sp, #20]
 800ceca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	eba2 0901 	sub.w	r9, r2, r1
 800ced2:	4599      	cmp	r9, r3
 800ced4:	bfa8      	it	ge
 800ced6:	4699      	movge	r9, r3
 800ced8:	f1b9 0f00 	cmp.w	r9, #0
 800cedc:	dc35      	bgt.n	800cf4a <_printf_float+0x3ae>
 800cede:	f04f 0800 	mov.w	r8, #0
 800cee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cee6:	f104 0a1a 	add.w	sl, r4, #26
 800ceea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ceee:	1a9b      	subs	r3, r3, r2
 800cef0:	eba3 0309 	sub.w	r3, r3, r9
 800cef4:	4543      	cmp	r3, r8
 800cef6:	f77f af79 	ble.w	800cdec <_printf_float+0x250>
 800cefa:	2301      	movs	r3, #1
 800cefc:	4652      	mov	r2, sl
 800cefe:	4631      	mov	r1, r6
 800cf00:	4628      	mov	r0, r5
 800cf02:	47b8      	blx	r7
 800cf04:	3001      	adds	r0, #1
 800cf06:	f43f aeaa 	beq.w	800cc5e <_printf_float+0xc2>
 800cf0a:	f108 0801 	add.w	r8, r8, #1
 800cf0e:	e7ec      	b.n	800ceea <_printf_float+0x34e>
 800cf10:	4613      	mov	r3, r2
 800cf12:	4631      	mov	r1, r6
 800cf14:	4642      	mov	r2, r8
 800cf16:	4628      	mov	r0, r5
 800cf18:	47b8      	blx	r7
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d1c0      	bne.n	800cea0 <_printf_float+0x304>
 800cf1e:	e69e      	b.n	800cc5e <_printf_float+0xc2>
 800cf20:	2301      	movs	r3, #1
 800cf22:	4631      	mov	r1, r6
 800cf24:	4628      	mov	r0, r5
 800cf26:	9205      	str	r2, [sp, #20]
 800cf28:	47b8      	blx	r7
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	f43f ae97 	beq.w	800cc5e <_printf_float+0xc2>
 800cf30:	9a05      	ldr	r2, [sp, #20]
 800cf32:	f10b 0b01 	add.w	fp, fp, #1
 800cf36:	e7b9      	b.n	800ceac <_printf_float+0x310>
 800cf38:	ee18 3a10 	vmov	r3, s16
 800cf3c:	4652      	mov	r2, sl
 800cf3e:	4631      	mov	r1, r6
 800cf40:	4628      	mov	r0, r5
 800cf42:	47b8      	blx	r7
 800cf44:	3001      	adds	r0, #1
 800cf46:	d1be      	bne.n	800cec6 <_printf_float+0x32a>
 800cf48:	e689      	b.n	800cc5e <_printf_float+0xc2>
 800cf4a:	9a05      	ldr	r2, [sp, #20]
 800cf4c:	464b      	mov	r3, r9
 800cf4e:	4442      	add	r2, r8
 800cf50:	4631      	mov	r1, r6
 800cf52:	4628      	mov	r0, r5
 800cf54:	47b8      	blx	r7
 800cf56:	3001      	adds	r0, #1
 800cf58:	d1c1      	bne.n	800cede <_printf_float+0x342>
 800cf5a:	e680      	b.n	800cc5e <_printf_float+0xc2>
 800cf5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf5e:	2a01      	cmp	r2, #1
 800cf60:	dc01      	bgt.n	800cf66 <_printf_float+0x3ca>
 800cf62:	07db      	lsls	r3, r3, #31
 800cf64:	d538      	bpl.n	800cfd8 <_printf_float+0x43c>
 800cf66:	2301      	movs	r3, #1
 800cf68:	4642      	mov	r2, r8
 800cf6a:	4631      	mov	r1, r6
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	47b8      	blx	r7
 800cf70:	3001      	adds	r0, #1
 800cf72:	f43f ae74 	beq.w	800cc5e <_printf_float+0xc2>
 800cf76:	ee18 3a10 	vmov	r3, s16
 800cf7a:	4652      	mov	r2, sl
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	4628      	mov	r0, r5
 800cf80:	47b8      	blx	r7
 800cf82:	3001      	adds	r0, #1
 800cf84:	f43f ae6b 	beq.w	800cc5e <_printf_float+0xc2>
 800cf88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	2300      	movs	r3, #0
 800cf90:	f7f3 fdb2 	bl	8000af8 <__aeabi_dcmpeq>
 800cf94:	b9d8      	cbnz	r0, 800cfce <_printf_float+0x432>
 800cf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf98:	f108 0201 	add.w	r2, r8, #1
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	4631      	mov	r1, r6
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	47b8      	blx	r7
 800cfa4:	3001      	adds	r0, #1
 800cfa6:	d10e      	bne.n	800cfc6 <_printf_float+0x42a>
 800cfa8:	e659      	b.n	800cc5e <_printf_float+0xc2>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4652      	mov	r2, sl
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47b8      	blx	r7
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	f43f ae52 	beq.w	800cc5e <_printf_float+0xc2>
 800cfba:	f108 0801 	add.w	r8, r8, #1
 800cfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	4543      	cmp	r3, r8
 800cfc4:	dcf1      	bgt.n	800cfaa <_printf_float+0x40e>
 800cfc6:	464b      	mov	r3, r9
 800cfc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfcc:	e6dc      	b.n	800cd88 <_printf_float+0x1ec>
 800cfce:	f04f 0800 	mov.w	r8, #0
 800cfd2:	f104 0a1a 	add.w	sl, r4, #26
 800cfd6:	e7f2      	b.n	800cfbe <_printf_float+0x422>
 800cfd8:	2301      	movs	r3, #1
 800cfda:	4642      	mov	r2, r8
 800cfdc:	e7df      	b.n	800cf9e <_printf_float+0x402>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	464a      	mov	r2, r9
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	47b8      	blx	r7
 800cfe8:	3001      	adds	r0, #1
 800cfea:	f43f ae38 	beq.w	800cc5e <_printf_float+0xc2>
 800cfee:	f108 0801 	add.w	r8, r8, #1
 800cff2:	68e3      	ldr	r3, [r4, #12]
 800cff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cff6:	1a5b      	subs	r3, r3, r1
 800cff8:	4543      	cmp	r3, r8
 800cffa:	dcf0      	bgt.n	800cfde <_printf_float+0x442>
 800cffc:	e6fa      	b.n	800cdf4 <_printf_float+0x258>
 800cffe:	f04f 0800 	mov.w	r8, #0
 800d002:	f104 0919 	add.w	r9, r4, #25
 800d006:	e7f4      	b.n	800cff2 <_printf_float+0x456>

0800d008 <_printf_common>:
 800d008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d00c:	4616      	mov	r6, r2
 800d00e:	4699      	mov	r9, r3
 800d010:	688a      	ldr	r2, [r1, #8]
 800d012:	690b      	ldr	r3, [r1, #16]
 800d014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d018:	4293      	cmp	r3, r2
 800d01a:	bfb8      	it	lt
 800d01c:	4613      	movlt	r3, r2
 800d01e:	6033      	str	r3, [r6, #0]
 800d020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d024:	4607      	mov	r7, r0
 800d026:	460c      	mov	r4, r1
 800d028:	b10a      	cbz	r2, 800d02e <_printf_common+0x26>
 800d02a:	3301      	adds	r3, #1
 800d02c:	6033      	str	r3, [r6, #0]
 800d02e:	6823      	ldr	r3, [r4, #0]
 800d030:	0699      	lsls	r1, r3, #26
 800d032:	bf42      	ittt	mi
 800d034:	6833      	ldrmi	r3, [r6, #0]
 800d036:	3302      	addmi	r3, #2
 800d038:	6033      	strmi	r3, [r6, #0]
 800d03a:	6825      	ldr	r5, [r4, #0]
 800d03c:	f015 0506 	ands.w	r5, r5, #6
 800d040:	d106      	bne.n	800d050 <_printf_common+0x48>
 800d042:	f104 0a19 	add.w	sl, r4, #25
 800d046:	68e3      	ldr	r3, [r4, #12]
 800d048:	6832      	ldr	r2, [r6, #0]
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	42ab      	cmp	r3, r5
 800d04e:	dc26      	bgt.n	800d09e <_printf_common+0x96>
 800d050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d054:	1e13      	subs	r3, r2, #0
 800d056:	6822      	ldr	r2, [r4, #0]
 800d058:	bf18      	it	ne
 800d05a:	2301      	movne	r3, #1
 800d05c:	0692      	lsls	r2, r2, #26
 800d05e:	d42b      	bmi.n	800d0b8 <_printf_common+0xb0>
 800d060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d064:	4649      	mov	r1, r9
 800d066:	4638      	mov	r0, r7
 800d068:	47c0      	blx	r8
 800d06a:	3001      	adds	r0, #1
 800d06c:	d01e      	beq.n	800d0ac <_printf_common+0xa4>
 800d06e:	6823      	ldr	r3, [r4, #0]
 800d070:	68e5      	ldr	r5, [r4, #12]
 800d072:	6832      	ldr	r2, [r6, #0]
 800d074:	f003 0306 	and.w	r3, r3, #6
 800d078:	2b04      	cmp	r3, #4
 800d07a:	bf08      	it	eq
 800d07c:	1aad      	subeq	r5, r5, r2
 800d07e:	68a3      	ldr	r3, [r4, #8]
 800d080:	6922      	ldr	r2, [r4, #16]
 800d082:	bf0c      	ite	eq
 800d084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d088:	2500      	movne	r5, #0
 800d08a:	4293      	cmp	r3, r2
 800d08c:	bfc4      	itt	gt
 800d08e:	1a9b      	subgt	r3, r3, r2
 800d090:	18ed      	addgt	r5, r5, r3
 800d092:	2600      	movs	r6, #0
 800d094:	341a      	adds	r4, #26
 800d096:	42b5      	cmp	r5, r6
 800d098:	d11a      	bne.n	800d0d0 <_printf_common+0xc8>
 800d09a:	2000      	movs	r0, #0
 800d09c:	e008      	b.n	800d0b0 <_printf_common+0xa8>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	4652      	mov	r2, sl
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	47c0      	blx	r8
 800d0a8:	3001      	adds	r0, #1
 800d0aa:	d103      	bne.n	800d0b4 <_printf_common+0xac>
 800d0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	e7c6      	b.n	800d046 <_printf_common+0x3e>
 800d0b8:	18e1      	adds	r1, r4, r3
 800d0ba:	1c5a      	adds	r2, r3, #1
 800d0bc:	2030      	movs	r0, #48	; 0x30
 800d0be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0c2:	4422      	add	r2, r4
 800d0c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0cc:	3302      	adds	r3, #2
 800d0ce:	e7c7      	b.n	800d060 <_printf_common+0x58>
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	4649      	mov	r1, r9
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	47c0      	blx	r8
 800d0da:	3001      	adds	r0, #1
 800d0dc:	d0e6      	beq.n	800d0ac <_printf_common+0xa4>
 800d0de:	3601      	adds	r6, #1
 800d0e0:	e7d9      	b.n	800d096 <_printf_common+0x8e>
	...

0800d0e4 <_printf_i>:
 800d0e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e8:	460c      	mov	r4, r1
 800d0ea:	4691      	mov	r9, r2
 800d0ec:	7e27      	ldrb	r7, [r4, #24]
 800d0ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d0f0:	2f78      	cmp	r7, #120	; 0x78
 800d0f2:	4680      	mov	r8, r0
 800d0f4:	469a      	mov	sl, r3
 800d0f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d0fa:	d807      	bhi.n	800d10c <_printf_i+0x28>
 800d0fc:	2f62      	cmp	r7, #98	; 0x62
 800d0fe:	d80a      	bhi.n	800d116 <_printf_i+0x32>
 800d100:	2f00      	cmp	r7, #0
 800d102:	f000 80d8 	beq.w	800d2b6 <_printf_i+0x1d2>
 800d106:	2f58      	cmp	r7, #88	; 0x58
 800d108:	f000 80a3 	beq.w	800d252 <_printf_i+0x16e>
 800d10c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d114:	e03a      	b.n	800d18c <_printf_i+0xa8>
 800d116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d11a:	2b15      	cmp	r3, #21
 800d11c:	d8f6      	bhi.n	800d10c <_printf_i+0x28>
 800d11e:	a001      	add	r0, pc, #4	; (adr r0, 800d124 <_printf_i+0x40>)
 800d120:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d124:	0800d17d 	.word	0x0800d17d
 800d128:	0800d191 	.word	0x0800d191
 800d12c:	0800d10d 	.word	0x0800d10d
 800d130:	0800d10d 	.word	0x0800d10d
 800d134:	0800d10d 	.word	0x0800d10d
 800d138:	0800d10d 	.word	0x0800d10d
 800d13c:	0800d191 	.word	0x0800d191
 800d140:	0800d10d 	.word	0x0800d10d
 800d144:	0800d10d 	.word	0x0800d10d
 800d148:	0800d10d 	.word	0x0800d10d
 800d14c:	0800d10d 	.word	0x0800d10d
 800d150:	0800d29d 	.word	0x0800d29d
 800d154:	0800d1c1 	.word	0x0800d1c1
 800d158:	0800d27f 	.word	0x0800d27f
 800d15c:	0800d10d 	.word	0x0800d10d
 800d160:	0800d10d 	.word	0x0800d10d
 800d164:	0800d2bf 	.word	0x0800d2bf
 800d168:	0800d10d 	.word	0x0800d10d
 800d16c:	0800d1c1 	.word	0x0800d1c1
 800d170:	0800d10d 	.word	0x0800d10d
 800d174:	0800d10d 	.word	0x0800d10d
 800d178:	0800d287 	.word	0x0800d287
 800d17c:	680b      	ldr	r3, [r1, #0]
 800d17e:	1d1a      	adds	r2, r3, #4
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	600a      	str	r2, [r1, #0]
 800d184:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d18c:	2301      	movs	r3, #1
 800d18e:	e0a3      	b.n	800d2d8 <_printf_i+0x1f4>
 800d190:	6825      	ldr	r5, [r4, #0]
 800d192:	6808      	ldr	r0, [r1, #0]
 800d194:	062e      	lsls	r6, r5, #24
 800d196:	f100 0304 	add.w	r3, r0, #4
 800d19a:	d50a      	bpl.n	800d1b2 <_printf_i+0xce>
 800d19c:	6805      	ldr	r5, [r0, #0]
 800d19e:	600b      	str	r3, [r1, #0]
 800d1a0:	2d00      	cmp	r5, #0
 800d1a2:	da03      	bge.n	800d1ac <_printf_i+0xc8>
 800d1a4:	232d      	movs	r3, #45	; 0x2d
 800d1a6:	426d      	negs	r5, r5
 800d1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1ac:	485e      	ldr	r0, [pc, #376]	; (800d328 <_printf_i+0x244>)
 800d1ae:	230a      	movs	r3, #10
 800d1b0:	e019      	b.n	800d1e6 <_printf_i+0x102>
 800d1b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d1b6:	6805      	ldr	r5, [r0, #0]
 800d1b8:	600b      	str	r3, [r1, #0]
 800d1ba:	bf18      	it	ne
 800d1bc:	b22d      	sxthne	r5, r5
 800d1be:	e7ef      	b.n	800d1a0 <_printf_i+0xbc>
 800d1c0:	680b      	ldr	r3, [r1, #0]
 800d1c2:	6825      	ldr	r5, [r4, #0]
 800d1c4:	1d18      	adds	r0, r3, #4
 800d1c6:	6008      	str	r0, [r1, #0]
 800d1c8:	0628      	lsls	r0, r5, #24
 800d1ca:	d501      	bpl.n	800d1d0 <_printf_i+0xec>
 800d1cc:	681d      	ldr	r5, [r3, #0]
 800d1ce:	e002      	b.n	800d1d6 <_printf_i+0xf2>
 800d1d0:	0669      	lsls	r1, r5, #25
 800d1d2:	d5fb      	bpl.n	800d1cc <_printf_i+0xe8>
 800d1d4:	881d      	ldrh	r5, [r3, #0]
 800d1d6:	4854      	ldr	r0, [pc, #336]	; (800d328 <_printf_i+0x244>)
 800d1d8:	2f6f      	cmp	r7, #111	; 0x6f
 800d1da:	bf0c      	ite	eq
 800d1dc:	2308      	moveq	r3, #8
 800d1de:	230a      	movne	r3, #10
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1e6:	6866      	ldr	r6, [r4, #4]
 800d1e8:	60a6      	str	r6, [r4, #8]
 800d1ea:	2e00      	cmp	r6, #0
 800d1ec:	bfa2      	ittt	ge
 800d1ee:	6821      	ldrge	r1, [r4, #0]
 800d1f0:	f021 0104 	bicge.w	r1, r1, #4
 800d1f4:	6021      	strge	r1, [r4, #0]
 800d1f6:	b90d      	cbnz	r5, 800d1fc <_printf_i+0x118>
 800d1f8:	2e00      	cmp	r6, #0
 800d1fa:	d04d      	beq.n	800d298 <_printf_i+0x1b4>
 800d1fc:	4616      	mov	r6, r2
 800d1fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800d202:	fb03 5711 	mls	r7, r3, r1, r5
 800d206:	5dc7      	ldrb	r7, [r0, r7]
 800d208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d20c:	462f      	mov	r7, r5
 800d20e:	42bb      	cmp	r3, r7
 800d210:	460d      	mov	r5, r1
 800d212:	d9f4      	bls.n	800d1fe <_printf_i+0x11a>
 800d214:	2b08      	cmp	r3, #8
 800d216:	d10b      	bne.n	800d230 <_printf_i+0x14c>
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	07df      	lsls	r7, r3, #31
 800d21c:	d508      	bpl.n	800d230 <_printf_i+0x14c>
 800d21e:	6923      	ldr	r3, [r4, #16]
 800d220:	6861      	ldr	r1, [r4, #4]
 800d222:	4299      	cmp	r1, r3
 800d224:	bfde      	ittt	le
 800d226:	2330      	movle	r3, #48	; 0x30
 800d228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d22c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d230:	1b92      	subs	r2, r2, r6
 800d232:	6122      	str	r2, [r4, #16]
 800d234:	f8cd a000 	str.w	sl, [sp]
 800d238:	464b      	mov	r3, r9
 800d23a:	aa03      	add	r2, sp, #12
 800d23c:	4621      	mov	r1, r4
 800d23e:	4640      	mov	r0, r8
 800d240:	f7ff fee2 	bl	800d008 <_printf_common>
 800d244:	3001      	adds	r0, #1
 800d246:	d14c      	bne.n	800d2e2 <_printf_i+0x1fe>
 800d248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d24c:	b004      	add	sp, #16
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d252:	4835      	ldr	r0, [pc, #212]	; (800d328 <_printf_i+0x244>)
 800d254:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d258:	6823      	ldr	r3, [r4, #0]
 800d25a:	680e      	ldr	r6, [r1, #0]
 800d25c:	061f      	lsls	r7, r3, #24
 800d25e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d262:	600e      	str	r6, [r1, #0]
 800d264:	d514      	bpl.n	800d290 <_printf_i+0x1ac>
 800d266:	07d9      	lsls	r1, r3, #31
 800d268:	bf44      	itt	mi
 800d26a:	f043 0320 	orrmi.w	r3, r3, #32
 800d26e:	6023      	strmi	r3, [r4, #0]
 800d270:	b91d      	cbnz	r5, 800d27a <_printf_i+0x196>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	f023 0320 	bic.w	r3, r3, #32
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	2310      	movs	r3, #16
 800d27c:	e7b0      	b.n	800d1e0 <_printf_i+0xfc>
 800d27e:	6823      	ldr	r3, [r4, #0]
 800d280:	f043 0320 	orr.w	r3, r3, #32
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	2378      	movs	r3, #120	; 0x78
 800d288:	4828      	ldr	r0, [pc, #160]	; (800d32c <_printf_i+0x248>)
 800d28a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d28e:	e7e3      	b.n	800d258 <_printf_i+0x174>
 800d290:	065e      	lsls	r6, r3, #25
 800d292:	bf48      	it	mi
 800d294:	b2ad      	uxthmi	r5, r5
 800d296:	e7e6      	b.n	800d266 <_printf_i+0x182>
 800d298:	4616      	mov	r6, r2
 800d29a:	e7bb      	b.n	800d214 <_printf_i+0x130>
 800d29c:	680b      	ldr	r3, [r1, #0]
 800d29e:	6826      	ldr	r6, [r4, #0]
 800d2a0:	6960      	ldr	r0, [r4, #20]
 800d2a2:	1d1d      	adds	r5, r3, #4
 800d2a4:	600d      	str	r5, [r1, #0]
 800d2a6:	0635      	lsls	r5, r6, #24
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	d501      	bpl.n	800d2b0 <_printf_i+0x1cc>
 800d2ac:	6018      	str	r0, [r3, #0]
 800d2ae:	e002      	b.n	800d2b6 <_printf_i+0x1d2>
 800d2b0:	0671      	lsls	r1, r6, #25
 800d2b2:	d5fb      	bpl.n	800d2ac <_printf_i+0x1c8>
 800d2b4:	8018      	strh	r0, [r3, #0]
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	6123      	str	r3, [r4, #16]
 800d2ba:	4616      	mov	r6, r2
 800d2bc:	e7ba      	b.n	800d234 <_printf_i+0x150>
 800d2be:	680b      	ldr	r3, [r1, #0]
 800d2c0:	1d1a      	adds	r2, r3, #4
 800d2c2:	600a      	str	r2, [r1, #0]
 800d2c4:	681e      	ldr	r6, [r3, #0]
 800d2c6:	6862      	ldr	r2, [r4, #4]
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f7f2 ffa0 	bl	8000210 <memchr>
 800d2d0:	b108      	cbz	r0, 800d2d6 <_printf_i+0x1f2>
 800d2d2:	1b80      	subs	r0, r0, r6
 800d2d4:	6060      	str	r0, [r4, #4]
 800d2d6:	6863      	ldr	r3, [r4, #4]
 800d2d8:	6123      	str	r3, [r4, #16]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e0:	e7a8      	b.n	800d234 <_printf_i+0x150>
 800d2e2:	6923      	ldr	r3, [r4, #16]
 800d2e4:	4632      	mov	r2, r6
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	4640      	mov	r0, r8
 800d2ea:	47d0      	blx	sl
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d0ab      	beq.n	800d248 <_printf_i+0x164>
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	079b      	lsls	r3, r3, #30
 800d2f4:	d413      	bmi.n	800d31e <_printf_i+0x23a>
 800d2f6:	68e0      	ldr	r0, [r4, #12]
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	4298      	cmp	r0, r3
 800d2fc:	bfb8      	it	lt
 800d2fe:	4618      	movlt	r0, r3
 800d300:	e7a4      	b.n	800d24c <_printf_i+0x168>
 800d302:	2301      	movs	r3, #1
 800d304:	4632      	mov	r2, r6
 800d306:	4649      	mov	r1, r9
 800d308:	4640      	mov	r0, r8
 800d30a:	47d0      	blx	sl
 800d30c:	3001      	adds	r0, #1
 800d30e:	d09b      	beq.n	800d248 <_printf_i+0x164>
 800d310:	3501      	adds	r5, #1
 800d312:	68e3      	ldr	r3, [r4, #12]
 800d314:	9903      	ldr	r1, [sp, #12]
 800d316:	1a5b      	subs	r3, r3, r1
 800d318:	42ab      	cmp	r3, r5
 800d31a:	dcf2      	bgt.n	800d302 <_printf_i+0x21e>
 800d31c:	e7eb      	b.n	800d2f6 <_printf_i+0x212>
 800d31e:	2500      	movs	r5, #0
 800d320:	f104 0619 	add.w	r6, r4, #25
 800d324:	e7f5      	b.n	800d312 <_printf_i+0x22e>
 800d326:	bf00      	nop
 800d328:	08010032 	.word	0x08010032
 800d32c:	08010043 	.word	0x08010043

0800d330 <iprintf>:
 800d330:	b40f      	push	{r0, r1, r2, r3}
 800d332:	4b0a      	ldr	r3, [pc, #40]	; (800d35c <iprintf+0x2c>)
 800d334:	b513      	push	{r0, r1, r4, lr}
 800d336:	681c      	ldr	r4, [r3, #0]
 800d338:	b124      	cbz	r4, 800d344 <iprintf+0x14>
 800d33a:	69a3      	ldr	r3, [r4, #24]
 800d33c:	b913      	cbnz	r3, 800d344 <iprintf+0x14>
 800d33e:	4620      	mov	r0, r4
 800d340:	f001 f958 	bl	800e5f4 <__sinit>
 800d344:	ab05      	add	r3, sp, #20
 800d346:	9a04      	ldr	r2, [sp, #16]
 800d348:	68a1      	ldr	r1, [r4, #8]
 800d34a:	9301      	str	r3, [sp, #4]
 800d34c:	4620      	mov	r0, r4
 800d34e:	f002 f847 	bl	800f3e0 <_vfiprintf_r>
 800d352:	b002      	add	sp, #8
 800d354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d358:	b004      	add	sp, #16
 800d35a:	4770      	bx	lr
 800d35c:	20000edc 	.word	0x20000edc

0800d360 <_puts_r>:
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	460e      	mov	r6, r1
 800d364:	4605      	mov	r5, r0
 800d366:	b118      	cbz	r0, 800d370 <_puts_r+0x10>
 800d368:	6983      	ldr	r3, [r0, #24]
 800d36a:	b90b      	cbnz	r3, 800d370 <_puts_r+0x10>
 800d36c:	f001 f942 	bl	800e5f4 <__sinit>
 800d370:	69ab      	ldr	r3, [r5, #24]
 800d372:	68ac      	ldr	r4, [r5, #8]
 800d374:	b913      	cbnz	r3, 800d37c <_puts_r+0x1c>
 800d376:	4628      	mov	r0, r5
 800d378:	f001 f93c 	bl	800e5f4 <__sinit>
 800d37c:	4b2c      	ldr	r3, [pc, #176]	; (800d430 <_puts_r+0xd0>)
 800d37e:	429c      	cmp	r4, r3
 800d380:	d120      	bne.n	800d3c4 <_puts_r+0x64>
 800d382:	686c      	ldr	r4, [r5, #4]
 800d384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d386:	07db      	lsls	r3, r3, #31
 800d388:	d405      	bmi.n	800d396 <_puts_r+0x36>
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	0598      	lsls	r0, r3, #22
 800d38e:	d402      	bmi.n	800d396 <_puts_r+0x36>
 800d390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d392:	f001 f9d2 	bl	800e73a <__retarget_lock_acquire_recursive>
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	0719      	lsls	r1, r3, #28
 800d39a:	d51d      	bpl.n	800d3d8 <_puts_r+0x78>
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	b1db      	cbz	r3, 800d3d8 <_puts_r+0x78>
 800d3a0:	3e01      	subs	r6, #1
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	60a3      	str	r3, [r4, #8]
 800d3ac:	bb39      	cbnz	r1, 800d3fe <_puts_r+0x9e>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	da38      	bge.n	800d424 <_puts_r+0xc4>
 800d3b2:	4622      	mov	r2, r4
 800d3b4:	210a      	movs	r1, #10
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	f000 f8c8 	bl	800d54c <__swbuf_r>
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d011      	beq.n	800d3e4 <_puts_r+0x84>
 800d3c0:	250a      	movs	r5, #10
 800d3c2:	e011      	b.n	800d3e8 <_puts_r+0x88>
 800d3c4:	4b1b      	ldr	r3, [pc, #108]	; (800d434 <_puts_r+0xd4>)
 800d3c6:	429c      	cmp	r4, r3
 800d3c8:	d101      	bne.n	800d3ce <_puts_r+0x6e>
 800d3ca:	68ac      	ldr	r4, [r5, #8]
 800d3cc:	e7da      	b.n	800d384 <_puts_r+0x24>
 800d3ce:	4b1a      	ldr	r3, [pc, #104]	; (800d438 <_puts_r+0xd8>)
 800d3d0:	429c      	cmp	r4, r3
 800d3d2:	bf08      	it	eq
 800d3d4:	68ec      	ldreq	r4, [r5, #12]
 800d3d6:	e7d5      	b.n	800d384 <_puts_r+0x24>
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4628      	mov	r0, r5
 800d3dc:	f000 f908 	bl	800d5f0 <__swsetup_r>
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d0dd      	beq.n	800d3a0 <_puts_r+0x40>
 800d3e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3ea:	07da      	lsls	r2, r3, #31
 800d3ec:	d405      	bmi.n	800d3fa <_puts_r+0x9a>
 800d3ee:	89a3      	ldrh	r3, [r4, #12]
 800d3f0:	059b      	lsls	r3, r3, #22
 800d3f2:	d402      	bmi.n	800d3fa <_puts_r+0x9a>
 800d3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3f6:	f001 f9a1 	bl	800e73c <__retarget_lock_release_recursive>
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	bd70      	pop	{r4, r5, r6, pc}
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	da04      	bge.n	800d40c <_puts_r+0xac>
 800d402:	69a2      	ldr	r2, [r4, #24]
 800d404:	429a      	cmp	r2, r3
 800d406:	dc06      	bgt.n	800d416 <_puts_r+0xb6>
 800d408:	290a      	cmp	r1, #10
 800d40a:	d004      	beq.n	800d416 <_puts_r+0xb6>
 800d40c:	6823      	ldr	r3, [r4, #0]
 800d40e:	1c5a      	adds	r2, r3, #1
 800d410:	6022      	str	r2, [r4, #0]
 800d412:	7019      	strb	r1, [r3, #0]
 800d414:	e7c5      	b.n	800d3a2 <_puts_r+0x42>
 800d416:	4622      	mov	r2, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 f897 	bl	800d54c <__swbuf_r>
 800d41e:	3001      	adds	r0, #1
 800d420:	d1bf      	bne.n	800d3a2 <_puts_r+0x42>
 800d422:	e7df      	b.n	800d3e4 <_puts_r+0x84>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	250a      	movs	r5, #10
 800d428:	1c5a      	adds	r2, r3, #1
 800d42a:	6022      	str	r2, [r4, #0]
 800d42c:	701d      	strb	r5, [r3, #0]
 800d42e:	e7db      	b.n	800d3e8 <_puts_r+0x88>
 800d430:	08010108 	.word	0x08010108
 800d434:	08010128 	.word	0x08010128
 800d438:	080100e8 	.word	0x080100e8

0800d43c <puts>:
 800d43c:	4b02      	ldr	r3, [pc, #8]	; (800d448 <puts+0xc>)
 800d43e:	4601      	mov	r1, r0
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	f7ff bf8d 	b.w	800d360 <_puts_r>
 800d446:	bf00      	nop
 800d448:	20000edc 	.word	0x20000edc

0800d44c <realloc>:
 800d44c:	4b02      	ldr	r3, [pc, #8]	; (800d458 <realloc+0xc>)
 800d44e:	460a      	mov	r2, r1
 800d450:	4601      	mov	r1, r0
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	f001 be18 	b.w	800f088 <_realloc_r>
 800d458:	20000edc 	.word	0x20000edc

0800d45c <_raise_r>:
 800d45c:	291f      	cmp	r1, #31
 800d45e:	b538      	push	{r3, r4, r5, lr}
 800d460:	4604      	mov	r4, r0
 800d462:	460d      	mov	r5, r1
 800d464:	d904      	bls.n	800d470 <_raise_r+0x14>
 800d466:	2316      	movs	r3, #22
 800d468:	6003      	str	r3, [r0, #0]
 800d46a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d46e:	bd38      	pop	{r3, r4, r5, pc}
 800d470:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d472:	b112      	cbz	r2, 800d47a <_raise_r+0x1e>
 800d474:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d478:	b94b      	cbnz	r3, 800d48e <_raise_r+0x32>
 800d47a:	4620      	mov	r0, r4
 800d47c:	f000 f830 	bl	800d4e0 <_getpid_r>
 800d480:	462a      	mov	r2, r5
 800d482:	4601      	mov	r1, r0
 800d484:	4620      	mov	r0, r4
 800d486:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d48a:	f000 b817 	b.w	800d4bc <_kill_r>
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d00a      	beq.n	800d4a8 <_raise_r+0x4c>
 800d492:	1c59      	adds	r1, r3, #1
 800d494:	d103      	bne.n	800d49e <_raise_r+0x42>
 800d496:	2316      	movs	r3, #22
 800d498:	6003      	str	r3, [r0, #0]
 800d49a:	2001      	movs	r0, #1
 800d49c:	e7e7      	b.n	800d46e <_raise_r+0x12>
 800d49e:	2400      	movs	r4, #0
 800d4a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	4798      	blx	r3
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	e7e0      	b.n	800d46e <_raise_r+0x12>

0800d4ac <raise>:
 800d4ac:	4b02      	ldr	r3, [pc, #8]	; (800d4b8 <raise+0xc>)
 800d4ae:	4601      	mov	r1, r0
 800d4b0:	6818      	ldr	r0, [r3, #0]
 800d4b2:	f7ff bfd3 	b.w	800d45c <_raise_r>
 800d4b6:	bf00      	nop
 800d4b8:	20000edc 	.word	0x20000edc

0800d4bc <_kill_r>:
 800d4bc:	b538      	push	{r3, r4, r5, lr}
 800d4be:	4d07      	ldr	r5, [pc, #28]	; (800d4dc <_kill_r+0x20>)
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4604      	mov	r4, r0
 800d4c4:	4608      	mov	r0, r1
 800d4c6:	4611      	mov	r1, r2
 800d4c8:	602b      	str	r3, [r5, #0]
 800d4ca:	f7fa fd1f 	bl	8007f0c <_kill>
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	d102      	bne.n	800d4d8 <_kill_r+0x1c>
 800d4d2:	682b      	ldr	r3, [r5, #0]
 800d4d4:	b103      	cbz	r3, 800d4d8 <_kill_r+0x1c>
 800d4d6:	6023      	str	r3, [r4, #0]
 800d4d8:	bd38      	pop	{r3, r4, r5, pc}
 800d4da:	bf00      	nop
 800d4dc:	20002e4c 	.word	0x20002e4c

0800d4e0 <_getpid_r>:
 800d4e0:	f7fa bd0c 	b.w	8007efc <_getpid>

0800d4e4 <sniprintf>:
 800d4e4:	b40c      	push	{r2, r3}
 800d4e6:	b530      	push	{r4, r5, lr}
 800d4e8:	4b17      	ldr	r3, [pc, #92]	; (800d548 <sniprintf+0x64>)
 800d4ea:	1e0c      	subs	r4, r1, #0
 800d4ec:	681d      	ldr	r5, [r3, #0]
 800d4ee:	b09d      	sub	sp, #116	; 0x74
 800d4f0:	da08      	bge.n	800d504 <sniprintf+0x20>
 800d4f2:	238b      	movs	r3, #139	; 0x8b
 800d4f4:	602b      	str	r3, [r5, #0]
 800d4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4fa:	b01d      	add	sp, #116	; 0x74
 800d4fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d500:	b002      	add	sp, #8
 800d502:	4770      	bx	lr
 800d504:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d508:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d50c:	bf14      	ite	ne
 800d50e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d512:	4623      	moveq	r3, r4
 800d514:	9304      	str	r3, [sp, #16]
 800d516:	9307      	str	r3, [sp, #28]
 800d518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d51c:	9002      	str	r0, [sp, #8]
 800d51e:	9006      	str	r0, [sp, #24]
 800d520:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d524:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d526:	ab21      	add	r3, sp, #132	; 0x84
 800d528:	a902      	add	r1, sp, #8
 800d52a:	4628      	mov	r0, r5
 800d52c:	9301      	str	r3, [sp, #4]
 800d52e:	f001 fe2d 	bl	800f18c <_svfiprintf_r>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	bfbc      	itt	lt
 800d536:	238b      	movlt	r3, #139	; 0x8b
 800d538:	602b      	strlt	r3, [r5, #0]
 800d53a:	2c00      	cmp	r4, #0
 800d53c:	d0dd      	beq.n	800d4fa <sniprintf+0x16>
 800d53e:	9b02      	ldr	r3, [sp, #8]
 800d540:	2200      	movs	r2, #0
 800d542:	701a      	strb	r2, [r3, #0]
 800d544:	e7d9      	b.n	800d4fa <sniprintf+0x16>
 800d546:	bf00      	nop
 800d548:	20000edc 	.word	0x20000edc

0800d54c <__swbuf_r>:
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	460e      	mov	r6, r1
 800d550:	4614      	mov	r4, r2
 800d552:	4605      	mov	r5, r0
 800d554:	b118      	cbz	r0, 800d55e <__swbuf_r+0x12>
 800d556:	6983      	ldr	r3, [r0, #24]
 800d558:	b90b      	cbnz	r3, 800d55e <__swbuf_r+0x12>
 800d55a:	f001 f84b 	bl	800e5f4 <__sinit>
 800d55e:	4b21      	ldr	r3, [pc, #132]	; (800d5e4 <__swbuf_r+0x98>)
 800d560:	429c      	cmp	r4, r3
 800d562:	d12b      	bne.n	800d5bc <__swbuf_r+0x70>
 800d564:	686c      	ldr	r4, [r5, #4]
 800d566:	69a3      	ldr	r3, [r4, #24]
 800d568:	60a3      	str	r3, [r4, #8]
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	071a      	lsls	r2, r3, #28
 800d56e:	d52f      	bpl.n	800d5d0 <__swbuf_r+0x84>
 800d570:	6923      	ldr	r3, [r4, #16]
 800d572:	b36b      	cbz	r3, 800d5d0 <__swbuf_r+0x84>
 800d574:	6923      	ldr	r3, [r4, #16]
 800d576:	6820      	ldr	r0, [r4, #0]
 800d578:	1ac0      	subs	r0, r0, r3
 800d57a:	6963      	ldr	r3, [r4, #20]
 800d57c:	b2f6      	uxtb	r6, r6
 800d57e:	4283      	cmp	r3, r0
 800d580:	4637      	mov	r7, r6
 800d582:	dc04      	bgt.n	800d58e <__swbuf_r+0x42>
 800d584:	4621      	mov	r1, r4
 800d586:	4628      	mov	r0, r5
 800d588:	f000 ffa0 	bl	800e4cc <_fflush_r>
 800d58c:	bb30      	cbnz	r0, 800d5dc <__swbuf_r+0x90>
 800d58e:	68a3      	ldr	r3, [r4, #8]
 800d590:	3b01      	subs	r3, #1
 800d592:	60a3      	str	r3, [r4, #8]
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	6022      	str	r2, [r4, #0]
 800d59a:	701e      	strb	r6, [r3, #0]
 800d59c:	6963      	ldr	r3, [r4, #20]
 800d59e:	3001      	adds	r0, #1
 800d5a0:	4283      	cmp	r3, r0
 800d5a2:	d004      	beq.n	800d5ae <__swbuf_r+0x62>
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	07db      	lsls	r3, r3, #31
 800d5a8:	d506      	bpl.n	800d5b8 <__swbuf_r+0x6c>
 800d5aa:	2e0a      	cmp	r6, #10
 800d5ac:	d104      	bne.n	800d5b8 <__swbuf_r+0x6c>
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f000 ff8b 	bl	800e4cc <_fflush_r>
 800d5b6:	b988      	cbnz	r0, 800d5dc <__swbuf_r+0x90>
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5bc:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <__swbuf_r+0x9c>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	d101      	bne.n	800d5c6 <__swbuf_r+0x7a>
 800d5c2:	68ac      	ldr	r4, [r5, #8]
 800d5c4:	e7cf      	b.n	800d566 <__swbuf_r+0x1a>
 800d5c6:	4b09      	ldr	r3, [pc, #36]	; (800d5ec <__swbuf_r+0xa0>)
 800d5c8:	429c      	cmp	r4, r3
 800d5ca:	bf08      	it	eq
 800d5cc:	68ec      	ldreq	r4, [r5, #12]
 800d5ce:	e7ca      	b.n	800d566 <__swbuf_r+0x1a>
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f000 f80c 	bl	800d5f0 <__swsetup_r>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d0cb      	beq.n	800d574 <__swbuf_r+0x28>
 800d5dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d5e0:	e7ea      	b.n	800d5b8 <__swbuf_r+0x6c>
 800d5e2:	bf00      	nop
 800d5e4:	08010108 	.word	0x08010108
 800d5e8:	08010128 	.word	0x08010128
 800d5ec:	080100e8 	.word	0x080100e8

0800d5f0 <__swsetup_r>:
 800d5f0:	4b32      	ldr	r3, [pc, #200]	; (800d6bc <__swsetup_r+0xcc>)
 800d5f2:	b570      	push	{r4, r5, r6, lr}
 800d5f4:	681d      	ldr	r5, [r3, #0]
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	b125      	cbz	r5, 800d606 <__swsetup_r+0x16>
 800d5fc:	69ab      	ldr	r3, [r5, #24]
 800d5fe:	b913      	cbnz	r3, 800d606 <__swsetup_r+0x16>
 800d600:	4628      	mov	r0, r5
 800d602:	f000 fff7 	bl	800e5f4 <__sinit>
 800d606:	4b2e      	ldr	r3, [pc, #184]	; (800d6c0 <__swsetup_r+0xd0>)
 800d608:	429c      	cmp	r4, r3
 800d60a:	d10f      	bne.n	800d62c <__swsetup_r+0x3c>
 800d60c:	686c      	ldr	r4, [r5, #4]
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d614:	0719      	lsls	r1, r3, #28
 800d616:	d42c      	bmi.n	800d672 <__swsetup_r+0x82>
 800d618:	06dd      	lsls	r5, r3, #27
 800d61a:	d411      	bmi.n	800d640 <__swsetup_r+0x50>
 800d61c:	2309      	movs	r3, #9
 800d61e:	6033      	str	r3, [r6, #0]
 800d620:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d624:	81a3      	strh	r3, [r4, #12]
 800d626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d62a:	e03e      	b.n	800d6aa <__swsetup_r+0xba>
 800d62c:	4b25      	ldr	r3, [pc, #148]	; (800d6c4 <__swsetup_r+0xd4>)
 800d62e:	429c      	cmp	r4, r3
 800d630:	d101      	bne.n	800d636 <__swsetup_r+0x46>
 800d632:	68ac      	ldr	r4, [r5, #8]
 800d634:	e7eb      	b.n	800d60e <__swsetup_r+0x1e>
 800d636:	4b24      	ldr	r3, [pc, #144]	; (800d6c8 <__swsetup_r+0xd8>)
 800d638:	429c      	cmp	r4, r3
 800d63a:	bf08      	it	eq
 800d63c:	68ec      	ldreq	r4, [r5, #12]
 800d63e:	e7e6      	b.n	800d60e <__swsetup_r+0x1e>
 800d640:	0758      	lsls	r0, r3, #29
 800d642:	d512      	bpl.n	800d66a <__swsetup_r+0x7a>
 800d644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d646:	b141      	cbz	r1, 800d65a <__swsetup_r+0x6a>
 800d648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d64c:	4299      	cmp	r1, r3
 800d64e:	d002      	beq.n	800d656 <__swsetup_r+0x66>
 800d650:	4630      	mov	r0, r6
 800d652:	f001 fc6f 	bl	800ef34 <_free_r>
 800d656:	2300      	movs	r3, #0
 800d658:	6363      	str	r3, [r4, #52]	; 0x34
 800d65a:	89a3      	ldrh	r3, [r4, #12]
 800d65c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d660:	81a3      	strh	r3, [r4, #12]
 800d662:	2300      	movs	r3, #0
 800d664:	6063      	str	r3, [r4, #4]
 800d666:	6923      	ldr	r3, [r4, #16]
 800d668:	6023      	str	r3, [r4, #0]
 800d66a:	89a3      	ldrh	r3, [r4, #12]
 800d66c:	f043 0308 	orr.w	r3, r3, #8
 800d670:	81a3      	strh	r3, [r4, #12]
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	b94b      	cbnz	r3, 800d68a <__swsetup_r+0x9a>
 800d676:	89a3      	ldrh	r3, [r4, #12]
 800d678:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d67c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d680:	d003      	beq.n	800d68a <__swsetup_r+0x9a>
 800d682:	4621      	mov	r1, r4
 800d684:	4630      	mov	r0, r6
 800d686:	f001 f87f 	bl	800e788 <__smakebuf_r>
 800d68a:	89a0      	ldrh	r0, [r4, #12]
 800d68c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d690:	f010 0301 	ands.w	r3, r0, #1
 800d694:	d00a      	beq.n	800d6ac <__swsetup_r+0xbc>
 800d696:	2300      	movs	r3, #0
 800d698:	60a3      	str	r3, [r4, #8]
 800d69a:	6963      	ldr	r3, [r4, #20]
 800d69c:	425b      	negs	r3, r3
 800d69e:	61a3      	str	r3, [r4, #24]
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	b943      	cbnz	r3, 800d6b6 <__swsetup_r+0xc6>
 800d6a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d6a8:	d1ba      	bne.n	800d620 <__swsetup_r+0x30>
 800d6aa:	bd70      	pop	{r4, r5, r6, pc}
 800d6ac:	0781      	lsls	r1, r0, #30
 800d6ae:	bf58      	it	pl
 800d6b0:	6963      	ldrpl	r3, [r4, #20]
 800d6b2:	60a3      	str	r3, [r4, #8]
 800d6b4:	e7f4      	b.n	800d6a0 <__swsetup_r+0xb0>
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	e7f7      	b.n	800d6aa <__swsetup_r+0xba>
 800d6ba:	bf00      	nop
 800d6bc:	20000edc 	.word	0x20000edc
 800d6c0:	08010108 	.word	0x08010108
 800d6c4:	08010128 	.word	0x08010128
 800d6c8:	080100e8 	.word	0x080100e8

0800d6cc <quorem>:
 800d6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	6903      	ldr	r3, [r0, #16]
 800d6d2:	690c      	ldr	r4, [r1, #16]
 800d6d4:	42a3      	cmp	r3, r4
 800d6d6:	4607      	mov	r7, r0
 800d6d8:	f2c0 8081 	blt.w	800d7de <quorem+0x112>
 800d6dc:	3c01      	subs	r4, #1
 800d6de:	f101 0814 	add.w	r8, r1, #20
 800d6e2:	f100 0514 	add.w	r5, r0, #20
 800d6e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d6fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d700:	fbb2 f6f3 	udiv	r6, r2, r3
 800d704:	d331      	bcc.n	800d76a <quorem+0x9e>
 800d706:	f04f 0e00 	mov.w	lr, #0
 800d70a:	4640      	mov	r0, r8
 800d70c:	46ac      	mov	ip, r5
 800d70e:	46f2      	mov	sl, lr
 800d710:	f850 2b04 	ldr.w	r2, [r0], #4
 800d714:	b293      	uxth	r3, r2
 800d716:	fb06 e303 	mla	r3, r6, r3, lr
 800d71a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d71e:	b29b      	uxth	r3, r3
 800d720:	ebaa 0303 	sub.w	r3, sl, r3
 800d724:	0c12      	lsrs	r2, r2, #16
 800d726:	f8dc a000 	ldr.w	sl, [ip]
 800d72a:	fb06 e202 	mla	r2, r6, r2, lr
 800d72e:	fa13 f38a 	uxtah	r3, r3, sl
 800d732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d736:	fa1f fa82 	uxth.w	sl, r2
 800d73a:	f8dc 2000 	ldr.w	r2, [ip]
 800d73e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d746:	b29b      	uxth	r3, r3
 800d748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d74c:	4581      	cmp	r9, r0
 800d74e:	f84c 3b04 	str.w	r3, [ip], #4
 800d752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d756:	d2db      	bcs.n	800d710 <quorem+0x44>
 800d758:	f855 300b 	ldr.w	r3, [r5, fp]
 800d75c:	b92b      	cbnz	r3, 800d76a <quorem+0x9e>
 800d75e:	9b01      	ldr	r3, [sp, #4]
 800d760:	3b04      	subs	r3, #4
 800d762:	429d      	cmp	r5, r3
 800d764:	461a      	mov	r2, r3
 800d766:	d32e      	bcc.n	800d7c6 <quorem+0xfa>
 800d768:	613c      	str	r4, [r7, #16]
 800d76a:	4638      	mov	r0, r7
 800d76c:	f001 fad2 	bl	800ed14 <__mcmp>
 800d770:	2800      	cmp	r0, #0
 800d772:	db24      	blt.n	800d7be <quorem+0xf2>
 800d774:	3601      	adds	r6, #1
 800d776:	4628      	mov	r0, r5
 800d778:	f04f 0c00 	mov.w	ip, #0
 800d77c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d780:	f8d0 e000 	ldr.w	lr, [r0]
 800d784:	b293      	uxth	r3, r2
 800d786:	ebac 0303 	sub.w	r3, ip, r3
 800d78a:	0c12      	lsrs	r2, r2, #16
 800d78c:	fa13 f38e 	uxtah	r3, r3, lr
 800d790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d798:	b29b      	uxth	r3, r3
 800d79a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d79e:	45c1      	cmp	r9, r8
 800d7a0:	f840 3b04 	str.w	r3, [r0], #4
 800d7a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d7a8:	d2e8      	bcs.n	800d77c <quorem+0xb0>
 800d7aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7b2:	b922      	cbnz	r2, 800d7be <quorem+0xf2>
 800d7b4:	3b04      	subs	r3, #4
 800d7b6:	429d      	cmp	r5, r3
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	d30a      	bcc.n	800d7d2 <quorem+0x106>
 800d7bc:	613c      	str	r4, [r7, #16]
 800d7be:	4630      	mov	r0, r6
 800d7c0:	b003      	add	sp, #12
 800d7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c6:	6812      	ldr	r2, [r2, #0]
 800d7c8:	3b04      	subs	r3, #4
 800d7ca:	2a00      	cmp	r2, #0
 800d7cc:	d1cc      	bne.n	800d768 <quorem+0x9c>
 800d7ce:	3c01      	subs	r4, #1
 800d7d0:	e7c7      	b.n	800d762 <quorem+0x96>
 800d7d2:	6812      	ldr	r2, [r2, #0]
 800d7d4:	3b04      	subs	r3, #4
 800d7d6:	2a00      	cmp	r2, #0
 800d7d8:	d1f0      	bne.n	800d7bc <quorem+0xf0>
 800d7da:	3c01      	subs	r4, #1
 800d7dc:	e7eb      	b.n	800d7b6 <quorem+0xea>
 800d7de:	2000      	movs	r0, #0
 800d7e0:	e7ee      	b.n	800d7c0 <quorem+0xf4>
 800d7e2:	0000      	movs	r0, r0
 800d7e4:	0000      	movs	r0, r0
	...

0800d7e8 <_dtoa_r>:
 800d7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ec:	ed2d 8b02 	vpush	{d8}
 800d7f0:	ec57 6b10 	vmov	r6, r7, d0
 800d7f4:	b095      	sub	sp, #84	; 0x54
 800d7f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d7f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d7fc:	9105      	str	r1, [sp, #20]
 800d7fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d802:	4604      	mov	r4, r0
 800d804:	9209      	str	r2, [sp, #36]	; 0x24
 800d806:	930f      	str	r3, [sp, #60]	; 0x3c
 800d808:	b975      	cbnz	r5, 800d828 <_dtoa_r+0x40>
 800d80a:	2010      	movs	r0, #16
 800d80c:	f000 fffc 	bl	800e808 <malloc>
 800d810:	4602      	mov	r2, r0
 800d812:	6260      	str	r0, [r4, #36]	; 0x24
 800d814:	b920      	cbnz	r0, 800d820 <_dtoa_r+0x38>
 800d816:	4bb2      	ldr	r3, [pc, #712]	; (800dae0 <_dtoa_r+0x2f8>)
 800d818:	21ea      	movs	r1, #234	; 0xea
 800d81a:	48b2      	ldr	r0, [pc, #712]	; (800dae4 <_dtoa_r+0x2fc>)
 800d81c:	f001 ff76 	bl	800f70c <__assert_func>
 800d820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d824:	6005      	str	r5, [r0, #0]
 800d826:	60c5      	str	r5, [r0, #12]
 800d828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d82a:	6819      	ldr	r1, [r3, #0]
 800d82c:	b151      	cbz	r1, 800d844 <_dtoa_r+0x5c>
 800d82e:	685a      	ldr	r2, [r3, #4]
 800d830:	604a      	str	r2, [r1, #4]
 800d832:	2301      	movs	r3, #1
 800d834:	4093      	lsls	r3, r2
 800d836:	608b      	str	r3, [r1, #8]
 800d838:	4620      	mov	r0, r4
 800d83a:	f001 f82d 	bl	800e898 <_Bfree>
 800d83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d840:	2200      	movs	r2, #0
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	1e3b      	subs	r3, r7, #0
 800d846:	bfb9      	ittee	lt
 800d848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d84c:	9303      	strlt	r3, [sp, #12]
 800d84e:	2300      	movge	r3, #0
 800d850:	f8c8 3000 	strge.w	r3, [r8]
 800d854:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d858:	4ba3      	ldr	r3, [pc, #652]	; (800dae8 <_dtoa_r+0x300>)
 800d85a:	bfbc      	itt	lt
 800d85c:	2201      	movlt	r2, #1
 800d85e:	f8c8 2000 	strlt.w	r2, [r8]
 800d862:	ea33 0309 	bics.w	r3, r3, r9
 800d866:	d11b      	bne.n	800d8a0 <_dtoa_r+0xb8>
 800d868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d86a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d86e:	6013      	str	r3, [r2, #0]
 800d870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d874:	4333      	orrs	r3, r6
 800d876:	f000 857a 	beq.w	800e36e <_dtoa_r+0xb86>
 800d87a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d87c:	b963      	cbnz	r3, 800d898 <_dtoa_r+0xb0>
 800d87e:	4b9b      	ldr	r3, [pc, #620]	; (800daec <_dtoa_r+0x304>)
 800d880:	e024      	b.n	800d8cc <_dtoa_r+0xe4>
 800d882:	4b9b      	ldr	r3, [pc, #620]	; (800daf0 <_dtoa_r+0x308>)
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	3308      	adds	r3, #8
 800d888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d88a:	6013      	str	r3, [r2, #0]
 800d88c:	9800      	ldr	r0, [sp, #0]
 800d88e:	b015      	add	sp, #84	; 0x54
 800d890:	ecbd 8b02 	vpop	{d8}
 800d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d898:	4b94      	ldr	r3, [pc, #592]	; (800daec <_dtoa_r+0x304>)
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	3303      	adds	r3, #3
 800d89e:	e7f3      	b.n	800d888 <_dtoa_r+0xa0>
 800d8a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	ec51 0b17 	vmov	r0, r1, d7
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d8b0:	f7f3 f922 	bl	8000af8 <__aeabi_dcmpeq>
 800d8b4:	4680      	mov	r8, r0
 800d8b6:	b158      	cbz	r0, 800d8d0 <_dtoa_r+0xe8>
 800d8b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 8551 	beq.w	800e368 <_dtoa_r+0xb80>
 800d8c6:	488b      	ldr	r0, [pc, #556]	; (800daf4 <_dtoa_r+0x30c>)
 800d8c8:	6018      	str	r0, [r3, #0]
 800d8ca:	1e43      	subs	r3, r0, #1
 800d8cc:	9300      	str	r3, [sp, #0]
 800d8ce:	e7dd      	b.n	800d88c <_dtoa_r+0xa4>
 800d8d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d8d4:	aa12      	add	r2, sp, #72	; 0x48
 800d8d6:	a913      	add	r1, sp, #76	; 0x4c
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f001 fabf 	bl	800ee5c <__d2b>
 800d8de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8e2:	4683      	mov	fp, r0
 800d8e4:	2d00      	cmp	r5, #0
 800d8e6:	d07c      	beq.n	800d9e2 <_dtoa_r+0x1fa>
 800d8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d8ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d8f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d8fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d902:	4b7d      	ldr	r3, [pc, #500]	; (800daf8 <_dtoa_r+0x310>)
 800d904:	2200      	movs	r2, #0
 800d906:	4630      	mov	r0, r6
 800d908:	4639      	mov	r1, r7
 800d90a:	f7f2 fcd5 	bl	80002b8 <__aeabi_dsub>
 800d90e:	a36e      	add	r3, pc, #440	; (adr r3, 800dac8 <_dtoa_r+0x2e0>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	f7f2 fe88 	bl	8000628 <__aeabi_dmul>
 800d918:	a36d      	add	r3, pc, #436	; (adr r3, 800dad0 <_dtoa_r+0x2e8>)
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	f7f2 fccd 	bl	80002bc <__adddf3>
 800d922:	4606      	mov	r6, r0
 800d924:	4628      	mov	r0, r5
 800d926:	460f      	mov	r7, r1
 800d928:	f7f2 fe14 	bl	8000554 <__aeabi_i2d>
 800d92c:	a36a      	add	r3, pc, #424	; (adr r3, 800dad8 <_dtoa_r+0x2f0>)
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	f7f2 fe79 	bl	8000628 <__aeabi_dmul>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4630      	mov	r0, r6
 800d93c:	4639      	mov	r1, r7
 800d93e:	f7f2 fcbd 	bl	80002bc <__adddf3>
 800d942:	4606      	mov	r6, r0
 800d944:	460f      	mov	r7, r1
 800d946:	f7f3 f91f 	bl	8000b88 <__aeabi_d2iz>
 800d94a:	2200      	movs	r2, #0
 800d94c:	4682      	mov	sl, r0
 800d94e:	2300      	movs	r3, #0
 800d950:	4630      	mov	r0, r6
 800d952:	4639      	mov	r1, r7
 800d954:	f7f3 f8da 	bl	8000b0c <__aeabi_dcmplt>
 800d958:	b148      	cbz	r0, 800d96e <_dtoa_r+0x186>
 800d95a:	4650      	mov	r0, sl
 800d95c:	f7f2 fdfa 	bl	8000554 <__aeabi_i2d>
 800d960:	4632      	mov	r2, r6
 800d962:	463b      	mov	r3, r7
 800d964:	f7f3 f8c8 	bl	8000af8 <__aeabi_dcmpeq>
 800d968:	b908      	cbnz	r0, 800d96e <_dtoa_r+0x186>
 800d96a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d96e:	f1ba 0f16 	cmp.w	sl, #22
 800d972:	d854      	bhi.n	800da1e <_dtoa_r+0x236>
 800d974:	4b61      	ldr	r3, [pc, #388]	; (800dafc <_dtoa_r+0x314>)
 800d976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d982:	f7f3 f8c3 	bl	8000b0c <__aeabi_dcmplt>
 800d986:	2800      	cmp	r0, #0
 800d988:	d04b      	beq.n	800da22 <_dtoa_r+0x23a>
 800d98a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d98e:	2300      	movs	r3, #0
 800d990:	930e      	str	r3, [sp, #56]	; 0x38
 800d992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d994:	1b5d      	subs	r5, r3, r5
 800d996:	1e6b      	subs	r3, r5, #1
 800d998:	9304      	str	r3, [sp, #16]
 800d99a:	bf43      	ittte	mi
 800d99c:	2300      	movmi	r3, #0
 800d99e:	f1c5 0801 	rsbmi	r8, r5, #1
 800d9a2:	9304      	strmi	r3, [sp, #16]
 800d9a4:	f04f 0800 	movpl.w	r8, #0
 800d9a8:	f1ba 0f00 	cmp.w	sl, #0
 800d9ac:	db3b      	blt.n	800da26 <_dtoa_r+0x23e>
 800d9ae:	9b04      	ldr	r3, [sp, #16]
 800d9b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d9b4:	4453      	add	r3, sl
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	9306      	str	r3, [sp, #24]
 800d9bc:	9b05      	ldr	r3, [sp, #20]
 800d9be:	2b09      	cmp	r3, #9
 800d9c0:	d869      	bhi.n	800da96 <_dtoa_r+0x2ae>
 800d9c2:	2b05      	cmp	r3, #5
 800d9c4:	bfc4      	itt	gt
 800d9c6:	3b04      	subgt	r3, #4
 800d9c8:	9305      	strgt	r3, [sp, #20]
 800d9ca:	9b05      	ldr	r3, [sp, #20]
 800d9cc:	f1a3 0302 	sub.w	r3, r3, #2
 800d9d0:	bfcc      	ite	gt
 800d9d2:	2500      	movgt	r5, #0
 800d9d4:	2501      	movle	r5, #1
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d869      	bhi.n	800daae <_dtoa_r+0x2c6>
 800d9da:	e8df f003 	tbb	[pc, r3]
 800d9de:	4e2c      	.short	0x4e2c
 800d9e0:	5a4c      	.short	0x5a4c
 800d9e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d9e6:	441d      	add	r5, r3
 800d9e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d9ec:	2b20      	cmp	r3, #32
 800d9ee:	bfc1      	itttt	gt
 800d9f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d9f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d9f8:	fa09 f303 	lslgt.w	r3, r9, r3
 800d9fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800da00:	bfda      	itte	le
 800da02:	f1c3 0320 	rsble	r3, r3, #32
 800da06:	fa06 f003 	lslle.w	r0, r6, r3
 800da0a:	4318      	orrgt	r0, r3
 800da0c:	f7f2 fd92 	bl	8000534 <__aeabi_ui2d>
 800da10:	2301      	movs	r3, #1
 800da12:	4606      	mov	r6, r0
 800da14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800da18:	3d01      	subs	r5, #1
 800da1a:	9310      	str	r3, [sp, #64]	; 0x40
 800da1c:	e771      	b.n	800d902 <_dtoa_r+0x11a>
 800da1e:	2301      	movs	r3, #1
 800da20:	e7b6      	b.n	800d990 <_dtoa_r+0x1a8>
 800da22:	900e      	str	r0, [sp, #56]	; 0x38
 800da24:	e7b5      	b.n	800d992 <_dtoa_r+0x1aa>
 800da26:	f1ca 0300 	rsb	r3, sl, #0
 800da2a:	9306      	str	r3, [sp, #24]
 800da2c:	2300      	movs	r3, #0
 800da2e:	eba8 080a 	sub.w	r8, r8, sl
 800da32:	930d      	str	r3, [sp, #52]	; 0x34
 800da34:	e7c2      	b.n	800d9bc <_dtoa_r+0x1d4>
 800da36:	2300      	movs	r3, #0
 800da38:	9308      	str	r3, [sp, #32]
 800da3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	dc39      	bgt.n	800dab4 <_dtoa_r+0x2cc>
 800da40:	f04f 0901 	mov.w	r9, #1
 800da44:	f8cd 9004 	str.w	r9, [sp, #4]
 800da48:	464b      	mov	r3, r9
 800da4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800da4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da50:	2200      	movs	r2, #0
 800da52:	6042      	str	r2, [r0, #4]
 800da54:	2204      	movs	r2, #4
 800da56:	f102 0614 	add.w	r6, r2, #20
 800da5a:	429e      	cmp	r6, r3
 800da5c:	6841      	ldr	r1, [r0, #4]
 800da5e:	d92f      	bls.n	800dac0 <_dtoa_r+0x2d8>
 800da60:	4620      	mov	r0, r4
 800da62:	f000 fed9 	bl	800e818 <_Balloc>
 800da66:	9000      	str	r0, [sp, #0]
 800da68:	2800      	cmp	r0, #0
 800da6a:	d14b      	bne.n	800db04 <_dtoa_r+0x31c>
 800da6c:	4b24      	ldr	r3, [pc, #144]	; (800db00 <_dtoa_r+0x318>)
 800da6e:	4602      	mov	r2, r0
 800da70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da74:	e6d1      	b.n	800d81a <_dtoa_r+0x32>
 800da76:	2301      	movs	r3, #1
 800da78:	e7de      	b.n	800da38 <_dtoa_r+0x250>
 800da7a:	2300      	movs	r3, #0
 800da7c:	9308      	str	r3, [sp, #32]
 800da7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da80:	eb0a 0903 	add.w	r9, sl, r3
 800da84:	f109 0301 	add.w	r3, r9, #1
 800da88:	2b01      	cmp	r3, #1
 800da8a:	9301      	str	r3, [sp, #4]
 800da8c:	bfb8      	it	lt
 800da8e:	2301      	movlt	r3, #1
 800da90:	e7dd      	b.n	800da4e <_dtoa_r+0x266>
 800da92:	2301      	movs	r3, #1
 800da94:	e7f2      	b.n	800da7c <_dtoa_r+0x294>
 800da96:	2501      	movs	r5, #1
 800da98:	2300      	movs	r3, #0
 800da9a:	9305      	str	r3, [sp, #20]
 800da9c:	9508      	str	r5, [sp, #32]
 800da9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800daa2:	2200      	movs	r2, #0
 800daa4:	f8cd 9004 	str.w	r9, [sp, #4]
 800daa8:	2312      	movs	r3, #18
 800daaa:	9209      	str	r2, [sp, #36]	; 0x24
 800daac:	e7cf      	b.n	800da4e <_dtoa_r+0x266>
 800daae:	2301      	movs	r3, #1
 800dab0:	9308      	str	r3, [sp, #32]
 800dab2:	e7f4      	b.n	800da9e <_dtoa_r+0x2b6>
 800dab4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dab8:	f8cd 9004 	str.w	r9, [sp, #4]
 800dabc:	464b      	mov	r3, r9
 800dabe:	e7c6      	b.n	800da4e <_dtoa_r+0x266>
 800dac0:	3101      	adds	r1, #1
 800dac2:	6041      	str	r1, [r0, #4]
 800dac4:	0052      	lsls	r2, r2, #1
 800dac6:	e7c6      	b.n	800da56 <_dtoa_r+0x26e>
 800dac8:	636f4361 	.word	0x636f4361
 800dacc:	3fd287a7 	.word	0x3fd287a7
 800dad0:	8b60c8b3 	.word	0x8b60c8b3
 800dad4:	3fc68a28 	.word	0x3fc68a28
 800dad8:	509f79fb 	.word	0x509f79fb
 800dadc:	3fd34413 	.word	0x3fd34413
 800dae0:	08010061 	.word	0x08010061
 800dae4:	08010078 	.word	0x08010078
 800dae8:	7ff00000 	.word	0x7ff00000
 800daec:	0801005d 	.word	0x0801005d
 800daf0:	08010054 	.word	0x08010054
 800daf4:	08010031 	.word	0x08010031
 800daf8:	3ff80000 	.word	0x3ff80000
 800dafc:	080101d0 	.word	0x080101d0
 800db00:	080100d7 	.word	0x080100d7
 800db04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db06:	9a00      	ldr	r2, [sp, #0]
 800db08:	601a      	str	r2, [r3, #0]
 800db0a:	9b01      	ldr	r3, [sp, #4]
 800db0c:	2b0e      	cmp	r3, #14
 800db0e:	f200 80ad 	bhi.w	800dc6c <_dtoa_r+0x484>
 800db12:	2d00      	cmp	r5, #0
 800db14:	f000 80aa 	beq.w	800dc6c <_dtoa_r+0x484>
 800db18:	f1ba 0f00 	cmp.w	sl, #0
 800db1c:	dd36      	ble.n	800db8c <_dtoa_r+0x3a4>
 800db1e:	4ac3      	ldr	r2, [pc, #780]	; (800de2c <_dtoa_r+0x644>)
 800db20:	f00a 030f 	and.w	r3, sl, #15
 800db24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db28:	ed93 7b00 	vldr	d7, [r3]
 800db2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800db30:	ea4f 172a 	mov.w	r7, sl, asr #4
 800db34:	eeb0 8a47 	vmov.f32	s16, s14
 800db38:	eef0 8a67 	vmov.f32	s17, s15
 800db3c:	d016      	beq.n	800db6c <_dtoa_r+0x384>
 800db3e:	4bbc      	ldr	r3, [pc, #752]	; (800de30 <_dtoa_r+0x648>)
 800db40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db48:	f7f2 fe98 	bl	800087c <__aeabi_ddiv>
 800db4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db50:	f007 070f 	and.w	r7, r7, #15
 800db54:	2503      	movs	r5, #3
 800db56:	4eb6      	ldr	r6, [pc, #728]	; (800de30 <_dtoa_r+0x648>)
 800db58:	b957      	cbnz	r7, 800db70 <_dtoa_r+0x388>
 800db5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db5e:	ec53 2b18 	vmov	r2, r3, d8
 800db62:	f7f2 fe8b 	bl	800087c <__aeabi_ddiv>
 800db66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db6a:	e029      	b.n	800dbc0 <_dtoa_r+0x3d8>
 800db6c:	2502      	movs	r5, #2
 800db6e:	e7f2      	b.n	800db56 <_dtoa_r+0x36e>
 800db70:	07f9      	lsls	r1, r7, #31
 800db72:	d508      	bpl.n	800db86 <_dtoa_r+0x39e>
 800db74:	ec51 0b18 	vmov	r0, r1, d8
 800db78:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db7c:	f7f2 fd54 	bl	8000628 <__aeabi_dmul>
 800db80:	ec41 0b18 	vmov	d8, r0, r1
 800db84:	3501      	adds	r5, #1
 800db86:	107f      	asrs	r7, r7, #1
 800db88:	3608      	adds	r6, #8
 800db8a:	e7e5      	b.n	800db58 <_dtoa_r+0x370>
 800db8c:	f000 80a6 	beq.w	800dcdc <_dtoa_r+0x4f4>
 800db90:	f1ca 0600 	rsb	r6, sl, #0
 800db94:	4ba5      	ldr	r3, [pc, #660]	; (800de2c <_dtoa_r+0x644>)
 800db96:	4fa6      	ldr	r7, [pc, #664]	; (800de30 <_dtoa_r+0x648>)
 800db98:	f006 020f 	and.w	r2, r6, #15
 800db9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dba8:	f7f2 fd3e 	bl	8000628 <__aeabi_dmul>
 800dbac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbb0:	1136      	asrs	r6, r6, #4
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	2502      	movs	r5, #2
 800dbb6:	2e00      	cmp	r6, #0
 800dbb8:	f040 8085 	bne.w	800dcc6 <_dtoa_r+0x4de>
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1d2      	bne.n	800db66 <_dtoa_r+0x37e>
 800dbc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 808c 	beq.w	800dce0 <_dtoa_r+0x4f8>
 800dbc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbcc:	4b99      	ldr	r3, [pc, #612]	; (800de34 <_dtoa_r+0x64c>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	4639      	mov	r1, r7
 800dbd4:	f7f2 ff9a 	bl	8000b0c <__aeabi_dcmplt>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	f000 8081 	beq.w	800dce0 <_dtoa_r+0x4f8>
 800dbde:	9b01      	ldr	r3, [sp, #4]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d07d      	beq.n	800dce0 <_dtoa_r+0x4f8>
 800dbe4:	f1b9 0f00 	cmp.w	r9, #0
 800dbe8:	dd3c      	ble.n	800dc64 <_dtoa_r+0x47c>
 800dbea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800dbee:	9307      	str	r3, [sp, #28]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	4b91      	ldr	r3, [pc, #580]	; (800de38 <_dtoa_r+0x650>)
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	4639      	mov	r1, r7
 800dbf8:	f7f2 fd16 	bl	8000628 <__aeabi_dmul>
 800dbfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc00:	3501      	adds	r5, #1
 800dc02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dc06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc0a:	4628      	mov	r0, r5
 800dc0c:	f7f2 fca2 	bl	8000554 <__aeabi_i2d>
 800dc10:	4632      	mov	r2, r6
 800dc12:	463b      	mov	r3, r7
 800dc14:	f7f2 fd08 	bl	8000628 <__aeabi_dmul>
 800dc18:	4b88      	ldr	r3, [pc, #544]	; (800de3c <_dtoa_r+0x654>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f7f2 fb4e 	bl	80002bc <__adddf3>
 800dc20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc28:	9303      	str	r3, [sp, #12]
 800dc2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d15c      	bne.n	800dcea <_dtoa_r+0x502>
 800dc30:	4b83      	ldr	r3, [pc, #524]	; (800de40 <_dtoa_r+0x658>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7f2 fb3e 	bl	80002b8 <__aeabi_dsub>
 800dc3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc40:	4606      	mov	r6, r0
 800dc42:	460f      	mov	r7, r1
 800dc44:	f7f2 ff80 	bl	8000b48 <__aeabi_dcmpgt>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	f040 8296 	bne.w	800e17a <_dtoa_r+0x992>
 800dc4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dc52:	4630      	mov	r0, r6
 800dc54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc58:	4639      	mov	r1, r7
 800dc5a:	f7f2 ff57 	bl	8000b0c <__aeabi_dcmplt>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	f040 8288 	bne.w	800e174 <_dtoa_r+0x98c>
 800dc64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dc68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f2c0 8158 	blt.w	800df24 <_dtoa_r+0x73c>
 800dc74:	f1ba 0f0e 	cmp.w	sl, #14
 800dc78:	f300 8154 	bgt.w	800df24 <_dtoa_r+0x73c>
 800dc7c:	4b6b      	ldr	r3, [pc, #428]	; (800de2c <_dtoa_r+0x644>)
 800dc7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc82:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f280 80e3 	bge.w	800de54 <_dtoa_r+0x66c>
 800dc8e:	9b01      	ldr	r3, [sp, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f300 80df 	bgt.w	800de54 <_dtoa_r+0x66c>
 800dc96:	f040 826d 	bne.w	800e174 <_dtoa_r+0x98c>
 800dc9a:	4b69      	ldr	r3, [pc, #420]	; (800de40 <_dtoa_r+0x658>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	4640      	mov	r0, r8
 800dca0:	4649      	mov	r1, r9
 800dca2:	f7f2 fcc1 	bl	8000628 <__aeabi_dmul>
 800dca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcaa:	f7f2 ff43 	bl	8000b34 <__aeabi_dcmpge>
 800dcae:	9e01      	ldr	r6, [sp, #4]
 800dcb0:	4637      	mov	r7, r6
 800dcb2:	2800      	cmp	r0, #0
 800dcb4:	f040 8243 	bne.w	800e13e <_dtoa_r+0x956>
 800dcb8:	9d00      	ldr	r5, [sp, #0]
 800dcba:	2331      	movs	r3, #49	; 0x31
 800dcbc:	f805 3b01 	strb.w	r3, [r5], #1
 800dcc0:	f10a 0a01 	add.w	sl, sl, #1
 800dcc4:	e23f      	b.n	800e146 <_dtoa_r+0x95e>
 800dcc6:	07f2      	lsls	r2, r6, #31
 800dcc8:	d505      	bpl.n	800dcd6 <_dtoa_r+0x4ee>
 800dcca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcce:	f7f2 fcab 	bl	8000628 <__aeabi_dmul>
 800dcd2:	3501      	adds	r5, #1
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	1076      	asrs	r6, r6, #1
 800dcd8:	3708      	adds	r7, #8
 800dcda:	e76c      	b.n	800dbb6 <_dtoa_r+0x3ce>
 800dcdc:	2502      	movs	r5, #2
 800dcde:	e76f      	b.n	800dbc0 <_dtoa_r+0x3d8>
 800dce0:	9b01      	ldr	r3, [sp, #4]
 800dce2:	f8cd a01c 	str.w	sl, [sp, #28]
 800dce6:	930c      	str	r3, [sp, #48]	; 0x30
 800dce8:	e78d      	b.n	800dc06 <_dtoa_r+0x41e>
 800dcea:	9900      	ldr	r1, [sp, #0]
 800dcec:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dcee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcf0:	4b4e      	ldr	r3, [pc, #312]	; (800de2c <_dtoa_r+0x644>)
 800dcf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcf6:	4401      	add	r1, r0
 800dcf8:	9102      	str	r1, [sp, #8]
 800dcfa:	9908      	ldr	r1, [sp, #32]
 800dcfc:	eeb0 8a47 	vmov.f32	s16, s14
 800dd00:	eef0 8a67 	vmov.f32	s17, s15
 800dd04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	d045      	beq.n	800dd9c <_dtoa_r+0x5b4>
 800dd10:	494c      	ldr	r1, [pc, #304]	; (800de44 <_dtoa_r+0x65c>)
 800dd12:	2000      	movs	r0, #0
 800dd14:	f7f2 fdb2 	bl	800087c <__aeabi_ddiv>
 800dd18:	ec53 2b18 	vmov	r2, r3, d8
 800dd1c:	f7f2 facc 	bl	80002b8 <__aeabi_dsub>
 800dd20:	9d00      	ldr	r5, [sp, #0]
 800dd22:	ec41 0b18 	vmov	d8, r0, r1
 800dd26:	4639      	mov	r1, r7
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7f2 ff2d 	bl	8000b88 <__aeabi_d2iz>
 800dd2e:	900c      	str	r0, [sp, #48]	; 0x30
 800dd30:	f7f2 fc10 	bl	8000554 <__aeabi_i2d>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4630      	mov	r0, r6
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	f7f2 fabc 	bl	80002b8 <__aeabi_dsub>
 800dd40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd42:	3330      	adds	r3, #48	; 0x30
 800dd44:	f805 3b01 	strb.w	r3, [r5], #1
 800dd48:	ec53 2b18 	vmov	r2, r3, d8
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	460f      	mov	r7, r1
 800dd50:	f7f2 fedc 	bl	8000b0c <__aeabi_dcmplt>
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d165      	bne.n	800de24 <_dtoa_r+0x63c>
 800dd58:	4632      	mov	r2, r6
 800dd5a:	463b      	mov	r3, r7
 800dd5c:	4935      	ldr	r1, [pc, #212]	; (800de34 <_dtoa_r+0x64c>)
 800dd5e:	2000      	movs	r0, #0
 800dd60:	f7f2 faaa 	bl	80002b8 <__aeabi_dsub>
 800dd64:	ec53 2b18 	vmov	r2, r3, d8
 800dd68:	f7f2 fed0 	bl	8000b0c <__aeabi_dcmplt>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	f040 80b9 	bne.w	800dee4 <_dtoa_r+0x6fc>
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	429d      	cmp	r5, r3
 800dd76:	f43f af75 	beq.w	800dc64 <_dtoa_r+0x47c>
 800dd7a:	4b2f      	ldr	r3, [pc, #188]	; (800de38 <_dtoa_r+0x650>)
 800dd7c:	ec51 0b18 	vmov	r0, r1, d8
 800dd80:	2200      	movs	r2, #0
 800dd82:	f7f2 fc51 	bl	8000628 <__aeabi_dmul>
 800dd86:	4b2c      	ldr	r3, [pc, #176]	; (800de38 <_dtoa_r+0x650>)
 800dd88:	ec41 0b18 	vmov	d8, r0, r1
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	4630      	mov	r0, r6
 800dd90:	4639      	mov	r1, r7
 800dd92:	f7f2 fc49 	bl	8000628 <__aeabi_dmul>
 800dd96:	4606      	mov	r6, r0
 800dd98:	460f      	mov	r7, r1
 800dd9a:	e7c4      	b.n	800dd26 <_dtoa_r+0x53e>
 800dd9c:	ec51 0b17 	vmov	r0, r1, d7
 800dda0:	f7f2 fc42 	bl	8000628 <__aeabi_dmul>
 800dda4:	9b02      	ldr	r3, [sp, #8]
 800dda6:	9d00      	ldr	r5, [sp, #0]
 800dda8:	930c      	str	r3, [sp, #48]	; 0x30
 800ddaa:	ec41 0b18 	vmov	d8, r0, r1
 800ddae:	4639      	mov	r1, r7
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	f7f2 fee9 	bl	8000b88 <__aeabi_d2iz>
 800ddb6:	9011      	str	r0, [sp, #68]	; 0x44
 800ddb8:	f7f2 fbcc 	bl	8000554 <__aeabi_i2d>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	460b      	mov	r3, r1
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	f7f2 fa78 	bl	80002b8 <__aeabi_dsub>
 800ddc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddca:	3330      	adds	r3, #48	; 0x30
 800ddcc:	f805 3b01 	strb.w	r3, [r5], #1
 800ddd0:	9b02      	ldr	r3, [sp, #8]
 800ddd2:	429d      	cmp	r5, r3
 800ddd4:	4606      	mov	r6, r0
 800ddd6:	460f      	mov	r7, r1
 800ddd8:	f04f 0200 	mov.w	r2, #0
 800dddc:	d134      	bne.n	800de48 <_dtoa_r+0x660>
 800ddde:	4b19      	ldr	r3, [pc, #100]	; (800de44 <_dtoa_r+0x65c>)
 800dde0:	ec51 0b18 	vmov	r0, r1, d8
 800dde4:	f7f2 fa6a 	bl	80002bc <__adddf3>
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4630      	mov	r0, r6
 800ddee:	4639      	mov	r1, r7
 800ddf0:	f7f2 feaa 	bl	8000b48 <__aeabi_dcmpgt>
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	d175      	bne.n	800dee4 <_dtoa_r+0x6fc>
 800ddf8:	ec53 2b18 	vmov	r2, r3, d8
 800ddfc:	4911      	ldr	r1, [pc, #68]	; (800de44 <_dtoa_r+0x65c>)
 800ddfe:	2000      	movs	r0, #0
 800de00:	f7f2 fa5a 	bl	80002b8 <__aeabi_dsub>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4630      	mov	r0, r6
 800de0a:	4639      	mov	r1, r7
 800de0c:	f7f2 fe7e 	bl	8000b0c <__aeabi_dcmplt>
 800de10:	2800      	cmp	r0, #0
 800de12:	f43f af27 	beq.w	800dc64 <_dtoa_r+0x47c>
 800de16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de18:	1e6b      	subs	r3, r5, #1
 800de1a:	930c      	str	r3, [sp, #48]	; 0x30
 800de1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de20:	2b30      	cmp	r3, #48	; 0x30
 800de22:	d0f8      	beq.n	800de16 <_dtoa_r+0x62e>
 800de24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de28:	e04a      	b.n	800dec0 <_dtoa_r+0x6d8>
 800de2a:	bf00      	nop
 800de2c:	080101d0 	.word	0x080101d0
 800de30:	080101a8 	.word	0x080101a8
 800de34:	3ff00000 	.word	0x3ff00000
 800de38:	40240000 	.word	0x40240000
 800de3c:	401c0000 	.word	0x401c0000
 800de40:	40140000 	.word	0x40140000
 800de44:	3fe00000 	.word	0x3fe00000
 800de48:	4baf      	ldr	r3, [pc, #700]	; (800e108 <_dtoa_r+0x920>)
 800de4a:	f7f2 fbed 	bl	8000628 <__aeabi_dmul>
 800de4e:	4606      	mov	r6, r0
 800de50:	460f      	mov	r7, r1
 800de52:	e7ac      	b.n	800ddae <_dtoa_r+0x5c6>
 800de54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de58:	9d00      	ldr	r5, [sp, #0]
 800de5a:	4642      	mov	r2, r8
 800de5c:	464b      	mov	r3, r9
 800de5e:	4630      	mov	r0, r6
 800de60:	4639      	mov	r1, r7
 800de62:	f7f2 fd0b 	bl	800087c <__aeabi_ddiv>
 800de66:	f7f2 fe8f 	bl	8000b88 <__aeabi_d2iz>
 800de6a:	9002      	str	r0, [sp, #8]
 800de6c:	f7f2 fb72 	bl	8000554 <__aeabi_i2d>
 800de70:	4642      	mov	r2, r8
 800de72:	464b      	mov	r3, r9
 800de74:	f7f2 fbd8 	bl	8000628 <__aeabi_dmul>
 800de78:	4602      	mov	r2, r0
 800de7a:	460b      	mov	r3, r1
 800de7c:	4630      	mov	r0, r6
 800de7e:	4639      	mov	r1, r7
 800de80:	f7f2 fa1a 	bl	80002b8 <__aeabi_dsub>
 800de84:	9e02      	ldr	r6, [sp, #8]
 800de86:	9f01      	ldr	r7, [sp, #4]
 800de88:	3630      	adds	r6, #48	; 0x30
 800de8a:	f805 6b01 	strb.w	r6, [r5], #1
 800de8e:	9e00      	ldr	r6, [sp, #0]
 800de90:	1bae      	subs	r6, r5, r6
 800de92:	42b7      	cmp	r7, r6
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	d137      	bne.n	800df0a <_dtoa_r+0x722>
 800de9a:	f7f2 fa0f 	bl	80002bc <__adddf3>
 800de9e:	4642      	mov	r2, r8
 800dea0:	464b      	mov	r3, r9
 800dea2:	4606      	mov	r6, r0
 800dea4:	460f      	mov	r7, r1
 800dea6:	f7f2 fe4f 	bl	8000b48 <__aeabi_dcmpgt>
 800deaa:	b9c8      	cbnz	r0, 800dee0 <_dtoa_r+0x6f8>
 800deac:	4642      	mov	r2, r8
 800deae:	464b      	mov	r3, r9
 800deb0:	4630      	mov	r0, r6
 800deb2:	4639      	mov	r1, r7
 800deb4:	f7f2 fe20 	bl	8000af8 <__aeabi_dcmpeq>
 800deb8:	b110      	cbz	r0, 800dec0 <_dtoa_r+0x6d8>
 800deba:	9b02      	ldr	r3, [sp, #8]
 800debc:	07d9      	lsls	r1, r3, #31
 800debe:	d40f      	bmi.n	800dee0 <_dtoa_r+0x6f8>
 800dec0:	4620      	mov	r0, r4
 800dec2:	4659      	mov	r1, fp
 800dec4:	f000 fce8 	bl	800e898 <_Bfree>
 800dec8:	2300      	movs	r3, #0
 800deca:	702b      	strb	r3, [r5, #0]
 800decc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dece:	f10a 0001 	add.w	r0, sl, #1
 800ded2:	6018      	str	r0, [r3, #0]
 800ded4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f43f acd8 	beq.w	800d88c <_dtoa_r+0xa4>
 800dedc:	601d      	str	r5, [r3, #0]
 800dede:	e4d5      	b.n	800d88c <_dtoa_r+0xa4>
 800dee0:	f8cd a01c 	str.w	sl, [sp, #28]
 800dee4:	462b      	mov	r3, r5
 800dee6:	461d      	mov	r5, r3
 800dee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800deec:	2a39      	cmp	r2, #57	; 0x39
 800deee:	d108      	bne.n	800df02 <_dtoa_r+0x71a>
 800def0:	9a00      	ldr	r2, [sp, #0]
 800def2:	429a      	cmp	r2, r3
 800def4:	d1f7      	bne.n	800dee6 <_dtoa_r+0x6fe>
 800def6:	9a07      	ldr	r2, [sp, #28]
 800def8:	9900      	ldr	r1, [sp, #0]
 800defa:	3201      	adds	r2, #1
 800defc:	9207      	str	r2, [sp, #28]
 800defe:	2230      	movs	r2, #48	; 0x30
 800df00:	700a      	strb	r2, [r1, #0]
 800df02:	781a      	ldrb	r2, [r3, #0]
 800df04:	3201      	adds	r2, #1
 800df06:	701a      	strb	r2, [r3, #0]
 800df08:	e78c      	b.n	800de24 <_dtoa_r+0x63c>
 800df0a:	4b7f      	ldr	r3, [pc, #508]	; (800e108 <_dtoa_r+0x920>)
 800df0c:	2200      	movs	r2, #0
 800df0e:	f7f2 fb8b 	bl	8000628 <__aeabi_dmul>
 800df12:	2200      	movs	r2, #0
 800df14:	2300      	movs	r3, #0
 800df16:	4606      	mov	r6, r0
 800df18:	460f      	mov	r7, r1
 800df1a:	f7f2 fded 	bl	8000af8 <__aeabi_dcmpeq>
 800df1e:	2800      	cmp	r0, #0
 800df20:	d09b      	beq.n	800de5a <_dtoa_r+0x672>
 800df22:	e7cd      	b.n	800dec0 <_dtoa_r+0x6d8>
 800df24:	9a08      	ldr	r2, [sp, #32]
 800df26:	2a00      	cmp	r2, #0
 800df28:	f000 80c4 	beq.w	800e0b4 <_dtoa_r+0x8cc>
 800df2c:	9a05      	ldr	r2, [sp, #20]
 800df2e:	2a01      	cmp	r2, #1
 800df30:	f300 80a8 	bgt.w	800e084 <_dtoa_r+0x89c>
 800df34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df36:	2a00      	cmp	r2, #0
 800df38:	f000 80a0 	beq.w	800e07c <_dtoa_r+0x894>
 800df3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df40:	9e06      	ldr	r6, [sp, #24]
 800df42:	4645      	mov	r5, r8
 800df44:	9a04      	ldr	r2, [sp, #16]
 800df46:	2101      	movs	r1, #1
 800df48:	441a      	add	r2, r3
 800df4a:	4620      	mov	r0, r4
 800df4c:	4498      	add	r8, r3
 800df4e:	9204      	str	r2, [sp, #16]
 800df50:	f000 fd5e 	bl	800ea10 <__i2b>
 800df54:	4607      	mov	r7, r0
 800df56:	2d00      	cmp	r5, #0
 800df58:	dd0b      	ble.n	800df72 <_dtoa_r+0x78a>
 800df5a:	9b04      	ldr	r3, [sp, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	dd08      	ble.n	800df72 <_dtoa_r+0x78a>
 800df60:	42ab      	cmp	r3, r5
 800df62:	9a04      	ldr	r2, [sp, #16]
 800df64:	bfa8      	it	ge
 800df66:	462b      	movge	r3, r5
 800df68:	eba8 0803 	sub.w	r8, r8, r3
 800df6c:	1aed      	subs	r5, r5, r3
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	9304      	str	r3, [sp, #16]
 800df72:	9b06      	ldr	r3, [sp, #24]
 800df74:	b1fb      	cbz	r3, 800dfb6 <_dtoa_r+0x7ce>
 800df76:	9b08      	ldr	r3, [sp, #32]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 809f 	beq.w	800e0bc <_dtoa_r+0x8d4>
 800df7e:	2e00      	cmp	r6, #0
 800df80:	dd11      	ble.n	800dfa6 <_dtoa_r+0x7be>
 800df82:	4639      	mov	r1, r7
 800df84:	4632      	mov	r2, r6
 800df86:	4620      	mov	r0, r4
 800df88:	f000 fdfe 	bl	800eb88 <__pow5mult>
 800df8c:	465a      	mov	r2, fp
 800df8e:	4601      	mov	r1, r0
 800df90:	4607      	mov	r7, r0
 800df92:	4620      	mov	r0, r4
 800df94:	f000 fd52 	bl	800ea3c <__multiply>
 800df98:	4659      	mov	r1, fp
 800df9a:	9007      	str	r0, [sp, #28]
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 fc7b 	bl	800e898 <_Bfree>
 800dfa2:	9b07      	ldr	r3, [sp, #28]
 800dfa4:	469b      	mov	fp, r3
 800dfa6:	9b06      	ldr	r3, [sp, #24]
 800dfa8:	1b9a      	subs	r2, r3, r6
 800dfaa:	d004      	beq.n	800dfb6 <_dtoa_r+0x7ce>
 800dfac:	4659      	mov	r1, fp
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 fdea 	bl	800eb88 <__pow5mult>
 800dfb4:	4683      	mov	fp, r0
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 fd29 	bl	800ea10 <__i2b>
 800dfbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	4606      	mov	r6, r0
 800dfc4:	dd7c      	ble.n	800e0c0 <_dtoa_r+0x8d8>
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	4601      	mov	r1, r0
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 fddc 	bl	800eb88 <__pow5mult>
 800dfd0:	9b05      	ldr	r3, [sp, #20]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	dd76      	ble.n	800e0c6 <_dtoa_r+0x8de>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9306      	str	r3, [sp, #24]
 800dfdc:	6933      	ldr	r3, [r6, #16]
 800dfde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dfe2:	6918      	ldr	r0, [r3, #16]
 800dfe4:	f000 fcc4 	bl	800e970 <__hi0bits>
 800dfe8:	f1c0 0020 	rsb	r0, r0, #32
 800dfec:	9b04      	ldr	r3, [sp, #16]
 800dfee:	4418      	add	r0, r3
 800dff0:	f010 001f 	ands.w	r0, r0, #31
 800dff4:	f000 8086 	beq.w	800e104 <_dtoa_r+0x91c>
 800dff8:	f1c0 0320 	rsb	r3, r0, #32
 800dffc:	2b04      	cmp	r3, #4
 800dffe:	dd7f      	ble.n	800e100 <_dtoa_r+0x918>
 800e000:	f1c0 001c 	rsb	r0, r0, #28
 800e004:	9b04      	ldr	r3, [sp, #16]
 800e006:	4403      	add	r3, r0
 800e008:	4480      	add	r8, r0
 800e00a:	4405      	add	r5, r0
 800e00c:	9304      	str	r3, [sp, #16]
 800e00e:	f1b8 0f00 	cmp.w	r8, #0
 800e012:	dd05      	ble.n	800e020 <_dtoa_r+0x838>
 800e014:	4659      	mov	r1, fp
 800e016:	4642      	mov	r2, r8
 800e018:	4620      	mov	r0, r4
 800e01a:	f000 fe0f 	bl	800ec3c <__lshift>
 800e01e:	4683      	mov	fp, r0
 800e020:	9b04      	ldr	r3, [sp, #16]
 800e022:	2b00      	cmp	r3, #0
 800e024:	dd05      	ble.n	800e032 <_dtoa_r+0x84a>
 800e026:	4631      	mov	r1, r6
 800e028:	461a      	mov	r2, r3
 800e02a:	4620      	mov	r0, r4
 800e02c:	f000 fe06 	bl	800ec3c <__lshift>
 800e030:	4606      	mov	r6, r0
 800e032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e034:	2b00      	cmp	r3, #0
 800e036:	d069      	beq.n	800e10c <_dtoa_r+0x924>
 800e038:	4631      	mov	r1, r6
 800e03a:	4658      	mov	r0, fp
 800e03c:	f000 fe6a 	bl	800ed14 <__mcmp>
 800e040:	2800      	cmp	r0, #0
 800e042:	da63      	bge.n	800e10c <_dtoa_r+0x924>
 800e044:	2300      	movs	r3, #0
 800e046:	4659      	mov	r1, fp
 800e048:	220a      	movs	r2, #10
 800e04a:	4620      	mov	r0, r4
 800e04c:	f000 fc46 	bl	800e8dc <__multadd>
 800e050:	9b08      	ldr	r3, [sp, #32]
 800e052:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e056:	4683      	mov	fp, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 818f 	beq.w	800e37c <_dtoa_r+0xb94>
 800e05e:	4639      	mov	r1, r7
 800e060:	2300      	movs	r3, #0
 800e062:	220a      	movs	r2, #10
 800e064:	4620      	mov	r0, r4
 800e066:	f000 fc39 	bl	800e8dc <__multadd>
 800e06a:	f1b9 0f00 	cmp.w	r9, #0
 800e06e:	4607      	mov	r7, r0
 800e070:	f300 808e 	bgt.w	800e190 <_dtoa_r+0x9a8>
 800e074:	9b05      	ldr	r3, [sp, #20]
 800e076:	2b02      	cmp	r3, #2
 800e078:	dc50      	bgt.n	800e11c <_dtoa_r+0x934>
 800e07a:	e089      	b.n	800e190 <_dtoa_r+0x9a8>
 800e07c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e07e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e082:	e75d      	b.n	800df40 <_dtoa_r+0x758>
 800e084:	9b01      	ldr	r3, [sp, #4]
 800e086:	1e5e      	subs	r6, r3, #1
 800e088:	9b06      	ldr	r3, [sp, #24]
 800e08a:	42b3      	cmp	r3, r6
 800e08c:	bfbf      	itttt	lt
 800e08e:	9b06      	ldrlt	r3, [sp, #24]
 800e090:	9606      	strlt	r6, [sp, #24]
 800e092:	1af2      	sublt	r2, r6, r3
 800e094:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e096:	bfb6      	itet	lt
 800e098:	189b      	addlt	r3, r3, r2
 800e09a:	1b9e      	subge	r6, r3, r6
 800e09c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e09e:	9b01      	ldr	r3, [sp, #4]
 800e0a0:	bfb8      	it	lt
 800e0a2:	2600      	movlt	r6, #0
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	bfb5      	itete	lt
 800e0a8:	eba8 0503 	sublt.w	r5, r8, r3
 800e0ac:	9b01      	ldrge	r3, [sp, #4]
 800e0ae:	2300      	movlt	r3, #0
 800e0b0:	4645      	movge	r5, r8
 800e0b2:	e747      	b.n	800df44 <_dtoa_r+0x75c>
 800e0b4:	9e06      	ldr	r6, [sp, #24]
 800e0b6:	9f08      	ldr	r7, [sp, #32]
 800e0b8:	4645      	mov	r5, r8
 800e0ba:	e74c      	b.n	800df56 <_dtoa_r+0x76e>
 800e0bc:	9a06      	ldr	r2, [sp, #24]
 800e0be:	e775      	b.n	800dfac <_dtoa_r+0x7c4>
 800e0c0:	9b05      	ldr	r3, [sp, #20]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	dc18      	bgt.n	800e0f8 <_dtoa_r+0x910>
 800e0c6:	9b02      	ldr	r3, [sp, #8]
 800e0c8:	b9b3      	cbnz	r3, 800e0f8 <_dtoa_r+0x910>
 800e0ca:	9b03      	ldr	r3, [sp, #12]
 800e0cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0d0:	b9a3      	cbnz	r3, 800e0fc <_dtoa_r+0x914>
 800e0d2:	9b03      	ldr	r3, [sp, #12]
 800e0d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0d8:	0d1b      	lsrs	r3, r3, #20
 800e0da:	051b      	lsls	r3, r3, #20
 800e0dc:	b12b      	cbz	r3, 800e0ea <_dtoa_r+0x902>
 800e0de:	9b04      	ldr	r3, [sp, #16]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	9304      	str	r3, [sp, #16]
 800e0e4:	f108 0801 	add.w	r8, r8, #1
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	9306      	str	r3, [sp, #24]
 800e0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	f47f af74 	bne.w	800dfdc <_dtoa_r+0x7f4>
 800e0f4:	2001      	movs	r0, #1
 800e0f6:	e779      	b.n	800dfec <_dtoa_r+0x804>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	e7f6      	b.n	800e0ea <_dtoa_r+0x902>
 800e0fc:	9b02      	ldr	r3, [sp, #8]
 800e0fe:	e7f4      	b.n	800e0ea <_dtoa_r+0x902>
 800e100:	d085      	beq.n	800e00e <_dtoa_r+0x826>
 800e102:	4618      	mov	r0, r3
 800e104:	301c      	adds	r0, #28
 800e106:	e77d      	b.n	800e004 <_dtoa_r+0x81c>
 800e108:	40240000 	.word	0x40240000
 800e10c:	9b01      	ldr	r3, [sp, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dc38      	bgt.n	800e184 <_dtoa_r+0x99c>
 800e112:	9b05      	ldr	r3, [sp, #20]
 800e114:	2b02      	cmp	r3, #2
 800e116:	dd35      	ble.n	800e184 <_dtoa_r+0x99c>
 800e118:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e11c:	f1b9 0f00 	cmp.w	r9, #0
 800e120:	d10d      	bne.n	800e13e <_dtoa_r+0x956>
 800e122:	4631      	mov	r1, r6
 800e124:	464b      	mov	r3, r9
 800e126:	2205      	movs	r2, #5
 800e128:	4620      	mov	r0, r4
 800e12a:	f000 fbd7 	bl	800e8dc <__multadd>
 800e12e:	4601      	mov	r1, r0
 800e130:	4606      	mov	r6, r0
 800e132:	4658      	mov	r0, fp
 800e134:	f000 fdee 	bl	800ed14 <__mcmp>
 800e138:	2800      	cmp	r0, #0
 800e13a:	f73f adbd 	bgt.w	800dcb8 <_dtoa_r+0x4d0>
 800e13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e140:	9d00      	ldr	r5, [sp, #0]
 800e142:	ea6f 0a03 	mvn.w	sl, r3
 800e146:	f04f 0800 	mov.w	r8, #0
 800e14a:	4631      	mov	r1, r6
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 fba3 	bl	800e898 <_Bfree>
 800e152:	2f00      	cmp	r7, #0
 800e154:	f43f aeb4 	beq.w	800dec0 <_dtoa_r+0x6d8>
 800e158:	f1b8 0f00 	cmp.w	r8, #0
 800e15c:	d005      	beq.n	800e16a <_dtoa_r+0x982>
 800e15e:	45b8      	cmp	r8, r7
 800e160:	d003      	beq.n	800e16a <_dtoa_r+0x982>
 800e162:	4641      	mov	r1, r8
 800e164:	4620      	mov	r0, r4
 800e166:	f000 fb97 	bl	800e898 <_Bfree>
 800e16a:	4639      	mov	r1, r7
 800e16c:	4620      	mov	r0, r4
 800e16e:	f000 fb93 	bl	800e898 <_Bfree>
 800e172:	e6a5      	b.n	800dec0 <_dtoa_r+0x6d8>
 800e174:	2600      	movs	r6, #0
 800e176:	4637      	mov	r7, r6
 800e178:	e7e1      	b.n	800e13e <_dtoa_r+0x956>
 800e17a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e17c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e180:	4637      	mov	r7, r6
 800e182:	e599      	b.n	800dcb8 <_dtoa_r+0x4d0>
 800e184:	9b08      	ldr	r3, [sp, #32]
 800e186:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f000 80fd 	beq.w	800e38a <_dtoa_r+0xba2>
 800e190:	2d00      	cmp	r5, #0
 800e192:	dd05      	ble.n	800e1a0 <_dtoa_r+0x9b8>
 800e194:	4639      	mov	r1, r7
 800e196:	462a      	mov	r2, r5
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 fd4f 	bl	800ec3c <__lshift>
 800e19e:	4607      	mov	r7, r0
 800e1a0:	9b06      	ldr	r3, [sp, #24]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d05c      	beq.n	800e260 <_dtoa_r+0xa78>
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 fb35 	bl	800e818 <_Balloc>
 800e1ae:	4605      	mov	r5, r0
 800e1b0:	b928      	cbnz	r0, 800e1be <_dtoa_r+0x9d6>
 800e1b2:	4b80      	ldr	r3, [pc, #512]	; (800e3b4 <_dtoa_r+0xbcc>)
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e1ba:	f7ff bb2e 	b.w	800d81a <_dtoa_r+0x32>
 800e1be:	693a      	ldr	r2, [r7, #16]
 800e1c0:	3202      	adds	r2, #2
 800e1c2:	0092      	lsls	r2, r2, #2
 800e1c4:	f107 010c 	add.w	r1, r7, #12
 800e1c8:	300c      	adds	r0, #12
 800e1ca:	f7fe fc31 	bl	800ca30 <memcpy>
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f000 fd32 	bl	800ec3c <__lshift>
 800e1d8:	9b00      	ldr	r3, [sp, #0]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	9b00      	ldr	r3, [sp, #0]
 800e1e0:	444b      	add	r3, r9
 800e1e2:	9307      	str	r3, [sp, #28]
 800e1e4:	9b02      	ldr	r3, [sp, #8]
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	46b8      	mov	r8, r7
 800e1ec:	9306      	str	r3, [sp, #24]
 800e1ee:	4607      	mov	r7, r0
 800e1f0:	9b01      	ldr	r3, [sp, #4]
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	3b01      	subs	r3, #1
 800e1f6:	4658      	mov	r0, fp
 800e1f8:	9302      	str	r3, [sp, #8]
 800e1fa:	f7ff fa67 	bl	800d6cc <quorem>
 800e1fe:	4603      	mov	r3, r0
 800e200:	3330      	adds	r3, #48	; 0x30
 800e202:	9004      	str	r0, [sp, #16]
 800e204:	4641      	mov	r1, r8
 800e206:	4658      	mov	r0, fp
 800e208:	9308      	str	r3, [sp, #32]
 800e20a:	f000 fd83 	bl	800ed14 <__mcmp>
 800e20e:	463a      	mov	r2, r7
 800e210:	4681      	mov	r9, r0
 800e212:	4631      	mov	r1, r6
 800e214:	4620      	mov	r0, r4
 800e216:	f000 fd99 	bl	800ed4c <__mdiff>
 800e21a:	68c2      	ldr	r2, [r0, #12]
 800e21c:	9b08      	ldr	r3, [sp, #32]
 800e21e:	4605      	mov	r5, r0
 800e220:	bb02      	cbnz	r2, 800e264 <_dtoa_r+0xa7c>
 800e222:	4601      	mov	r1, r0
 800e224:	4658      	mov	r0, fp
 800e226:	f000 fd75 	bl	800ed14 <__mcmp>
 800e22a:	9b08      	ldr	r3, [sp, #32]
 800e22c:	4602      	mov	r2, r0
 800e22e:	4629      	mov	r1, r5
 800e230:	4620      	mov	r0, r4
 800e232:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e236:	f000 fb2f 	bl	800e898 <_Bfree>
 800e23a:	9b05      	ldr	r3, [sp, #20]
 800e23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e23e:	9d01      	ldr	r5, [sp, #4]
 800e240:	ea43 0102 	orr.w	r1, r3, r2
 800e244:	9b06      	ldr	r3, [sp, #24]
 800e246:	430b      	orrs	r3, r1
 800e248:	9b08      	ldr	r3, [sp, #32]
 800e24a:	d10d      	bne.n	800e268 <_dtoa_r+0xa80>
 800e24c:	2b39      	cmp	r3, #57	; 0x39
 800e24e:	d029      	beq.n	800e2a4 <_dtoa_r+0xabc>
 800e250:	f1b9 0f00 	cmp.w	r9, #0
 800e254:	dd01      	ble.n	800e25a <_dtoa_r+0xa72>
 800e256:	9b04      	ldr	r3, [sp, #16]
 800e258:	3331      	adds	r3, #49	; 0x31
 800e25a:	9a02      	ldr	r2, [sp, #8]
 800e25c:	7013      	strb	r3, [r2, #0]
 800e25e:	e774      	b.n	800e14a <_dtoa_r+0x962>
 800e260:	4638      	mov	r0, r7
 800e262:	e7b9      	b.n	800e1d8 <_dtoa_r+0x9f0>
 800e264:	2201      	movs	r2, #1
 800e266:	e7e2      	b.n	800e22e <_dtoa_r+0xa46>
 800e268:	f1b9 0f00 	cmp.w	r9, #0
 800e26c:	db06      	blt.n	800e27c <_dtoa_r+0xa94>
 800e26e:	9905      	ldr	r1, [sp, #20]
 800e270:	ea41 0909 	orr.w	r9, r1, r9
 800e274:	9906      	ldr	r1, [sp, #24]
 800e276:	ea59 0101 	orrs.w	r1, r9, r1
 800e27a:	d120      	bne.n	800e2be <_dtoa_r+0xad6>
 800e27c:	2a00      	cmp	r2, #0
 800e27e:	ddec      	ble.n	800e25a <_dtoa_r+0xa72>
 800e280:	4659      	mov	r1, fp
 800e282:	2201      	movs	r2, #1
 800e284:	4620      	mov	r0, r4
 800e286:	9301      	str	r3, [sp, #4]
 800e288:	f000 fcd8 	bl	800ec3c <__lshift>
 800e28c:	4631      	mov	r1, r6
 800e28e:	4683      	mov	fp, r0
 800e290:	f000 fd40 	bl	800ed14 <__mcmp>
 800e294:	2800      	cmp	r0, #0
 800e296:	9b01      	ldr	r3, [sp, #4]
 800e298:	dc02      	bgt.n	800e2a0 <_dtoa_r+0xab8>
 800e29a:	d1de      	bne.n	800e25a <_dtoa_r+0xa72>
 800e29c:	07da      	lsls	r2, r3, #31
 800e29e:	d5dc      	bpl.n	800e25a <_dtoa_r+0xa72>
 800e2a0:	2b39      	cmp	r3, #57	; 0x39
 800e2a2:	d1d8      	bne.n	800e256 <_dtoa_r+0xa6e>
 800e2a4:	9a02      	ldr	r2, [sp, #8]
 800e2a6:	2339      	movs	r3, #57	; 0x39
 800e2a8:	7013      	strb	r3, [r2, #0]
 800e2aa:	462b      	mov	r3, r5
 800e2ac:	461d      	mov	r5, r3
 800e2ae:	3b01      	subs	r3, #1
 800e2b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e2b4:	2a39      	cmp	r2, #57	; 0x39
 800e2b6:	d050      	beq.n	800e35a <_dtoa_r+0xb72>
 800e2b8:	3201      	adds	r2, #1
 800e2ba:	701a      	strb	r2, [r3, #0]
 800e2bc:	e745      	b.n	800e14a <_dtoa_r+0x962>
 800e2be:	2a00      	cmp	r2, #0
 800e2c0:	dd03      	ble.n	800e2ca <_dtoa_r+0xae2>
 800e2c2:	2b39      	cmp	r3, #57	; 0x39
 800e2c4:	d0ee      	beq.n	800e2a4 <_dtoa_r+0xabc>
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	e7c7      	b.n	800e25a <_dtoa_r+0xa72>
 800e2ca:	9a01      	ldr	r2, [sp, #4]
 800e2cc:	9907      	ldr	r1, [sp, #28]
 800e2ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e2d2:	428a      	cmp	r2, r1
 800e2d4:	d02a      	beq.n	800e32c <_dtoa_r+0xb44>
 800e2d6:	4659      	mov	r1, fp
 800e2d8:	2300      	movs	r3, #0
 800e2da:	220a      	movs	r2, #10
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f000 fafd 	bl	800e8dc <__multadd>
 800e2e2:	45b8      	cmp	r8, r7
 800e2e4:	4683      	mov	fp, r0
 800e2e6:	f04f 0300 	mov.w	r3, #0
 800e2ea:	f04f 020a 	mov.w	r2, #10
 800e2ee:	4641      	mov	r1, r8
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	d107      	bne.n	800e304 <_dtoa_r+0xb1c>
 800e2f4:	f000 faf2 	bl	800e8dc <__multadd>
 800e2f8:	4680      	mov	r8, r0
 800e2fa:	4607      	mov	r7, r0
 800e2fc:	9b01      	ldr	r3, [sp, #4]
 800e2fe:	3301      	adds	r3, #1
 800e300:	9301      	str	r3, [sp, #4]
 800e302:	e775      	b.n	800e1f0 <_dtoa_r+0xa08>
 800e304:	f000 faea 	bl	800e8dc <__multadd>
 800e308:	4639      	mov	r1, r7
 800e30a:	4680      	mov	r8, r0
 800e30c:	2300      	movs	r3, #0
 800e30e:	220a      	movs	r2, #10
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fae3 	bl	800e8dc <__multadd>
 800e316:	4607      	mov	r7, r0
 800e318:	e7f0      	b.n	800e2fc <_dtoa_r+0xb14>
 800e31a:	f1b9 0f00 	cmp.w	r9, #0
 800e31e:	9a00      	ldr	r2, [sp, #0]
 800e320:	bfcc      	ite	gt
 800e322:	464d      	movgt	r5, r9
 800e324:	2501      	movle	r5, #1
 800e326:	4415      	add	r5, r2
 800e328:	f04f 0800 	mov.w	r8, #0
 800e32c:	4659      	mov	r1, fp
 800e32e:	2201      	movs	r2, #1
 800e330:	4620      	mov	r0, r4
 800e332:	9301      	str	r3, [sp, #4]
 800e334:	f000 fc82 	bl	800ec3c <__lshift>
 800e338:	4631      	mov	r1, r6
 800e33a:	4683      	mov	fp, r0
 800e33c:	f000 fcea 	bl	800ed14 <__mcmp>
 800e340:	2800      	cmp	r0, #0
 800e342:	dcb2      	bgt.n	800e2aa <_dtoa_r+0xac2>
 800e344:	d102      	bne.n	800e34c <_dtoa_r+0xb64>
 800e346:	9b01      	ldr	r3, [sp, #4]
 800e348:	07db      	lsls	r3, r3, #31
 800e34a:	d4ae      	bmi.n	800e2aa <_dtoa_r+0xac2>
 800e34c:	462b      	mov	r3, r5
 800e34e:	461d      	mov	r5, r3
 800e350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e354:	2a30      	cmp	r2, #48	; 0x30
 800e356:	d0fa      	beq.n	800e34e <_dtoa_r+0xb66>
 800e358:	e6f7      	b.n	800e14a <_dtoa_r+0x962>
 800e35a:	9a00      	ldr	r2, [sp, #0]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d1a5      	bne.n	800e2ac <_dtoa_r+0xac4>
 800e360:	f10a 0a01 	add.w	sl, sl, #1
 800e364:	2331      	movs	r3, #49	; 0x31
 800e366:	e779      	b.n	800e25c <_dtoa_r+0xa74>
 800e368:	4b13      	ldr	r3, [pc, #76]	; (800e3b8 <_dtoa_r+0xbd0>)
 800e36a:	f7ff baaf 	b.w	800d8cc <_dtoa_r+0xe4>
 800e36e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e370:	2b00      	cmp	r3, #0
 800e372:	f47f aa86 	bne.w	800d882 <_dtoa_r+0x9a>
 800e376:	4b11      	ldr	r3, [pc, #68]	; (800e3bc <_dtoa_r+0xbd4>)
 800e378:	f7ff baa8 	b.w	800d8cc <_dtoa_r+0xe4>
 800e37c:	f1b9 0f00 	cmp.w	r9, #0
 800e380:	dc03      	bgt.n	800e38a <_dtoa_r+0xba2>
 800e382:	9b05      	ldr	r3, [sp, #20]
 800e384:	2b02      	cmp	r3, #2
 800e386:	f73f aec9 	bgt.w	800e11c <_dtoa_r+0x934>
 800e38a:	9d00      	ldr	r5, [sp, #0]
 800e38c:	4631      	mov	r1, r6
 800e38e:	4658      	mov	r0, fp
 800e390:	f7ff f99c 	bl	800d6cc <quorem>
 800e394:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e398:	f805 3b01 	strb.w	r3, [r5], #1
 800e39c:	9a00      	ldr	r2, [sp, #0]
 800e39e:	1aaa      	subs	r2, r5, r2
 800e3a0:	4591      	cmp	r9, r2
 800e3a2:	ddba      	ble.n	800e31a <_dtoa_r+0xb32>
 800e3a4:	4659      	mov	r1, fp
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	220a      	movs	r2, #10
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 fa96 	bl	800e8dc <__multadd>
 800e3b0:	4683      	mov	fp, r0
 800e3b2:	e7eb      	b.n	800e38c <_dtoa_r+0xba4>
 800e3b4:	080100d7 	.word	0x080100d7
 800e3b8:	08010030 	.word	0x08010030
 800e3bc:	08010054 	.word	0x08010054

0800e3c0 <__sflush_r>:
 800e3c0:	898a      	ldrh	r2, [r1, #12]
 800e3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3c6:	4605      	mov	r5, r0
 800e3c8:	0710      	lsls	r0, r2, #28
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	d458      	bmi.n	800e480 <__sflush_r+0xc0>
 800e3ce:	684b      	ldr	r3, [r1, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	dc05      	bgt.n	800e3e0 <__sflush_r+0x20>
 800e3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	dc02      	bgt.n	800e3e0 <__sflush_r+0x20>
 800e3da:	2000      	movs	r0, #0
 800e3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3e2:	2e00      	cmp	r6, #0
 800e3e4:	d0f9      	beq.n	800e3da <__sflush_r+0x1a>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3ec:	682f      	ldr	r7, [r5, #0]
 800e3ee:	602b      	str	r3, [r5, #0]
 800e3f0:	d032      	beq.n	800e458 <__sflush_r+0x98>
 800e3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3f4:	89a3      	ldrh	r3, [r4, #12]
 800e3f6:	075a      	lsls	r2, r3, #29
 800e3f8:	d505      	bpl.n	800e406 <__sflush_r+0x46>
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	1ac0      	subs	r0, r0, r3
 800e3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e400:	b10b      	cbz	r3, 800e406 <__sflush_r+0x46>
 800e402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e404:	1ac0      	subs	r0, r0, r3
 800e406:	2300      	movs	r3, #0
 800e408:	4602      	mov	r2, r0
 800e40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e40c:	6a21      	ldr	r1, [r4, #32]
 800e40e:	4628      	mov	r0, r5
 800e410:	47b0      	blx	r6
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	d106      	bne.n	800e426 <__sflush_r+0x66>
 800e418:	6829      	ldr	r1, [r5, #0]
 800e41a:	291d      	cmp	r1, #29
 800e41c:	d82c      	bhi.n	800e478 <__sflush_r+0xb8>
 800e41e:	4a2a      	ldr	r2, [pc, #168]	; (800e4c8 <__sflush_r+0x108>)
 800e420:	40ca      	lsrs	r2, r1
 800e422:	07d6      	lsls	r6, r2, #31
 800e424:	d528      	bpl.n	800e478 <__sflush_r+0xb8>
 800e426:	2200      	movs	r2, #0
 800e428:	6062      	str	r2, [r4, #4]
 800e42a:	04d9      	lsls	r1, r3, #19
 800e42c:	6922      	ldr	r2, [r4, #16]
 800e42e:	6022      	str	r2, [r4, #0]
 800e430:	d504      	bpl.n	800e43c <__sflush_r+0x7c>
 800e432:	1c42      	adds	r2, r0, #1
 800e434:	d101      	bne.n	800e43a <__sflush_r+0x7a>
 800e436:	682b      	ldr	r3, [r5, #0]
 800e438:	b903      	cbnz	r3, 800e43c <__sflush_r+0x7c>
 800e43a:	6560      	str	r0, [r4, #84]	; 0x54
 800e43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e43e:	602f      	str	r7, [r5, #0]
 800e440:	2900      	cmp	r1, #0
 800e442:	d0ca      	beq.n	800e3da <__sflush_r+0x1a>
 800e444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e448:	4299      	cmp	r1, r3
 800e44a:	d002      	beq.n	800e452 <__sflush_r+0x92>
 800e44c:	4628      	mov	r0, r5
 800e44e:	f000 fd71 	bl	800ef34 <_free_r>
 800e452:	2000      	movs	r0, #0
 800e454:	6360      	str	r0, [r4, #52]	; 0x34
 800e456:	e7c1      	b.n	800e3dc <__sflush_r+0x1c>
 800e458:	6a21      	ldr	r1, [r4, #32]
 800e45a:	2301      	movs	r3, #1
 800e45c:	4628      	mov	r0, r5
 800e45e:	47b0      	blx	r6
 800e460:	1c41      	adds	r1, r0, #1
 800e462:	d1c7      	bne.n	800e3f4 <__sflush_r+0x34>
 800e464:	682b      	ldr	r3, [r5, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d0c4      	beq.n	800e3f4 <__sflush_r+0x34>
 800e46a:	2b1d      	cmp	r3, #29
 800e46c:	d001      	beq.n	800e472 <__sflush_r+0xb2>
 800e46e:	2b16      	cmp	r3, #22
 800e470:	d101      	bne.n	800e476 <__sflush_r+0xb6>
 800e472:	602f      	str	r7, [r5, #0]
 800e474:	e7b1      	b.n	800e3da <__sflush_r+0x1a>
 800e476:	89a3      	ldrh	r3, [r4, #12]
 800e478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e47c:	81a3      	strh	r3, [r4, #12]
 800e47e:	e7ad      	b.n	800e3dc <__sflush_r+0x1c>
 800e480:	690f      	ldr	r7, [r1, #16]
 800e482:	2f00      	cmp	r7, #0
 800e484:	d0a9      	beq.n	800e3da <__sflush_r+0x1a>
 800e486:	0793      	lsls	r3, r2, #30
 800e488:	680e      	ldr	r6, [r1, #0]
 800e48a:	bf08      	it	eq
 800e48c:	694b      	ldreq	r3, [r1, #20]
 800e48e:	600f      	str	r7, [r1, #0]
 800e490:	bf18      	it	ne
 800e492:	2300      	movne	r3, #0
 800e494:	eba6 0807 	sub.w	r8, r6, r7
 800e498:	608b      	str	r3, [r1, #8]
 800e49a:	f1b8 0f00 	cmp.w	r8, #0
 800e49e:	dd9c      	ble.n	800e3da <__sflush_r+0x1a>
 800e4a0:	6a21      	ldr	r1, [r4, #32]
 800e4a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4a4:	4643      	mov	r3, r8
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	4628      	mov	r0, r5
 800e4aa:	47b0      	blx	r6
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	dc06      	bgt.n	800e4be <__sflush_r+0xfe>
 800e4b0:	89a3      	ldrh	r3, [r4, #12]
 800e4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b6:	81a3      	strh	r3, [r4, #12]
 800e4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4bc:	e78e      	b.n	800e3dc <__sflush_r+0x1c>
 800e4be:	4407      	add	r7, r0
 800e4c0:	eba8 0800 	sub.w	r8, r8, r0
 800e4c4:	e7e9      	b.n	800e49a <__sflush_r+0xda>
 800e4c6:	bf00      	nop
 800e4c8:	20400001 	.word	0x20400001

0800e4cc <_fflush_r>:
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	690b      	ldr	r3, [r1, #16]
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	460c      	mov	r4, r1
 800e4d4:	b913      	cbnz	r3, 800e4dc <_fflush_r+0x10>
 800e4d6:	2500      	movs	r5, #0
 800e4d8:	4628      	mov	r0, r5
 800e4da:	bd38      	pop	{r3, r4, r5, pc}
 800e4dc:	b118      	cbz	r0, 800e4e6 <_fflush_r+0x1a>
 800e4de:	6983      	ldr	r3, [r0, #24]
 800e4e0:	b90b      	cbnz	r3, 800e4e6 <_fflush_r+0x1a>
 800e4e2:	f000 f887 	bl	800e5f4 <__sinit>
 800e4e6:	4b14      	ldr	r3, [pc, #80]	; (800e538 <_fflush_r+0x6c>)
 800e4e8:	429c      	cmp	r4, r3
 800e4ea:	d11b      	bne.n	800e524 <_fflush_r+0x58>
 800e4ec:	686c      	ldr	r4, [r5, #4]
 800e4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d0ef      	beq.n	800e4d6 <_fflush_r+0xa>
 800e4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4f8:	07d0      	lsls	r0, r2, #31
 800e4fa:	d404      	bmi.n	800e506 <_fflush_r+0x3a>
 800e4fc:	0599      	lsls	r1, r3, #22
 800e4fe:	d402      	bmi.n	800e506 <_fflush_r+0x3a>
 800e500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e502:	f000 f91a 	bl	800e73a <__retarget_lock_acquire_recursive>
 800e506:	4628      	mov	r0, r5
 800e508:	4621      	mov	r1, r4
 800e50a:	f7ff ff59 	bl	800e3c0 <__sflush_r>
 800e50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e510:	07da      	lsls	r2, r3, #31
 800e512:	4605      	mov	r5, r0
 800e514:	d4e0      	bmi.n	800e4d8 <_fflush_r+0xc>
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	059b      	lsls	r3, r3, #22
 800e51a:	d4dd      	bmi.n	800e4d8 <_fflush_r+0xc>
 800e51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e51e:	f000 f90d 	bl	800e73c <__retarget_lock_release_recursive>
 800e522:	e7d9      	b.n	800e4d8 <_fflush_r+0xc>
 800e524:	4b05      	ldr	r3, [pc, #20]	; (800e53c <_fflush_r+0x70>)
 800e526:	429c      	cmp	r4, r3
 800e528:	d101      	bne.n	800e52e <_fflush_r+0x62>
 800e52a:	68ac      	ldr	r4, [r5, #8]
 800e52c:	e7df      	b.n	800e4ee <_fflush_r+0x22>
 800e52e:	4b04      	ldr	r3, [pc, #16]	; (800e540 <_fflush_r+0x74>)
 800e530:	429c      	cmp	r4, r3
 800e532:	bf08      	it	eq
 800e534:	68ec      	ldreq	r4, [r5, #12]
 800e536:	e7da      	b.n	800e4ee <_fflush_r+0x22>
 800e538:	08010108 	.word	0x08010108
 800e53c:	08010128 	.word	0x08010128
 800e540:	080100e8 	.word	0x080100e8

0800e544 <std>:
 800e544:	2300      	movs	r3, #0
 800e546:	b510      	push	{r4, lr}
 800e548:	4604      	mov	r4, r0
 800e54a:	e9c0 3300 	strd	r3, r3, [r0]
 800e54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e552:	6083      	str	r3, [r0, #8]
 800e554:	8181      	strh	r1, [r0, #12]
 800e556:	6643      	str	r3, [r0, #100]	; 0x64
 800e558:	81c2      	strh	r2, [r0, #14]
 800e55a:	6183      	str	r3, [r0, #24]
 800e55c:	4619      	mov	r1, r3
 800e55e:	2208      	movs	r2, #8
 800e560:	305c      	adds	r0, #92	; 0x5c
 800e562:	f7fe fa73 	bl	800ca4c <memset>
 800e566:	4b05      	ldr	r3, [pc, #20]	; (800e57c <std+0x38>)
 800e568:	6263      	str	r3, [r4, #36]	; 0x24
 800e56a:	4b05      	ldr	r3, [pc, #20]	; (800e580 <std+0x3c>)
 800e56c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e56e:	4b05      	ldr	r3, [pc, #20]	; (800e584 <std+0x40>)
 800e570:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e572:	4b05      	ldr	r3, [pc, #20]	; (800e588 <std+0x44>)
 800e574:	6224      	str	r4, [r4, #32]
 800e576:	6323      	str	r3, [r4, #48]	; 0x30
 800e578:	bd10      	pop	{r4, pc}
 800e57a:	bf00      	nop
 800e57c:	0800f661 	.word	0x0800f661
 800e580:	0800f683 	.word	0x0800f683
 800e584:	0800f6bb 	.word	0x0800f6bb
 800e588:	0800f6df 	.word	0x0800f6df

0800e58c <_cleanup_r>:
 800e58c:	4901      	ldr	r1, [pc, #4]	; (800e594 <_cleanup_r+0x8>)
 800e58e:	f000 b8af 	b.w	800e6f0 <_fwalk_reent>
 800e592:	bf00      	nop
 800e594:	0800e4cd 	.word	0x0800e4cd

0800e598 <__sfmoreglue>:
 800e598:	b570      	push	{r4, r5, r6, lr}
 800e59a:	1e4a      	subs	r2, r1, #1
 800e59c:	2568      	movs	r5, #104	; 0x68
 800e59e:	4355      	muls	r5, r2
 800e5a0:	460e      	mov	r6, r1
 800e5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5a6:	f000 fd15 	bl	800efd4 <_malloc_r>
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	b140      	cbz	r0, 800e5c0 <__sfmoreglue+0x28>
 800e5ae:	2100      	movs	r1, #0
 800e5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800e5b4:	300c      	adds	r0, #12
 800e5b6:	60a0      	str	r0, [r4, #8]
 800e5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5bc:	f7fe fa46 	bl	800ca4c <memset>
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	bd70      	pop	{r4, r5, r6, pc}

0800e5c4 <__sfp_lock_acquire>:
 800e5c4:	4801      	ldr	r0, [pc, #4]	; (800e5cc <__sfp_lock_acquire+0x8>)
 800e5c6:	f000 b8b8 	b.w	800e73a <__retarget_lock_acquire_recursive>
 800e5ca:	bf00      	nop
 800e5cc:	20002e48 	.word	0x20002e48

0800e5d0 <__sfp_lock_release>:
 800e5d0:	4801      	ldr	r0, [pc, #4]	; (800e5d8 <__sfp_lock_release+0x8>)
 800e5d2:	f000 b8b3 	b.w	800e73c <__retarget_lock_release_recursive>
 800e5d6:	bf00      	nop
 800e5d8:	20002e48 	.word	0x20002e48

0800e5dc <__sinit_lock_acquire>:
 800e5dc:	4801      	ldr	r0, [pc, #4]	; (800e5e4 <__sinit_lock_acquire+0x8>)
 800e5de:	f000 b8ac 	b.w	800e73a <__retarget_lock_acquire_recursive>
 800e5e2:	bf00      	nop
 800e5e4:	20002e43 	.word	0x20002e43

0800e5e8 <__sinit_lock_release>:
 800e5e8:	4801      	ldr	r0, [pc, #4]	; (800e5f0 <__sinit_lock_release+0x8>)
 800e5ea:	f000 b8a7 	b.w	800e73c <__retarget_lock_release_recursive>
 800e5ee:	bf00      	nop
 800e5f0:	20002e43 	.word	0x20002e43

0800e5f4 <__sinit>:
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	f7ff fff0 	bl	800e5dc <__sinit_lock_acquire>
 800e5fc:	69a3      	ldr	r3, [r4, #24]
 800e5fe:	b11b      	cbz	r3, 800e608 <__sinit+0x14>
 800e600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e604:	f7ff bff0 	b.w	800e5e8 <__sinit_lock_release>
 800e608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e60c:	6523      	str	r3, [r4, #80]	; 0x50
 800e60e:	4b13      	ldr	r3, [pc, #76]	; (800e65c <__sinit+0x68>)
 800e610:	4a13      	ldr	r2, [pc, #76]	; (800e660 <__sinit+0x6c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	62a2      	str	r2, [r4, #40]	; 0x28
 800e616:	42a3      	cmp	r3, r4
 800e618:	bf04      	itt	eq
 800e61a:	2301      	moveq	r3, #1
 800e61c:	61a3      	streq	r3, [r4, #24]
 800e61e:	4620      	mov	r0, r4
 800e620:	f000 f820 	bl	800e664 <__sfp>
 800e624:	6060      	str	r0, [r4, #4]
 800e626:	4620      	mov	r0, r4
 800e628:	f000 f81c 	bl	800e664 <__sfp>
 800e62c:	60a0      	str	r0, [r4, #8]
 800e62e:	4620      	mov	r0, r4
 800e630:	f000 f818 	bl	800e664 <__sfp>
 800e634:	2200      	movs	r2, #0
 800e636:	60e0      	str	r0, [r4, #12]
 800e638:	2104      	movs	r1, #4
 800e63a:	6860      	ldr	r0, [r4, #4]
 800e63c:	f7ff ff82 	bl	800e544 <std>
 800e640:	68a0      	ldr	r0, [r4, #8]
 800e642:	2201      	movs	r2, #1
 800e644:	2109      	movs	r1, #9
 800e646:	f7ff ff7d 	bl	800e544 <std>
 800e64a:	68e0      	ldr	r0, [r4, #12]
 800e64c:	2202      	movs	r2, #2
 800e64e:	2112      	movs	r1, #18
 800e650:	f7ff ff78 	bl	800e544 <std>
 800e654:	2301      	movs	r3, #1
 800e656:	61a3      	str	r3, [r4, #24]
 800e658:	e7d2      	b.n	800e600 <__sinit+0xc>
 800e65a:	bf00      	nop
 800e65c:	0801001c 	.word	0x0801001c
 800e660:	0800e58d 	.word	0x0800e58d

0800e664 <__sfp>:
 800e664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e666:	4607      	mov	r7, r0
 800e668:	f7ff ffac 	bl	800e5c4 <__sfp_lock_acquire>
 800e66c:	4b1e      	ldr	r3, [pc, #120]	; (800e6e8 <__sfp+0x84>)
 800e66e:	681e      	ldr	r6, [r3, #0]
 800e670:	69b3      	ldr	r3, [r6, #24]
 800e672:	b913      	cbnz	r3, 800e67a <__sfp+0x16>
 800e674:	4630      	mov	r0, r6
 800e676:	f7ff ffbd 	bl	800e5f4 <__sinit>
 800e67a:	3648      	adds	r6, #72	; 0x48
 800e67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e680:	3b01      	subs	r3, #1
 800e682:	d503      	bpl.n	800e68c <__sfp+0x28>
 800e684:	6833      	ldr	r3, [r6, #0]
 800e686:	b30b      	cbz	r3, 800e6cc <__sfp+0x68>
 800e688:	6836      	ldr	r6, [r6, #0]
 800e68a:	e7f7      	b.n	800e67c <__sfp+0x18>
 800e68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e690:	b9d5      	cbnz	r5, 800e6c8 <__sfp+0x64>
 800e692:	4b16      	ldr	r3, [pc, #88]	; (800e6ec <__sfp+0x88>)
 800e694:	60e3      	str	r3, [r4, #12]
 800e696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e69a:	6665      	str	r5, [r4, #100]	; 0x64
 800e69c:	f000 f84c 	bl	800e738 <__retarget_lock_init_recursive>
 800e6a0:	f7ff ff96 	bl	800e5d0 <__sfp_lock_release>
 800e6a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6ac:	6025      	str	r5, [r4, #0]
 800e6ae:	61a5      	str	r5, [r4, #24]
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	4629      	mov	r1, r5
 800e6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6b8:	f7fe f9c8 	bl	800ca4c <memset>
 800e6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6c8:	3468      	adds	r4, #104	; 0x68
 800e6ca:	e7d9      	b.n	800e680 <__sfp+0x1c>
 800e6cc:	2104      	movs	r1, #4
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f7ff ff62 	bl	800e598 <__sfmoreglue>
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	6030      	str	r0, [r6, #0]
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d1d5      	bne.n	800e688 <__sfp+0x24>
 800e6dc:	f7ff ff78 	bl	800e5d0 <__sfp_lock_release>
 800e6e0:	230c      	movs	r3, #12
 800e6e2:	603b      	str	r3, [r7, #0]
 800e6e4:	e7ee      	b.n	800e6c4 <__sfp+0x60>
 800e6e6:	bf00      	nop
 800e6e8:	0801001c 	.word	0x0801001c
 800e6ec:	ffff0001 	.word	0xffff0001

0800e6f0 <_fwalk_reent>:
 800e6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6f4:	4606      	mov	r6, r0
 800e6f6:	4688      	mov	r8, r1
 800e6f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6fc:	2700      	movs	r7, #0
 800e6fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e702:	f1b9 0901 	subs.w	r9, r9, #1
 800e706:	d505      	bpl.n	800e714 <_fwalk_reent+0x24>
 800e708:	6824      	ldr	r4, [r4, #0]
 800e70a:	2c00      	cmp	r4, #0
 800e70c:	d1f7      	bne.n	800e6fe <_fwalk_reent+0xe>
 800e70e:	4638      	mov	r0, r7
 800e710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e714:	89ab      	ldrh	r3, [r5, #12]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d907      	bls.n	800e72a <_fwalk_reent+0x3a>
 800e71a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e71e:	3301      	adds	r3, #1
 800e720:	d003      	beq.n	800e72a <_fwalk_reent+0x3a>
 800e722:	4629      	mov	r1, r5
 800e724:	4630      	mov	r0, r6
 800e726:	47c0      	blx	r8
 800e728:	4307      	orrs	r7, r0
 800e72a:	3568      	adds	r5, #104	; 0x68
 800e72c:	e7e9      	b.n	800e702 <_fwalk_reent+0x12>
	...

0800e730 <_localeconv_r>:
 800e730:	4800      	ldr	r0, [pc, #0]	; (800e734 <_localeconv_r+0x4>)
 800e732:	4770      	bx	lr
 800e734:	20001030 	.word	0x20001030

0800e738 <__retarget_lock_init_recursive>:
 800e738:	4770      	bx	lr

0800e73a <__retarget_lock_acquire_recursive>:
 800e73a:	4770      	bx	lr

0800e73c <__retarget_lock_release_recursive>:
 800e73c:	4770      	bx	lr

0800e73e <__swhatbuf_r>:
 800e73e:	b570      	push	{r4, r5, r6, lr}
 800e740:	460e      	mov	r6, r1
 800e742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e746:	2900      	cmp	r1, #0
 800e748:	b096      	sub	sp, #88	; 0x58
 800e74a:	4614      	mov	r4, r2
 800e74c:	461d      	mov	r5, r3
 800e74e:	da07      	bge.n	800e760 <__swhatbuf_r+0x22>
 800e750:	2300      	movs	r3, #0
 800e752:	602b      	str	r3, [r5, #0]
 800e754:	89b3      	ldrh	r3, [r6, #12]
 800e756:	061a      	lsls	r2, r3, #24
 800e758:	d410      	bmi.n	800e77c <__swhatbuf_r+0x3e>
 800e75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e75e:	e00e      	b.n	800e77e <__swhatbuf_r+0x40>
 800e760:	466a      	mov	r2, sp
 800e762:	f001 f813 	bl	800f78c <_fstat_r>
 800e766:	2800      	cmp	r0, #0
 800e768:	dbf2      	blt.n	800e750 <__swhatbuf_r+0x12>
 800e76a:	9a01      	ldr	r2, [sp, #4]
 800e76c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e774:	425a      	negs	r2, r3
 800e776:	415a      	adcs	r2, r3
 800e778:	602a      	str	r2, [r5, #0]
 800e77a:	e7ee      	b.n	800e75a <__swhatbuf_r+0x1c>
 800e77c:	2340      	movs	r3, #64	; 0x40
 800e77e:	2000      	movs	r0, #0
 800e780:	6023      	str	r3, [r4, #0]
 800e782:	b016      	add	sp, #88	; 0x58
 800e784:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e788 <__smakebuf_r>:
 800e788:	898b      	ldrh	r3, [r1, #12]
 800e78a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e78c:	079d      	lsls	r5, r3, #30
 800e78e:	4606      	mov	r6, r0
 800e790:	460c      	mov	r4, r1
 800e792:	d507      	bpl.n	800e7a4 <__smakebuf_r+0x1c>
 800e794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e798:	6023      	str	r3, [r4, #0]
 800e79a:	6123      	str	r3, [r4, #16]
 800e79c:	2301      	movs	r3, #1
 800e79e:	6163      	str	r3, [r4, #20]
 800e7a0:	b002      	add	sp, #8
 800e7a2:	bd70      	pop	{r4, r5, r6, pc}
 800e7a4:	ab01      	add	r3, sp, #4
 800e7a6:	466a      	mov	r2, sp
 800e7a8:	f7ff ffc9 	bl	800e73e <__swhatbuf_r>
 800e7ac:	9900      	ldr	r1, [sp, #0]
 800e7ae:	4605      	mov	r5, r0
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	f000 fc0f 	bl	800efd4 <_malloc_r>
 800e7b6:	b948      	cbnz	r0, 800e7cc <__smakebuf_r+0x44>
 800e7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7bc:	059a      	lsls	r2, r3, #22
 800e7be:	d4ef      	bmi.n	800e7a0 <__smakebuf_r+0x18>
 800e7c0:	f023 0303 	bic.w	r3, r3, #3
 800e7c4:	f043 0302 	orr.w	r3, r3, #2
 800e7c8:	81a3      	strh	r3, [r4, #12]
 800e7ca:	e7e3      	b.n	800e794 <__smakebuf_r+0xc>
 800e7cc:	4b0d      	ldr	r3, [pc, #52]	; (800e804 <__smakebuf_r+0x7c>)
 800e7ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7d0:	89a3      	ldrh	r3, [r4, #12]
 800e7d2:	6020      	str	r0, [r4, #0]
 800e7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d8:	81a3      	strh	r3, [r4, #12]
 800e7da:	9b00      	ldr	r3, [sp, #0]
 800e7dc:	6163      	str	r3, [r4, #20]
 800e7de:	9b01      	ldr	r3, [sp, #4]
 800e7e0:	6120      	str	r0, [r4, #16]
 800e7e2:	b15b      	cbz	r3, 800e7fc <__smakebuf_r+0x74>
 800e7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f000 ffe1 	bl	800f7b0 <_isatty_r>
 800e7ee:	b128      	cbz	r0, 800e7fc <__smakebuf_r+0x74>
 800e7f0:	89a3      	ldrh	r3, [r4, #12]
 800e7f2:	f023 0303 	bic.w	r3, r3, #3
 800e7f6:	f043 0301 	orr.w	r3, r3, #1
 800e7fa:	81a3      	strh	r3, [r4, #12]
 800e7fc:	89a0      	ldrh	r0, [r4, #12]
 800e7fe:	4305      	orrs	r5, r0
 800e800:	81a5      	strh	r5, [r4, #12]
 800e802:	e7cd      	b.n	800e7a0 <__smakebuf_r+0x18>
 800e804:	0800e58d 	.word	0x0800e58d

0800e808 <malloc>:
 800e808:	4b02      	ldr	r3, [pc, #8]	; (800e814 <malloc+0xc>)
 800e80a:	4601      	mov	r1, r0
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f000 bbe1 	b.w	800efd4 <_malloc_r>
 800e812:	bf00      	nop
 800e814:	20000edc 	.word	0x20000edc

0800e818 <_Balloc>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e81c:	4604      	mov	r4, r0
 800e81e:	460d      	mov	r5, r1
 800e820:	b976      	cbnz	r6, 800e840 <_Balloc+0x28>
 800e822:	2010      	movs	r0, #16
 800e824:	f7ff fff0 	bl	800e808 <malloc>
 800e828:	4602      	mov	r2, r0
 800e82a:	6260      	str	r0, [r4, #36]	; 0x24
 800e82c:	b920      	cbnz	r0, 800e838 <_Balloc+0x20>
 800e82e:	4b18      	ldr	r3, [pc, #96]	; (800e890 <_Balloc+0x78>)
 800e830:	4818      	ldr	r0, [pc, #96]	; (800e894 <_Balloc+0x7c>)
 800e832:	2166      	movs	r1, #102	; 0x66
 800e834:	f000 ff6a 	bl	800f70c <__assert_func>
 800e838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e83c:	6006      	str	r6, [r0, #0]
 800e83e:	60c6      	str	r6, [r0, #12]
 800e840:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e842:	68f3      	ldr	r3, [r6, #12]
 800e844:	b183      	cbz	r3, 800e868 <_Balloc+0x50>
 800e846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e84e:	b9b8      	cbnz	r0, 800e880 <_Balloc+0x68>
 800e850:	2101      	movs	r1, #1
 800e852:	fa01 f605 	lsl.w	r6, r1, r5
 800e856:	1d72      	adds	r2, r6, #5
 800e858:	0092      	lsls	r2, r2, #2
 800e85a:	4620      	mov	r0, r4
 800e85c:	f000 fb5a 	bl	800ef14 <_calloc_r>
 800e860:	b160      	cbz	r0, 800e87c <_Balloc+0x64>
 800e862:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e866:	e00e      	b.n	800e886 <_Balloc+0x6e>
 800e868:	2221      	movs	r2, #33	; 0x21
 800e86a:	2104      	movs	r1, #4
 800e86c:	4620      	mov	r0, r4
 800e86e:	f000 fb51 	bl	800ef14 <_calloc_r>
 800e872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e874:	60f0      	str	r0, [r6, #12]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d1e4      	bne.n	800e846 <_Balloc+0x2e>
 800e87c:	2000      	movs	r0, #0
 800e87e:	bd70      	pop	{r4, r5, r6, pc}
 800e880:	6802      	ldr	r2, [r0, #0]
 800e882:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e886:	2300      	movs	r3, #0
 800e888:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e88c:	e7f7      	b.n	800e87e <_Balloc+0x66>
 800e88e:	bf00      	nop
 800e890:	08010061 	.word	0x08010061
 800e894:	08010148 	.word	0x08010148

0800e898 <_Bfree>:
 800e898:	b570      	push	{r4, r5, r6, lr}
 800e89a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e89c:	4605      	mov	r5, r0
 800e89e:	460c      	mov	r4, r1
 800e8a0:	b976      	cbnz	r6, 800e8c0 <_Bfree+0x28>
 800e8a2:	2010      	movs	r0, #16
 800e8a4:	f7ff ffb0 	bl	800e808 <malloc>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	6268      	str	r0, [r5, #36]	; 0x24
 800e8ac:	b920      	cbnz	r0, 800e8b8 <_Bfree+0x20>
 800e8ae:	4b09      	ldr	r3, [pc, #36]	; (800e8d4 <_Bfree+0x3c>)
 800e8b0:	4809      	ldr	r0, [pc, #36]	; (800e8d8 <_Bfree+0x40>)
 800e8b2:	218a      	movs	r1, #138	; 0x8a
 800e8b4:	f000 ff2a 	bl	800f70c <__assert_func>
 800e8b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e8bc:	6006      	str	r6, [r0, #0]
 800e8be:	60c6      	str	r6, [r0, #12]
 800e8c0:	b13c      	cbz	r4, 800e8d2 <_Bfree+0x3a>
 800e8c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8c4:	6862      	ldr	r2, [r4, #4]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8cc:	6021      	str	r1, [r4, #0]
 800e8ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8d2:	bd70      	pop	{r4, r5, r6, pc}
 800e8d4:	08010061 	.word	0x08010061
 800e8d8:	08010148 	.word	0x08010148

0800e8dc <__multadd>:
 800e8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8e0:	690e      	ldr	r6, [r1, #16]
 800e8e2:	4607      	mov	r7, r0
 800e8e4:	4698      	mov	r8, r3
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	f101 0014 	add.w	r0, r1, #20
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	6805      	ldr	r5, [r0, #0]
 800e8f0:	b2a9      	uxth	r1, r5
 800e8f2:	fb02 8101 	mla	r1, r2, r1, r8
 800e8f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e8fa:	0c2d      	lsrs	r5, r5, #16
 800e8fc:	fb02 c505 	mla	r5, r2, r5, ip
 800e900:	b289      	uxth	r1, r1
 800e902:	3301      	adds	r3, #1
 800e904:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e908:	429e      	cmp	r6, r3
 800e90a:	f840 1b04 	str.w	r1, [r0], #4
 800e90e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e912:	dcec      	bgt.n	800e8ee <__multadd+0x12>
 800e914:	f1b8 0f00 	cmp.w	r8, #0
 800e918:	d022      	beq.n	800e960 <__multadd+0x84>
 800e91a:	68a3      	ldr	r3, [r4, #8]
 800e91c:	42b3      	cmp	r3, r6
 800e91e:	dc19      	bgt.n	800e954 <__multadd+0x78>
 800e920:	6861      	ldr	r1, [r4, #4]
 800e922:	4638      	mov	r0, r7
 800e924:	3101      	adds	r1, #1
 800e926:	f7ff ff77 	bl	800e818 <_Balloc>
 800e92a:	4605      	mov	r5, r0
 800e92c:	b928      	cbnz	r0, 800e93a <__multadd+0x5e>
 800e92e:	4602      	mov	r2, r0
 800e930:	4b0d      	ldr	r3, [pc, #52]	; (800e968 <__multadd+0x8c>)
 800e932:	480e      	ldr	r0, [pc, #56]	; (800e96c <__multadd+0x90>)
 800e934:	21b5      	movs	r1, #181	; 0xb5
 800e936:	f000 fee9 	bl	800f70c <__assert_func>
 800e93a:	6922      	ldr	r2, [r4, #16]
 800e93c:	3202      	adds	r2, #2
 800e93e:	f104 010c 	add.w	r1, r4, #12
 800e942:	0092      	lsls	r2, r2, #2
 800e944:	300c      	adds	r0, #12
 800e946:	f7fe f873 	bl	800ca30 <memcpy>
 800e94a:	4621      	mov	r1, r4
 800e94c:	4638      	mov	r0, r7
 800e94e:	f7ff ffa3 	bl	800e898 <_Bfree>
 800e952:	462c      	mov	r4, r5
 800e954:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e958:	3601      	adds	r6, #1
 800e95a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e95e:	6126      	str	r6, [r4, #16]
 800e960:	4620      	mov	r0, r4
 800e962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e966:	bf00      	nop
 800e968:	080100d7 	.word	0x080100d7
 800e96c:	08010148 	.word	0x08010148

0800e970 <__hi0bits>:
 800e970:	0c03      	lsrs	r3, r0, #16
 800e972:	041b      	lsls	r3, r3, #16
 800e974:	b9d3      	cbnz	r3, 800e9ac <__hi0bits+0x3c>
 800e976:	0400      	lsls	r0, r0, #16
 800e978:	2310      	movs	r3, #16
 800e97a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e97e:	bf04      	itt	eq
 800e980:	0200      	lsleq	r0, r0, #8
 800e982:	3308      	addeq	r3, #8
 800e984:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e988:	bf04      	itt	eq
 800e98a:	0100      	lsleq	r0, r0, #4
 800e98c:	3304      	addeq	r3, #4
 800e98e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e992:	bf04      	itt	eq
 800e994:	0080      	lsleq	r0, r0, #2
 800e996:	3302      	addeq	r3, #2
 800e998:	2800      	cmp	r0, #0
 800e99a:	db05      	blt.n	800e9a8 <__hi0bits+0x38>
 800e99c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e9a0:	f103 0301 	add.w	r3, r3, #1
 800e9a4:	bf08      	it	eq
 800e9a6:	2320      	moveq	r3, #32
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	4770      	bx	lr
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	e7e4      	b.n	800e97a <__hi0bits+0xa>

0800e9b0 <__lo0bits>:
 800e9b0:	6803      	ldr	r3, [r0, #0]
 800e9b2:	f013 0207 	ands.w	r2, r3, #7
 800e9b6:	4601      	mov	r1, r0
 800e9b8:	d00b      	beq.n	800e9d2 <__lo0bits+0x22>
 800e9ba:	07da      	lsls	r2, r3, #31
 800e9bc:	d424      	bmi.n	800ea08 <__lo0bits+0x58>
 800e9be:	0798      	lsls	r0, r3, #30
 800e9c0:	bf49      	itett	mi
 800e9c2:	085b      	lsrmi	r3, r3, #1
 800e9c4:	089b      	lsrpl	r3, r3, #2
 800e9c6:	2001      	movmi	r0, #1
 800e9c8:	600b      	strmi	r3, [r1, #0]
 800e9ca:	bf5c      	itt	pl
 800e9cc:	600b      	strpl	r3, [r1, #0]
 800e9ce:	2002      	movpl	r0, #2
 800e9d0:	4770      	bx	lr
 800e9d2:	b298      	uxth	r0, r3
 800e9d4:	b9b0      	cbnz	r0, 800ea04 <__lo0bits+0x54>
 800e9d6:	0c1b      	lsrs	r3, r3, #16
 800e9d8:	2010      	movs	r0, #16
 800e9da:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e9de:	bf04      	itt	eq
 800e9e0:	0a1b      	lsreq	r3, r3, #8
 800e9e2:	3008      	addeq	r0, #8
 800e9e4:	071a      	lsls	r2, r3, #28
 800e9e6:	bf04      	itt	eq
 800e9e8:	091b      	lsreq	r3, r3, #4
 800e9ea:	3004      	addeq	r0, #4
 800e9ec:	079a      	lsls	r2, r3, #30
 800e9ee:	bf04      	itt	eq
 800e9f0:	089b      	lsreq	r3, r3, #2
 800e9f2:	3002      	addeq	r0, #2
 800e9f4:	07da      	lsls	r2, r3, #31
 800e9f6:	d403      	bmi.n	800ea00 <__lo0bits+0x50>
 800e9f8:	085b      	lsrs	r3, r3, #1
 800e9fa:	f100 0001 	add.w	r0, r0, #1
 800e9fe:	d005      	beq.n	800ea0c <__lo0bits+0x5c>
 800ea00:	600b      	str	r3, [r1, #0]
 800ea02:	4770      	bx	lr
 800ea04:	4610      	mov	r0, r2
 800ea06:	e7e8      	b.n	800e9da <__lo0bits+0x2a>
 800ea08:	2000      	movs	r0, #0
 800ea0a:	4770      	bx	lr
 800ea0c:	2020      	movs	r0, #32
 800ea0e:	4770      	bx	lr

0800ea10 <__i2b>:
 800ea10:	b510      	push	{r4, lr}
 800ea12:	460c      	mov	r4, r1
 800ea14:	2101      	movs	r1, #1
 800ea16:	f7ff feff 	bl	800e818 <_Balloc>
 800ea1a:	4602      	mov	r2, r0
 800ea1c:	b928      	cbnz	r0, 800ea2a <__i2b+0x1a>
 800ea1e:	4b05      	ldr	r3, [pc, #20]	; (800ea34 <__i2b+0x24>)
 800ea20:	4805      	ldr	r0, [pc, #20]	; (800ea38 <__i2b+0x28>)
 800ea22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ea26:	f000 fe71 	bl	800f70c <__assert_func>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	6144      	str	r4, [r0, #20]
 800ea2e:	6103      	str	r3, [r0, #16]
 800ea30:	bd10      	pop	{r4, pc}
 800ea32:	bf00      	nop
 800ea34:	080100d7 	.word	0x080100d7
 800ea38:	08010148 	.word	0x08010148

0800ea3c <__multiply>:
 800ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea40:	4614      	mov	r4, r2
 800ea42:	690a      	ldr	r2, [r1, #16]
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	bfb8      	it	lt
 800ea4a:	460b      	movlt	r3, r1
 800ea4c:	460d      	mov	r5, r1
 800ea4e:	bfbc      	itt	lt
 800ea50:	4625      	movlt	r5, r4
 800ea52:	461c      	movlt	r4, r3
 800ea54:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ea58:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ea5c:	68ab      	ldr	r3, [r5, #8]
 800ea5e:	6869      	ldr	r1, [r5, #4]
 800ea60:	eb0a 0709 	add.w	r7, sl, r9
 800ea64:	42bb      	cmp	r3, r7
 800ea66:	b085      	sub	sp, #20
 800ea68:	bfb8      	it	lt
 800ea6a:	3101      	addlt	r1, #1
 800ea6c:	f7ff fed4 	bl	800e818 <_Balloc>
 800ea70:	b930      	cbnz	r0, 800ea80 <__multiply+0x44>
 800ea72:	4602      	mov	r2, r0
 800ea74:	4b42      	ldr	r3, [pc, #264]	; (800eb80 <__multiply+0x144>)
 800ea76:	4843      	ldr	r0, [pc, #268]	; (800eb84 <__multiply+0x148>)
 800ea78:	f240 115d 	movw	r1, #349	; 0x15d
 800ea7c:	f000 fe46 	bl	800f70c <__assert_func>
 800ea80:	f100 0614 	add.w	r6, r0, #20
 800ea84:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ea88:	4633      	mov	r3, r6
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4543      	cmp	r3, r8
 800ea8e:	d31e      	bcc.n	800eace <__multiply+0x92>
 800ea90:	f105 0c14 	add.w	ip, r5, #20
 800ea94:	f104 0314 	add.w	r3, r4, #20
 800ea98:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ea9c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800eaa0:	9202      	str	r2, [sp, #8]
 800eaa2:	ebac 0205 	sub.w	r2, ip, r5
 800eaa6:	3a15      	subs	r2, #21
 800eaa8:	f022 0203 	bic.w	r2, r2, #3
 800eaac:	3204      	adds	r2, #4
 800eaae:	f105 0115 	add.w	r1, r5, #21
 800eab2:	458c      	cmp	ip, r1
 800eab4:	bf38      	it	cc
 800eab6:	2204      	movcc	r2, #4
 800eab8:	9201      	str	r2, [sp, #4]
 800eaba:	9a02      	ldr	r2, [sp, #8]
 800eabc:	9303      	str	r3, [sp, #12]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d808      	bhi.n	800ead4 <__multiply+0x98>
 800eac2:	2f00      	cmp	r7, #0
 800eac4:	dc55      	bgt.n	800eb72 <__multiply+0x136>
 800eac6:	6107      	str	r7, [r0, #16]
 800eac8:	b005      	add	sp, #20
 800eaca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eace:	f843 2b04 	str.w	r2, [r3], #4
 800ead2:	e7db      	b.n	800ea8c <__multiply+0x50>
 800ead4:	f8b3 a000 	ldrh.w	sl, [r3]
 800ead8:	f1ba 0f00 	cmp.w	sl, #0
 800eadc:	d020      	beq.n	800eb20 <__multiply+0xe4>
 800eade:	f105 0e14 	add.w	lr, r5, #20
 800eae2:	46b1      	mov	r9, r6
 800eae4:	2200      	movs	r2, #0
 800eae6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800eaea:	f8d9 b000 	ldr.w	fp, [r9]
 800eaee:	b2a1      	uxth	r1, r4
 800eaf0:	fa1f fb8b 	uxth.w	fp, fp
 800eaf4:	fb0a b101 	mla	r1, sl, r1, fp
 800eaf8:	4411      	add	r1, r2
 800eafa:	f8d9 2000 	ldr.w	r2, [r9]
 800eafe:	0c24      	lsrs	r4, r4, #16
 800eb00:	0c12      	lsrs	r2, r2, #16
 800eb02:	fb0a 2404 	mla	r4, sl, r4, r2
 800eb06:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800eb0a:	b289      	uxth	r1, r1
 800eb0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800eb10:	45f4      	cmp	ip, lr
 800eb12:	f849 1b04 	str.w	r1, [r9], #4
 800eb16:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800eb1a:	d8e4      	bhi.n	800eae6 <__multiply+0xaa>
 800eb1c:	9901      	ldr	r1, [sp, #4]
 800eb1e:	5072      	str	r2, [r6, r1]
 800eb20:	9a03      	ldr	r2, [sp, #12]
 800eb22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb26:	3304      	adds	r3, #4
 800eb28:	f1b9 0f00 	cmp.w	r9, #0
 800eb2c:	d01f      	beq.n	800eb6e <__multiply+0x132>
 800eb2e:	6834      	ldr	r4, [r6, #0]
 800eb30:	f105 0114 	add.w	r1, r5, #20
 800eb34:	46b6      	mov	lr, r6
 800eb36:	f04f 0a00 	mov.w	sl, #0
 800eb3a:	880a      	ldrh	r2, [r1, #0]
 800eb3c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800eb40:	fb09 b202 	mla	r2, r9, r2, fp
 800eb44:	4492      	add	sl, r2
 800eb46:	b2a4      	uxth	r4, r4
 800eb48:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eb4c:	f84e 4b04 	str.w	r4, [lr], #4
 800eb50:	f851 4b04 	ldr.w	r4, [r1], #4
 800eb54:	f8be 2000 	ldrh.w	r2, [lr]
 800eb58:	0c24      	lsrs	r4, r4, #16
 800eb5a:	fb09 2404 	mla	r4, r9, r4, r2
 800eb5e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800eb62:	458c      	cmp	ip, r1
 800eb64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eb68:	d8e7      	bhi.n	800eb3a <__multiply+0xfe>
 800eb6a:	9a01      	ldr	r2, [sp, #4]
 800eb6c:	50b4      	str	r4, [r6, r2]
 800eb6e:	3604      	adds	r6, #4
 800eb70:	e7a3      	b.n	800eaba <__multiply+0x7e>
 800eb72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1a5      	bne.n	800eac6 <__multiply+0x8a>
 800eb7a:	3f01      	subs	r7, #1
 800eb7c:	e7a1      	b.n	800eac2 <__multiply+0x86>
 800eb7e:	bf00      	nop
 800eb80:	080100d7 	.word	0x080100d7
 800eb84:	08010148 	.word	0x08010148

0800eb88 <__pow5mult>:
 800eb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb8c:	4615      	mov	r5, r2
 800eb8e:	f012 0203 	ands.w	r2, r2, #3
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	d007      	beq.n	800eba8 <__pow5mult+0x20>
 800eb98:	4c25      	ldr	r4, [pc, #148]	; (800ec30 <__pow5mult+0xa8>)
 800eb9a:	3a01      	subs	r2, #1
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eba2:	f7ff fe9b 	bl	800e8dc <__multadd>
 800eba6:	4607      	mov	r7, r0
 800eba8:	10ad      	asrs	r5, r5, #2
 800ebaa:	d03d      	beq.n	800ec28 <__pow5mult+0xa0>
 800ebac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ebae:	b97c      	cbnz	r4, 800ebd0 <__pow5mult+0x48>
 800ebb0:	2010      	movs	r0, #16
 800ebb2:	f7ff fe29 	bl	800e808 <malloc>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	6270      	str	r0, [r6, #36]	; 0x24
 800ebba:	b928      	cbnz	r0, 800ebc8 <__pow5mult+0x40>
 800ebbc:	4b1d      	ldr	r3, [pc, #116]	; (800ec34 <__pow5mult+0xac>)
 800ebbe:	481e      	ldr	r0, [pc, #120]	; (800ec38 <__pow5mult+0xb0>)
 800ebc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ebc4:	f000 fda2 	bl	800f70c <__assert_func>
 800ebc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebcc:	6004      	str	r4, [r0, #0]
 800ebce:	60c4      	str	r4, [r0, #12]
 800ebd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ebd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebd8:	b94c      	cbnz	r4, 800ebee <__pow5mult+0x66>
 800ebda:	f240 2171 	movw	r1, #625	; 0x271
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f7ff ff16 	bl	800ea10 <__i2b>
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebea:	4604      	mov	r4, r0
 800ebec:	6003      	str	r3, [r0, #0]
 800ebee:	f04f 0900 	mov.w	r9, #0
 800ebf2:	07eb      	lsls	r3, r5, #31
 800ebf4:	d50a      	bpl.n	800ec0c <__pow5mult+0x84>
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f7ff ff1e 	bl	800ea3c <__multiply>
 800ec00:	4639      	mov	r1, r7
 800ec02:	4680      	mov	r8, r0
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff fe47 	bl	800e898 <_Bfree>
 800ec0a:	4647      	mov	r7, r8
 800ec0c:	106d      	asrs	r5, r5, #1
 800ec0e:	d00b      	beq.n	800ec28 <__pow5mult+0xa0>
 800ec10:	6820      	ldr	r0, [r4, #0]
 800ec12:	b938      	cbnz	r0, 800ec24 <__pow5mult+0x9c>
 800ec14:	4622      	mov	r2, r4
 800ec16:	4621      	mov	r1, r4
 800ec18:	4630      	mov	r0, r6
 800ec1a:	f7ff ff0f 	bl	800ea3c <__multiply>
 800ec1e:	6020      	str	r0, [r4, #0]
 800ec20:	f8c0 9000 	str.w	r9, [r0]
 800ec24:	4604      	mov	r4, r0
 800ec26:	e7e4      	b.n	800ebf2 <__pow5mult+0x6a>
 800ec28:	4638      	mov	r0, r7
 800ec2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec2e:	bf00      	nop
 800ec30:	08010298 	.word	0x08010298
 800ec34:	08010061 	.word	0x08010061
 800ec38:	08010148 	.word	0x08010148

0800ec3c <__lshift>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	460c      	mov	r4, r1
 800ec42:	6849      	ldr	r1, [r1, #4]
 800ec44:	6923      	ldr	r3, [r4, #16]
 800ec46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	4607      	mov	r7, r0
 800ec4e:	4691      	mov	r9, r2
 800ec50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec54:	f108 0601 	add.w	r6, r8, #1
 800ec58:	42b3      	cmp	r3, r6
 800ec5a:	db0b      	blt.n	800ec74 <__lshift+0x38>
 800ec5c:	4638      	mov	r0, r7
 800ec5e:	f7ff fddb 	bl	800e818 <_Balloc>
 800ec62:	4605      	mov	r5, r0
 800ec64:	b948      	cbnz	r0, 800ec7a <__lshift+0x3e>
 800ec66:	4602      	mov	r2, r0
 800ec68:	4b28      	ldr	r3, [pc, #160]	; (800ed0c <__lshift+0xd0>)
 800ec6a:	4829      	ldr	r0, [pc, #164]	; (800ed10 <__lshift+0xd4>)
 800ec6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec70:	f000 fd4c 	bl	800f70c <__assert_func>
 800ec74:	3101      	adds	r1, #1
 800ec76:	005b      	lsls	r3, r3, #1
 800ec78:	e7ee      	b.n	800ec58 <__lshift+0x1c>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f100 0114 	add.w	r1, r0, #20
 800ec80:	f100 0210 	add.w	r2, r0, #16
 800ec84:	4618      	mov	r0, r3
 800ec86:	4553      	cmp	r3, sl
 800ec88:	db33      	blt.n	800ecf2 <__lshift+0xb6>
 800ec8a:	6920      	ldr	r0, [r4, #16]
 800ec8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec90:	f104 0314 	add.w	r3, r4, #20
 800ec94:	f019 091f 	ands.w	r9, r9, #31
 800ec98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eca0:	d02b      	beq.n	800ecfa <__lshift+0xbe>
 800eca2:	f1c9 0e20 	rsb	lr, r9, #32
 800eca6:	468a      	mov	sl, r1
 800eca8:	2200      	movs	r2, #0
 800ecaa:	6818      	ldr	r0, [r3, #0]
 800ecac:	fa00 f009 	lsl.w	r0, r0, r9
 800ecb0:	4302      	orrs	r2, r0
 800ecb2:	f84a 2b04 	str.w	r2, [sl], #4
 800ecb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecba:	459c      	cmp	ip, r3
 800ecbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800ecc0:	d8f3      	bhi.n	800ecaa <__lshift+0x6e>
 800ecc2:	ebac 0304 	sub.w	r3, ip, r4
 800ecc6:	3b15      	subs	r3, #21
 800ecc8:	f023 0303 	bic.w	r3, r3, #3
 800eccc:	3304      	adds	r3, #4
 800ecce:	f104 0015 	add.w	r0, r4, #21
 800ecd2:	4584      	cmp	ip, r0
 800ecd4:	bf38      	it	cc
 800ecd6:	2304      	movcc	r3, #4
 800ecd8:	50ca      	str	r2, [r1, r3]
 800ecda:	b10a      	cbz	r2, 800ece0 <__lshift+0xa4>
 800ecdc:	f108 0602 	add.w	r6, r8, #2
 800ece0:	3e01      	subs	r6, #1
 800ece2:	4638      	mov	r0, r7
 800ece4:	612e      	str	r6, [r5, #16]
 800ece6:	4621      	mov	r1, r4
 800ece8:	f7ff fdd6 	bl	800e898 <_Bfree>
 800ecec:	4628      	mov	r0, r5
 800ecee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecf6:	3301      	adds	r3, #1
 800ecf8:	e7c5      	b.n	800ec86 <__lshift+0x4a>
 800ecfa:	3904      	subs	r1, #4
 800ecfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed00:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed04:	459c      	cmp	ip, r3
 800ed06:	d8f9      	bhi.n	800ecfc <__lshift+0xc0>
 800ed08:	e7ea      	b.n	800ece0 <__lshift+0xa4>
 800ed0a:	bf00      	nop
 800ed0c:	080100d7 	.word	0x080100d7
 800ed10:	08010148 	.word	0x08010148

0800ed14 <__mcmp>:
 800ed14:	b530      	push	{r4, r5, lr}
 800ed16:	6902      	ldr	r2, [r0, #16]
 800ed18:	690c      	ldr	r4, [r1, #16]
 800ed1a:	1b12      	subs	r2, r2, r4
 800ed1c:	d10e      	bne.n	800ed3c <__mcmp+0x28>
 800ed1e:	f100 0314 	add.w	r3, r0, #20
 800ed22:	3114      	adds	r1, #20
 800ed24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed34:	42a5      	cmp	r5, r4
 800ed36:	d003      	beq.n	800ed40 <__mcmp+0x2c>
 800ed38:	d305      	bcc.n	800ed46 <__mcmp+0x32>
 800ed3a:	2201      	movs	r2, #1
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	bd30      	pop	{r4, r5, pc}
 800ed40:	4283      	cmp	r3, r0
 800ed42:	d3f3      	bcc.n	800ed2c <__mcmp+0x18>
 800ed44:	e7fa      	b.n	800ed3c <__mcmp+0x28>
 800ed46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed4a:	e7f7      	b.n	800ed3c <__mcmp+0x28>

0800ed4c <__mdiff>:
 800ed4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	460c      	mov	r4, r1
 800ed52:	4606      	mov	r6, r0
 800ed54:	4611      	mov	r1, r2
 800ed56:	4620      	mov	r0, r4
 800ed58:	4617      	mov	r7, r2
 800ed5a:	f7ff ffdb 	bl	800ed14 <__mcmp>
 800ed5e:	1e05      	subs	r5, r0, #0
 800ed60:	d110      	bne.n	800ed84 <__mdiff+0x38>
 800ed62:	4629      	mov	r1, r5
 800ed64:	4630      	mov	r0, r6
 800ed66:	f7ff fd57 	bl	800e818 <_Balloc>
 800ed6a:	b930      	cbnz	r0, 800ed7a <__mdiff+0x2e>
 800ed6c:	4b39      	ldr	r3, [pc, #228]	; (800ee54 <__mdiff+0x108>)
 800ed6e:	4602      	mov	r2, r0
 800ed70:	f240 2132 	movw	r1, #562	; 0x232
 800ed74:	4838      	ldr	r0, [pc, #224]	; (800ee58 <__mdiff+0x10c>)
 800ed76:	f000 fcc9 	bl	800f70c <__assert_func>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	bfa4      	itt	ge
 800ed86:	463b      	movge	r3, r7
 800ed88:	4627      	movge	r7, r4
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	6879      	ldr	r1, [r7, #4]
 800ed8e:	bfa6      	itte	ge
 800ed90:	461c      	movge	r4, r3
 800ed92:	2500      	movge	r5, #0
 800ed94:	2501      	movlt	r5, #1
 800ed96:	f7ff fd3f 	bl	800e818 <_Balloc>
 800ed9a:	b920      	cbnz	r0, 800eda6 <__mdiff+0x5a>
 800ed9c:	4b2d      	ldr	r3, [pc, #180]	; (800ee54 <__mdiff+0x108>)
 800ed9e:	4602      	mov	r2, r0
 800eda0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eda4:	e7e6      	b.n	800ed74 <__mdiff+0x28>
 800eda6:	693e      	ldr	r6, [r7, #16]
 800eda8:	60c5      	str	r5, [r0, #12]
 800edaa:	6925      	ldr	r5, [r4, #16]
 800edac:	f107 0114 	add.w	r1, r7, #20
 800edb0:	f104 0914 	add.w	r9, r4, #20
 800edb4:	f100 0e14 	add.w	lr, r0, #20
 800edb8:	f107 0210 	add.w	r2, r7, #16
 800edbc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800edc0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800edc4:	46f2      	mov	sl, lr
 800edc6:	2700      	movs	r7, #0
 800edc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800edcc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edd0:	fa1f f883 	uxth.w	r8, r3
 800edd4:	fa17 f78b 	uxtah	r7, r7, fp
 800edd8:	0c1b      	lsrs	r3, r3, #16
 800edda:	eba7 0808 	sub.w	r8, r7, r8
 800edde:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ede2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ede6:	fa1f f888 	uxth.w	r8, r8
 800edea:	141f      	asrs	r7, r3, #16
 800edec:	454d      	cmp	r5, r9
 800edee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edf2:	f84a 3b04 	str.w	r3, [sl], #4
 800edf6:	d8e7      	bhi.n	800edc8 <__mdiff+0x7c>
 800edf8:	1b2b      	subs	r3, r5, r4
 800edfa:	3b15      	subs	r3, #21
 800edfc:	f023 0303 	bic.w	r3, r3, #3
 800ee00:	3304      	adds	r3, #4
 800ee02:	3415      	adds	r4, #21
 800ee04:	42a5      	cmp	r5, r4
 800ee06:	bf38      	it	cc
 800ee08:	2304      	movcc	r3, #4
 800ee0a:	4419      	add	r1, r3
 800ee0c:	4473      	add	r3, lr
 800ee0e:	469e      	mov	lr, r3
 800ee10:	460d      	mov	r5, r1
 800ee12:	4565      	cmp	r5, ip
 800ee14:	d30e      	bcc.n	800ee34 <__mdiff+0xe8>
 800ee16:	f10c 0203 	add.w	r2, ip, #3
 800ee1a:	1a52      	subs	r2, r2, r1
 800ee1c:	f022 0203 	bic.w	r2, r2, #3
 800ee20:	3903      	subs	r1, #3
 800ee22:	458c      	cmp	ip, r1
 800ee24:	bf38      	it	cc
 800ee26:	2200      	movcc	r2, #0
 800ee28:	441a      	add	r2, r3
 800ee2a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee2e:	b17b      	cbz	r3, 800ee50 <__mdiff+0x104>
 800ee30:	6106      	str	r6, [r0, #16]
 800ee32:	e7a5      	b.n	800ed80 <__mdiff+0x34>
 800ee34:	f855 8b04 	ldr.w	r8, [r5], #4
 800ee38:	fa17 f488 	uxtah	r4, r7, r8
 800ee3c:	1422      	asrs	r2, r4, #16
 800ee3e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ee42:	b2a4      	uxth	r4, r4
 800ee44:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ee48:	f84e 4b04 	str.w	r4, [lr], #4
 800ee4c:	1417      	asrs	r7, r2, #16
 800ee4e:	e7e0      	b.n	800ee12 <__mdiff+0xc6>
 800ee50:	3e01      	subs	r6, #1
 800ee52:	e7ea      	b.n	800ee2a <__mdiff+0xde>
 800ee54:	080100d7 	.word	0x080100d7
 800ee58:	08010148 	.word	0x08010148

0800ee5c <__d2b>:
 800ee5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee60:	4689      	mov	r9, r1
 800ee62:	2101      	movs	r1, #1
 800ee64:	ec57 6b10 	vmov	r6, r7, d0
 800ee68:	4690      	mov	r8, r2
 800ee6a:	f7ff fcd5 	bl	800e818 <_Balloc>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	b930      	cbnz	r0, 800ee80 <__d2b+0x24>
 800ee72:	4602      	mov	r2, r0
 800ee74:	4b25      	ldr	r3, [pc, #148]	; (800ef0c <__d2b+0xb0>)
 800ee76:	4826      	ldr	r0, [pc, #152]	; (800ef10 <__d2b+0xb4>)
 800ee78:	f240 310a 	movw	r1, #778	; 0x30a
 800ee7c:	f000 fc46 	bl	800f70c <__assert_func>
 800ee80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee88:	bb35      	cbnz	r5, 800eed8 <__d2b+0x7c>
 800ee8a:	2e00      	cmp	r6, #0
 800ee8c:	9301      	str	r3, [sp, #4]
 800ee8e:	d028      	beq.n	800eee2 <__d2b+0x86>
 800ee90:	4668      	mov	r0, sp
 800ee92:	9600      	str	r6, [sp, #0]
 800ee94:	f7ff fd8c 	bl	800e9b0 <__lo0bits>
 800ee98:	9900      	ldr	r1, [sp, #0]
 800ee9a:	b300      	cbz	r0, 800eede <__d2b+0x82>
 800ee9c:	9a01      	ldr	r2, [sp, #4]
 800ee9e:	f1c0 0320 	rsb	r3, r0, #32
 800eea2:	fa02 f303 	lsl.w	r3, r2, r3
 800eea6:	430b      	orrs	r3, r1
 800eea8:	40c2      	lsrs	r2, r0
 800eeaa:	6163      	str	r3, [r4, #20]
 800eeac:	9201      	str	r2, [sp, #4]
 800eeae:	9b01      	ldr	r3, [sp, #4]
 800eeb0:	61a3      	str	r3, [r4, #24]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	bf14      	ite	ne
 800eeb6:	2202      	movne	r2, #2
 800eeb8:	2201      	moveq	r2, #1
 800eeba:	6122      	str	r2, [r4, #16]
 800eebc:	b1d5      	cbz	r5, 800eef4 <__d2b+0x98>
 800eebe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eec2:	4405      	add	r5, r0
 800eec4:	f8c9 5000 	str.w	r5, [r9]
 800eec8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eecc:	f8c8 0000 	str.w	r0, [r8]
 800eed0:	4620      	mov	r0, r4
 800eed2:	b003      	add	sp, #12
 800eed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eedc:	e7d5      	b.n	800ee8a <__d2b+0x2e>
 800eede:	6161      	str	r1, [r4, #20]
 800eee0:	e7e5      	b.n	800eeae <__d2b+0x52>
 800eee2:	a801      	add	r0, sp, #4
 800eee4:	f7ff fd64 	bl	800e9b0 <__lo0bits>
 800eee8:	9b01      	ldr	r3, [sp, #4]
 800eeea:	6163      	str	r3, [r4, #20]
 800eeec:	2201      	movs	r2, #1
 800eeee:	6122      	str	r2, [r4, #16]
 800eef0:	3020      	adds	r0, #32
 800eef2:	e7e3      	b.n	800eebc <__d2b+0x60>
 800eef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eefc:	f8c9 0000 	str.w	r0, [r9]
 800ef00:	6918      	ldr	r0, [r3, #16]
 800ef02:	f7ff fd35 	bl	800e970 <__hi0bits>
 800ef06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ef0a:	e7df      	b.n	800eecc <__d2b+0x70>
 800ef0c:	080100d7 	.word	0x080100d7
 800ef10:	08010148 	.word	0x08010148

0800ef14 <_calloc_r>:
 800ef14:	b513      	push	{r0, r1, r4, lr}
 800ef16:	434a      	muls	r2, r1
 800ef18:	4611      	mov	r1, r2
 800ef1a:	9201      	str	r2, [sp, #4]
 800ef1c:	f000 f85a 	bl	800efd4 <_malloc_r>
 800ef20:	4604      	mov	r4, r0
 800ef22:	b118      	cbz	r0, 800ef2c <_calloc_r+0x18>
 800ef24:	9a01      	ldr	r2, [sp, #4]
 800ef26:	2100      	movs	r1, #0
 800ef28:	f7fd fd90 	bl	800ca4c <memset>
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	b002      	add	sp, #8
 800ef30:	bd10      	pop	{r4, pc}
	...

0800ef34 <_free_r>:
 800ef34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef36:	2900      	cmp	r1, #0
 800ef38:	d048      	beq.n	800efcc <_free_r+0x98>
 800ef3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef3e:	9001      	str	r0, [sp, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	f1a1 0404 	sub.w	r4, r1, #4
 800ef46:	bfb8      	it	lt
 800ef48:	18e4      	addlt	r4, r4, r3
 800ef4a:	f000 fc7f 	bl	800f84c <__malloc_lock>
 800ef4e:	4a20      	ldr	r2, [pc, #128]	; (800efd0 <_free_r+0x9c>)
 800ef50:	9801      	ldr	r0, [sp, #4]
 800ef52:	6813      	ldr	r3, [r2, #0]
 800ef54:	4615      	mov	r5, r2
 800ef56:	b933      	cbnz	r3, 800ef66 <_free_r+0x32>
 800ef58:	6063      	str	r3, [r4, #4]
 800ef5a:	6014      	str	r4, [r2, #0]
 800ef5c:	b003      	add	sp, #12
 800ef5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef62:	f000 bc79 	b.w	800f858 <__malloc_unlock>
 800ef66:	42a3      	cmp	r3, r4
 800ef68:	d90b      	bls.n	800ef82 <_free_r+0x4e>
 800ef6a:	6821      	ldr	r1, [r4, #0]
 800ef6c:	1862      	adds	r2, r4, r1
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	bf04      	itt	eq
 800ef72:	681a      	ldreq	r2, [r3, #0]
 800ef74:	685b      	ldreq	r3, [r3, #4]
 800ef76:	6063      	str	r3, [r4, #4]
 800ef78:	bf04      	itt	eq
 800ef7a:	1852      	addeq	r2, r2, r1
 800ef7c:	6022      	streq	r2, [r4, #0]
 800ef7e:	602c      	str	r4, [r5, #0]
 800ef80:	e7ec      	b.n	800ef5c <_free_r+0x28>
 800ef82:	461a      	mov	r2, r3
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	b10b      	cbz	r3, 800ef8c <_free_r+0x58>
 800ef88:	42a3      	cmp	r3, r4
 800ef8a:	d9fa      	bls.n	800ef82 <_free_r+0x4e>
 800ef8c:	6811      	ldr	r1, [r2, #0]
 800ef8e:	1855      	adds	r5, r2, r1
 800ef90:	42a5      	cmp	r5, r4
 800ef92:	d10b      	bne.n	800efac <_free_r+0x78>
 800ef94:	6824      	ldr	r4, [r4, #0]
 800ef96:	4421      	add	r1, r4
 800ef98:	1854      	adds	r4, r2, r1
 800ef9a:	42a3      	cmp	r3, r4
 800ef9c:	6011      	str	r1, [r2, #0]
 800ef9e:	d1dd      	bne.n	800ef5c <_free_r+0x28>
 800efa0:	681c      	ldr	r4, [r3, #0]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	6053      	str	r3, [r2, #4]
 800efa6:	4421      	add	r1, r4
 800efa8:	6011      	str	r1, [r2, #0]
 800efaa:	e7d7      	b.n	800ef5c <_free_r+0x28>
 800efac:	d902      	bls.n	800efb4 <_free_r+0x80>
 800efae:	230c      	movs	r3, #12
 800efb0:	6003      	str	r3, [r0, #0]
 800efb2:	e7d3      	b.n	800ef5c <_free_r+0x28>
 800efb4:	6825      	ldr	r5, [r4, #0]
 800efb6:	1961      	adds	r1, r4, r5
 800efb8:	428b      	cmp	r3, r1
 800efba:	bf04      	itt	eq
 800efbc:	6819      	ldreq	r1, [r3, #0]
 800efbe:	685b      	ldreq	r3, [r3, #4]
 800efc0:	6063      	str	r3, [r4, #4]
 800efc2:	bf04      	itt	eq
 800efc4:	1949      	addeq	r1, r1, r5
 800efc6:	6021      	streq	r1, [r4, #0]
 800efc8:	6054      	str	r4, [r2, #4]
 800efca:	e7c7      	b.n	800ef5c <_free_r+0x28>
 800efcc:	b003      	add	sp, #12
 800efce:	bd30      	pop	{r4, r5, pc}
 800efd0:	20002b64 	.word	0x20002b64

0800efd4 <_malloc_r>:
 800efd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efd6:	1ccd      	adds	r5, r1, #3
 800efd8:	f025 0503 	bic.w	r5, r5, #3
 800efdc:	3508      	adds	r5, #8
 800efde:	2d0c      	cmp	r5, #12
 800efe0:	bf38      	it	cc
 800efe2:	250c      	movcc	r5, #12
 800efe4:	2d00      	cmp	r5, #0
 800efe6:	4606      	mov	r6, r0
 800efe8:	db01      	blt.n	800efee <_malloc_r+0x1a>
 800efea:	42a9      	cmp	r1, r5
 800efec:	d903      	bls.n	800eff6 <_malloc_r+0x22>
 800efee:	230c      	movs	r3, #12
 800eff0:	6033      	str	r3, [r6, #0]
 800eff2:	2000      	movs	r0, #0
 800eff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eff6:	f000 fc29 	bl	800f84c <__malloc_lock>
 800effa:	4921      	ldr	r1, [pc, #132]	; (800f080 <_malloc_r+0xac>)
 800effc:	680a      	ldr	r2, [r1, #0]
 800effe:	4614      	mov	r4, r2
 800f000:	b99c      	cbnz	r4, 800f02a <_malloc_r+0x56>
 800f002:	4f20      	ldr	r7, [pc, #128]	; (800f084 <_malloc_r+0xb0>)
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	b923      	cbnz	r3, 800f012 <_malloc_r+0x3e>
 800f008:	4621      	mov	r1, r4
 800f00a:	4630      	mov	r0, r6
 800f00c:	f000 fb18 	bl	800f640 <_sbrk_r>
 800f010:	6038      	str	r0, [r7, #0]
 800f012:	4629      	mov	r1, r5
 800f014:	4630      	mov	r0, r6
 800f016:	f000 fb13 	bl	800f640 <_sbrk_r>
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	d123      	bne.n	800f066 <_malloc_r+0x92>
 800f01e:	230c      	movs	r3, #12
 800f020:	6033      	str	r3, [r6, #0]
 800f022:	4630      	mov	r0, r6
 800f024:	f000 fc18 	bl	800f858 <__malloc_unlock>
 800f028:	e7e3      	b.n	800eff2 <_malloc_r+0x1e>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	1b5b      	subs	r3, r3, r5
 800f02e:	d417      	bmi.n	800f060 <_malloc_r+0x8c>
 800f030:	2b0b      	cmp	r3, #11
 800f032:	d903      	bls.n	800f03c <_malloc_r+0x68>
 800f034:	6023      	str	r3, [r4, #0]
 800f036:	441c      	add	r4, r3
 800f038:	6025      	str	r5, [r4, #0]
 800f03a:	e004      	b.n	800f046 <_malloc_r+0x72>
 800f03c:	6863      	ldr	r3, [r4, #4]
 800f03e:	42a2      	cmp	r2, r4
 800f040:	bf0c      	ite	eq
 800f042:	600b      	streq	r3, [r1, #0]
 800f044:	6053      	strne	r3, [r2, #4]
 800f046:	4630      	mov	r0, r6
 800f048:	f000 fc06 	bl	800f858 <__malloc_unlock>
 800f04c:	f104 000b 	add.w	r0, r4, #11
 800f050:	1d23      	adds	r3, r4, #4
 800f052:	f020 0007 	bic.w	r0, r0, #7
 800f056:	1ac2      	subs	r2, r0, r3
 800f058:	d0cc      	beq.n	800eff4 <_malloc_r+0x20>
 800f05a:	1a1b      	subs	r3, r3, r0
 800f05c:	50a3      	str	r3, [r4, r2]
 800f05e:	e7c9      	b.n	800eff4 <_malloc_r+0x20>
 800f060:	4622      	mov	r2, r4
 800f062:	6864      	ldr	r4, [r4, #4]
 800f064:	e7cc      	b.n	800f000 <_malloc_r+0x2c>
 800f066:	1cc4      	adds	r4, r0, #3
 800f068:	f024 0403 	bic.w	r4, r4, #3
 800f06c:	42a0      	cmp	r0, r4
 800f06e:	d0e3      	beq.n	800f038 <_malloc_r+0x64>
 800f070:	1a21      	subs	r1, r4, r0
 800f072:	4630      	mov	r0, r6
 800f074:	f000 fae4 	bl	800f640 <_sbrk_r>
 800f078:	3001      	adds	r0, #1
 800f07a:	d1dd      	bne.n	800f038 <_malloc_r+0x64>
 800f07c:	e7cf      	b.n	800f01e <_malloc_r+0x4a>
 800f07e:	bf00      	nop
 800f080:	20002b64 	.word	0x20002b64
 800f084:	20002b68 	.word	0x20002b68

0800f088 <_realloc_r>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	4607      	mov	r7, r0
 800f08c:	4614      	mov	r4, r2
 800f08e:	460e      	mov	r6, r1
 800f090:	b921      	cbnz	r1, 800f09c <_realloc_r+0x14>
 800f092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f096:	4611      	mov	r1, r2
 800f098:	f7ff bf9c 	b.w	800efd4 <_malloc_r>
 800f09c:	b922      	cbnz	r2, 800f0a8 <_realloc_r+0x20>
 800f09e:	f7ff ff49 	bl	800ef34 <_free_r>
 800f0a2:	4625      	mov	r5, r4
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0a8:	f000 fbdc 	bl	800f864 <_malloc_usable_size_r>
 800f0ac:	42a0      	cmp	r0, r4
 800f0ae:	d20f      	bcs.n	800f0d0 <_realloc_r+0x48>
 800f0b0:	4621      	mov	r1, r4
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f7ff ff8e 	bl	800efd4 <_malloc_r>
 800f0b8:	4605      	mov	r5, r0
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d0f2      	beq.n	800f0a4 <_realloc_r+0x1c>
 800f0be:	4631      	mov	r1, r6
 800f0c0:	4622      	mov	r2, r4
 800f0c2:	f7fd fcb5 	bl	800ca30 <memcpy>
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	4638      	mov	r0, r7
 800f0ca:	f7ff ff33 	bl	800ef34 <_free_r>
 800f0ce:	e7e9      	b.n	800f0a4 <_realloc_r+0x1c>
 800f0d0:	4635      	mov	r5, r6
 800f0d2:	e7e7      	b.n	800f0a4 <_realloc_r+0x1c>

0800f0d4 <__ssputs_r>:
 800f0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d8:	688e      	ldr	r6, [r1, #8]
 800f0da:	429e      	cmp	r6, r3
 800f0dc:	4682      	mov	sl, r0
 800f0de:	460c      	mov	r4, r1
 800f0e0:	4690      	mov	r8, r2
 800f0e2:	461f      	mov	r7, r3
 800f0e4:	d838      	bhi.n	800f158 <__ssputs_r+0x84>
 800f0e6:	898a      	ldrh	r2, [r1, #12]
 800f0e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f0ec:	d032      	beq.n	800f154 <__ssputs_r+0x80>
 800f0ee:	6825      	ldr	r5, [r4, #0]
 800f0f0:	6909      	ldr	r1, [r1, #16]
 800f0f2:	eba5 0901 	sub.w	r9, r5, r1
 800f0f6:	6965      	ldr	r5, [r4, #20]
 800f0f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f100:	3301      	adds	r3, #1
 800f102:	444b      	add	r3, r9
 800f104:	106d      	asrs	r5, r5, #1
 800f106:	429d      	cmp	r5, r3
 800f108:	bf38      	it	cc
 800f10a:	461d      	movcc	r5, r3
 800f10c:	0553      	lsls	r3, r2, #21
 800f10e:	d531      	bpl.n	800f174 <__ssputs_r+0xa0>
 800f110:	4629      	mov	r1, r5
 800f112:	f7ff ff5f 	bl	800efd4 <_malloc_r>
 800f116:	4606      	mov	r6, r0
 800f118:	b950      	cbnz	r0, 800f130 <__ssputs_r+0x5c>
 800f11a:	230c      	movs	r3, #12
 800f11c:	f8ca 3000 	str.w	r3, [sl]
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f126:	81a3      	strh	r3, [r4, #12]
 800f128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f12c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f130:	6921      	ldr	r1, [r4, #16]
 800f132:	464a      	mov	r2, r9
 800f134:	f7fd fc7c 	bl	800ca30 <memcpy>
 800f138:	89a3      	ldrh	r3, [r4, #12]
 800f13a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f13e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f142:	81a3      	strh	r3, [r4, #12]
 800f144:	6126      	str	r6, [r4, #16]
 800f146:	6165      	str	r5, [r4, #20]
 800f148:	444e      	add	r6, r9
 800f14a:	eba5 0509 	sub.w	r5, r5, r9
 800f14e:	6026      	str	r6, [r4, #0]
 800f150:	60a5      	str	r5, [r4, #8]
 800f152:	463e      	mov	r6, r7
 800f154:	42be      	cmp	r6, r7
 800f156:	d900      	bls.n	800f15a <__ssputs_r+0x86>
 800f158:	463e      	mov	r6, r7
 800f15a:	4632      	mov	r2, r6
 800f15c:	6820      	ldr	r0, [r4, #0]
 800f15e:	4641      	mov	r1, r8
 800f160:	f000 fb5a 	bl	800f818 <memmove>
 800f164:	68a3      	ldr	r3, [r4, #8]
 800f166:	6822      	ldr	r2, [r4, #0]
 800f168:	1b9b      	subs	r3, r3, r6
 800f16a:	4432      	add	r2, r6
 800f16c:	60a3      	str	r3, [r4, #8]
 800f16e:	6022      	str	r2, [r4, #0]
 800f170:	2000      	movs	r0, #0
 800f172:	e7db      	b.n	800f12c <__ssputs_r+0x58>
 800f174:	462a      	mov	r2, r5
 800f176:	f7ff ff87 	bl	800f088 <_realloc_r>
 800f17a:	4606      	mov	r6, r0
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d1e1      	bne.n	800f144 <__ssputs_r+0x70>
 800f180:	6921      	ldr	r1, [r4, #16]
 800f182:	4650      	mov	r0, sl
 800f184:	f7ff fed6 	bl	800ef34 <_free_r>
 800f188:	e7c7      	b.n	800f11a <__ssputs_r+0x46>
	...

0800f18c <_svfiprintf_r>:
 800f18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f190:	4698      	mov	r8, r3
 800f192:	898b      	ldrh	r3, [r1, #12]
 800f194:	061b      	lsls	r3, r3, #24
 800f196:	b09d      	sub	sp, #116	; 0x74
 800f198:	4607      	mov	r7, r0
 800f19a:	460d      	mov	r5, r1
 800f19c:	4614      	mov	r4, r2
 800f19e:	d50e      	bpl.n	800f1be <_svfiprintf_r+0x32>
 800f1a0:	690b      	ldr	r3, [r1, #16]
 800f1a2:	b963      	cbnz	r3, 800f1be <_svfiprintf_r+0x32>
 800f1a4:	2140      	movs	r1, #64	; 0x40
 800f1a6:	f7ff ff15 	bl	800efd4 <_malloc_r>
 800f1aa:	6028      	str	r0, [r5, #0]
 800f1ac:	6128      	str	r0, [r5, #16]
 800f1ae:	b920      	cbnz	r0, 800f1ba <_svfiprintf_r+0x2e>
 800f1b0:	230c      	movs	r3, #12
 800f1b2:	603b      	str	r3, [r7, #0]
 800f1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f1b8:	e0d1      	b.n	800f35e <_svfiprintf_r+0x1d2>
 800f1ba:	2340      	movs	r3, #64	; 0x40
 800f1bc:	616b      	str	r3, [r5, #20]
 800f1be:	2300      	movs	r3, #0
 800f1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c2:	2320      	movs	r3, #32
 800f1c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1cc:	2330      	movs	r3, #48	; 0x30
 800f1ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f378 <_svfiprintf_r+0x1ec>
 800f1d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1d6:	f04f 0901 	mov.w	r9, #1
 800f1da:	4623      	mov	r3, r4
 800f1dc:	469a      	mov	sl, r3
 800f1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1e2:	b10a      	cbz	r2, 800f1e8 <_svfiprintf_r+0x5c>
 800f1e4:	2a25      	cmp	r2, #37	; 0x25
 800f1e6:	d1f9      	bne.n	800f1dc <_svfiprintf_r+0x50>
 800f1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800f1ec:	d00b      	beq.n	800f206 <_svfiprintf_r+0x7a>
 800f1ee:	465b      	mov	r3, fp
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	4638      	mov	r0, r7
 800f1f6:	f7ff ff6d 	bl	800f0d4 <__ssputs_r>
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	f000 80aa 	beq.w	800f354 <_svfiprintf_r+0x1c8>
 800f200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f202:	445a      	add	r2, fp
 800f204:	9209      	str	r2, [sp, #36]	; 0x24
 800f206:	f89a 3000 	ldrb.w	r3, [sl]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 80a2 	beq.w	800f354 <_svfiprintf_r+0x1c8>
 800f210:	2300      	movs	r3, #0
 800f212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f21a:	f10a 0a01 	add.w	sl, sl, #1
 800f21e:	9304      	str	r3, [sp, #16]
 800f220:	9307      	str	r3, [sp, #28]
 800f222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f226:	931a      	str	r3, [sp, #104]	; 0x68
 800f228:	4654      	mov	r4, sl
 800f22a:	2205      	movs	r2, #5
 800f22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f230:	4851      	ldr	r0, [pc, #324]	; (800f378 <_svfiprintf_r+0x1ec>)
 800f232:	f7f0 ffed 	bl	8000210 <memchr>
 800f236:	9a04      	ldr	r2, [sp, #16]
 800f238:	b9d8      	cbnz	r0, 800f272 <_svfiprintf_r+0xe6>
 800f23a:	06d0      	lsls	r0, r2, #27
 800f23c:	bf44      	itt	mi
 800f23e:	2320      	movmi	r3, #32
 800f240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f244:	0711      	lsls	r1, r2, #28
 800f246:	bf44      	itt	mi
 800f248:	232b      	movmi	r3, #43	; 0x2b
 800f24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f24e:	f89a 3000 	ldrb.w	r3, [sl]
 800f252:	2b2a      	cmp	r3, #42	; 0x2a
 800f254:	d015      	beq.n	800f282 <_svfiprintf_r+0xf6>
 800f256:	9a07      	ldr	r2, [sp, #28]
 800f258:	4654      	mov	r4, sl
 800f25a:	2000      	movs	r0, #0
 800f25c:	f04f 0c0a 	mov.w	ip, #10
 800f260:	4621      	mov	r1, r4
 800f262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f266:	3b30      	subs	r3, #48	; 0x30
 800f268:	2b09      	cmp	r3, #9
 800f26a:	d94e      	bls.n	800f30a <_svfiprintf_r+0x17e>
 800f26c:	b1b0      	cbz	r0, 800f29c <_svfiprintf_r+0x110>
 800f26e:	9207      	str	r2, [sp, #28]
 800f270:	e014      	b.n	800f29c <_svfiprintf_r+0x110>
 800f272:	eba0 0308 	sub.w	r3, r0, r8
 800f276:	fa09 f303 	lsl.w	r3, r9, r3
 800f27a:	4313      	orrs	r3, r2
 800f27c:	9304      	str	r3, [sp, #16]
 800f27e:	46a2      	mov	sl, r4
 800f280:	e7d2      	b.n	800f228 <_svfiprintf_r+0x9c>
 800f282:	9b03      	ldr	r3, [sp, #12]
 800f284:	1d19      	adds	r1, r3, #4
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	9103      	str	r1, [sp, #12]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	bfbb      	ittet	lt
 800f28e:	425b      	neglt	r3, r3
 800f290:	f042 0202 	orrlt.w	r2, r2, #2
 800f294:	9307      	strge	r3, [sp, #28]
 800f296:	9307      	strlt	r3, [sp, #28]
 800f298:	bfb8      	it	lt
 800f29a:	9204      	strlt	r2, [sp, #16]
 800f29c:	7823      	ldrb	r3, [r4, #0]
 800f29e:	2b2e      	cmp	r3, #46	; 0x2e
 800f2a0:	d10c      	bne.n	800f2bc <_svfiprintf_r+0x130>
 800f2a2:	7863      	ldrb	r3, [r4, #1]
 800f2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a6:	d135      	bne.n	800f314 <_svfiprintf_r+0x188>
 800f2a8:	9b03      	ldr	r3, [sp, #12]
 800f2aa:	1d1a      	adds	r2, r3, #4
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	9203      	str	r2, [sp, #12]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	bfb8      	it	lt
 800f2b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f2b8:	3402      	adds	r4, #2
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f388 <_svfiprintf_r+0x1fc>
 800f2c0:	7821      	ldrb	r1, [r4, #0]
 800f2c2:	2203      	movs	r2, #3
 800f2c4:	4650      	mov	r0, sl
 800f2c6:	f7f0 ffa3 	bl	8000210 <memchr>
 800f2ca:	b140      	cbz	r0, 800f2de <_svfiprintf_r+0x152>
 800f2cc:	2340      	movs	r3, #64	; 0x40
 800f2ce:	eba0 000a 	sub.w	r0, r0, sl
 800f2d2:	fa03 f000 	lsl.w	r0, r3, r0
 800f2d6:	9b04      	ldr	r3, [sp, #16]
 800f2d8:	4303      	orrs	r3, r0
 800f2da:	3401      	adds	r4, #1
 800f2dc:	9304      	str	r3, [sp, #16]
 800f2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2e2:	4826      	ldr	r0, [pc, #152]	; (800f37c <_svfiprintf_r+0x1f0>)
 800f2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2e8:	2206      	movs	r2, #6
 800f2ea:	f7f0 ff91 	bl	8000210 <memchr>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d038      	beq.n	800f364 <_svfiprintf_r+0x1d8>
 800f2f2:	4b23      	ldr	r3, [pc, #140]	; (800f380 <_svfiprintf_r+0x1f4>)
 800f2f4:	bb1b      	cbnz	r3, 800f33e <_svfiprintf_r+0x1b2>
 800f2f6:	9b03      	ldr	r3, [sp, #12]
 800f2f8:	3307      	adds	r3, #7
 800f2fa:	f023 0307 	bic.w	r3, r3, #7
 800f2fe:	3308      	adds	r3, #8
 800f300:	9303      	str	r3, [sp, #12]
 800f302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f304:	4433      	add	r3, r6
 800f306:	9309      	str	r3, [sp, #36]	; 0x24
 800f308:	e767      	b.n	800f1da <_svfiprintf_r+0x4e>
 800f30a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f30e:	460c      	mov	r4, r1
 800f310:	2001      	movs	r0, #1
 800f312:	e7a5      	b.n	800f260 <_svfiprintf_r+0xd4>
 800f314:	2300      	movs	r3, #0
 800f316:	3401      	adds	r4, #1
 800f318:	9305      	str	r3, [sp, #20]
 800f31a:	4619      	mov	r1, r3
 800f31c:	f04f 0c0a 	mov.w	ip, #10
 800f320:	4620      	mov	r0, r4
 800f322:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f326:	3a30      	subs	r2, #48	; 0x30
 800f328:	2a09      	cmp	r2, #9
 800f32a:	d903      	bls.n	800f334 <_svfiprintf_r+0x1a8>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d0c5      	beq.n	800f2bc <_svfiprintf_r+0x130>
 800f330:	9105      	str	r1, [sp, #20]
 800f332:	e7c3      	b.n	800f2bc <_svfiprintf_r+0x130>
 800f334:	fb0c 2101 	mla	r1, ip, r1, r2
 800f338:	4604      	mov	r4, r0
 800f33a:	2301      	movs	r3, #1
 800f33c:	e7f0      	b.n	800f320 <_svfiprintf_r+0x194>
 800f33e:	ab03      	add	r3, sp, #12
 800f340:	9300      	str	r3, [sp, #0]
 800f342:	462a      	mov	r2, r5
 800f344:	4b0f      	ldr	r3, [pc, #60]	; (800f384 <_svfiprintf_r+0x1f8>)
 800f346:	a904      	add	r1, sp, #16
 800f348:	4638      	mov	r0, r7
 800f34a:	f7fd fc27 	bl	800cb9c <_printf_float>
 800f34e:	1c42      	adds	r2, r0, #1
 800f350:	4606      	mov	r6, r0
 800f352:	d1d6      	bne.n	800f302 <_svfiprintf_r+0x176>
 800f354:	89ab      	ldrh	r3, [r5, #12]
 800f356:	065b      	lsls	r3, r3, #25
 800f358:	f53f af2c 	bmi.w	800f1b4 <_svfiprintf_r+0x28>
 800f35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f35e:	b01d      	add	sp, #116	; 0x74
 800f360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f364:	ab03      	add	r3, sp, #12
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	462a      	mov	r2, r5
 800f36a:	4b06      	ldr	r3, [pc, #24]	; (800f384 <_svfiprintf_r+0x1f8>)
 800f36c:	a904      	add	r1, sp, #16
 800f36e:	4638      	mov	r0, r7
 800f370:	f7fd feb8 	bl	800d0e4 <_printf_i>
 800f374:	e7eb      	b.n	800f34e <_svfiprintf_r+0x1c2>
 800f376:	bf00      	nop
 800f378:	080102a4 	.word	0x080102a4
 800f37c:	080102ae 	.word	0x080102ae
 800f380:	0800cb9d 	.word	0x0800cb9d
 800f384:	0800f0d5 	.word	0x0800f0d5
 800f388:	080102aa 	.word	0x080102aa

0800f38c <__sfputc_r>:
 800f38c:	6893      	ldr	r3, [r2, #8]
 800f38e:	3b01      	subs	r3, #1
 800f390:	2b00      	cmp	r3, #0
 800f392:	b410      	push	{r4}
 800f394:	6093      	str	r3, [r2, #8]
 800f396:	da08      	bge.n	800f3aa <__sfputc_r+0x1e>
 800f398:	6994      	ldr	r4, [r2, #24]
 800f39a:	42a3      	cmp	r3, r4
 800f39c:	db01      	blt.n	800f3a2 <__sfputc_r+0x16>
 800f39e:	290a      	cmp	r1, #10
 800f3a0:	d103      	bne.n	800f3aa <__sfputc_r+0x1e>
 800f3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3a6:	f7fe b8d1 	b.w	800d54c <__swbuf_r>
 800f3aa:	6813      	ldr	r3, [r2, #0]
 800f3ac:	1c58      	adds	r0, r3, #1
 800f3ae:	6010      	str	r0, [r2, #0]
 800f3b0:	7019      	strb	r1, [r3, #0]
 800f3b2:	4608      	mov	r0, r1
 800f3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3b8:	4770      	bx	lr

0800f3ba <__sfputs_r>:
 800f3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3bc:	4606      	mov	r6, r0
 800f3be:	460f      	mov	r7, r1
 800f3c0:	4614      	mov	r4, r2
 800f3c2:	18d5      	adds	r5, r2, r3
 800f3c4:	42ac      	cmp	r4, r5
 800f3c6:	d101      	bne.n	800f3cc <__sfputs_r+0x12>
 800f3c8:	2000      	movs	r0, #0
 800f3ca:	e007      	b.n	800f3dc <__sfputs_r+0x22>
 800f3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d0:	463a      	mov	r2, r7
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f7ff ffda 	bl	800f38c <__sfputc_r>
 800f3d8:	1c43      	adds	r3, r0, #1
 800f3da:	d1f3      	bne.n	800f3c4 <__sfputs_r+0xa>
 800f3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3e0 <_vfiprintf_r>:
 800f3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e4:	460d      	mov	r5, r1
 800f3e6:	b09d      	sub	sp, #116	; 0x74
 800f3e8:	4614      	mov	r4, r2
 800f3ea:	4698      	mov	r8, r3
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	b118      	cbz	r0, 800f3f8 <_vfiprintf_r+0x18>
 800f3f0:	6983      	ldr	r3, [r0, #24]
 800f3f2:	b90b      	cbnz	r3, 800f3f8 <_vfiprintf_r+0x18>
 800f3f4:	f7ff f8fe 	bl	800e5f4 <__sinit>
 800f3f8:	4b89      	ldr	r3, [pc, #548]	; (800f620 <_vfiprintf_r+0x240>)
 800f3fa:	429d      	cmp	r5, r3
 800f3fc:	d11b      	bne.n	800f436 <_vfiprintf_r+0x56>
 800f3fe:	6875      	ldr	r5, [r6, #4]
 800f400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f402:	07d9      	lsls	r1, r3, #31
 800f404:	d405      	bmi.n	800f412 <_vfiprintf_r+0x32>
 800f406:	89ab      	ldrh	r3, [r5, #12]
 800f408:	059a      	lsls	r2, r3, #22
 800f40a:	d402      	bmi.n	800f412 <_vfiprintf_r+0x32>
 800f40c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f40e:	f7ff f994 	bl	800e73a <__retarget_lock_acquire_recursive>
 800f412:	89ab      	ldrh	r3, [r5, #12]
 800f414:	071b      	lsls	r3, r3, #28
 800f416:	d501      	bpl.n	800f41c <_vfiprintf_r+0x3c>
 800f418:	692b      	ldr	r3, [r5, #16]
 800f41a:	b9eb      	cbnz	r3, 800f458 <_vfiprintf_r+0x78>
 800f41c:	4629      	mov	r1, r5
 800f41e:	4630      	mov	r0, r6
 800f420:	f7fe f8e6 	bl	800d5f0 <__swsetup_r>
 800f424:	b1c0      	cbz	r0, 800f458 <_vfiprintf_r+0x78>
 800f426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f428:	07dc      	lsls	r4, r3, #31
 800f42a:	d50e      	bpl.n	800f44a <_vfiprintf_r+0x6a>
 800f42c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f430:	b01d      	add	sp, #116	; 0x74
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	4b7b      	ldr	r3, [pc, #492]	; (800f624 <_vfiprintf_r+0x244>)
 800f438:	429d      	cmp	r5, r3
 800f43a:	d101      	bne.n	800f440 <_vfiprintf_r+0x60>
 800f43c:	68b5      	ldr	r5, [r6, #8]
 800f43e:	e7df      	b.n	800f400 <_vfiprintf_r+0x20>
 800f440:	4b79      	ldr	r3, [pc, #484]	; (800f628 <_vfiprintf_r+0x248>)
 800f442:	429d      	cmp	r5, r3
 800f444:	bf08      	it	eq
 800f446:	68f5      	ldreq	r5, [r6, #12]
 800f448:	e7da      	b.n	800f400 <_vfiprintf_r+0x20>
 800f44a:	89ab      	ldrh	r3, [r5, #12]
 800f44c:	0598      	lsls	r0, r3, #22
 800f44e:	d4ed      	bmi.n	800f42c <_vfiprintf_r+0x4c>
 800f450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f452:	f7ff f973 	bl	800e73c <__retarget_lock_release_recursive>
 800f456:	e7e9      	b.n	800f42c <_vfiprintf_r+0x4c>
 800f458:	2300      	movs	r3, #0
 800f45a:	9309      	str	r3, [sp, #36]	; 0x24
 800f45c:	2320      	movs	r3, #32
 800f45e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f462:	f8cd 800c 	str.w	r8, [sp, #12]
 800f466:	2330      	movs	r3, #48	; 0x30
 800f468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f62c <_vfiprintf_r+0x24c>
 800f46c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f470:	f04f 0901 	mov.w	r9, #1
 800f474:	4623      	mov	r3, r4
 800f476:	469a      	mov	sl, r3
 800f478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f47c:	b10a      	cbz	r2, 800f482 <_vfiprintf_r+0xa2>
 800f47e:	2a25      	cmp	r2, #37	; 0x25
 800f480:	d1f9      	bne.n	800f476 <_vfiprintf_r+0x96>
 800f482:	ebba 0b04 	subs.w	fp, sl, r4
 800f486:	d00b      	beq.n	800f4a0 <_vfiprintf_r+0xc0>
 800f488:	465b      	mov	r3, fp
 800f48a:	4622      	mov	r2, r4
 800f48c:	4629      	mov	r1, r5
 800f48e:	4630      	mov	r0, r6
 800f490:	f7ff ff93 	bl	800f3ba <__sfputs_r>
 800f494:	3001      	adds	r0, #1
 800f496:	f000 80aa 	beq.w	800f5ee <_vfiprintf_r+0x20e>
 800f49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f49c:	445a      	add	r2, fp
 800f49e:	9209      	str	r2, [sp, #36]	; 0x24
 800f4a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f000 80a2 	beq.w	800f5ee <_vfiprintf_r+0x20e>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f4b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4b4:	f10a 0a01 	add.w	sl, sl, #1
 800f4b8:	9304      	str	r3, [sp, #16]
 800f4ba:	9307      	str	r3, [sp, #28]
 800f4bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f4c0:	931a      	str	r3, [sp, #104]	; 0x68
 800f4c2:	4654      	mov	r4, sl
 800f4c4:	2205      	movs	r2, #5
 800f4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ca:	4858      	ldr	r0, [pc, #352]	; (800f62c <_vfiprintf_r+0x24c>)
 800f4cc:	f7f0 fea0 	bl	8000210 <memchr>
 800f4d0:	9a04      	ldr	r2, [sp, #16]
 800f4d2:	b9d8      	cbnz	r0, 800f50c <_vfiprintf_r+0x12c>
 800f4d4:	06d1      	lsls	r1, r2, #27
 800f4d6:	bf44      	itt	mi
 800f4d8:	2320      	movmi	r3, #32
 800f4da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4de:	0713      	lsls	r3, r2, #28
 800f4e0:	bf44      	itt	mi
 800f4e2:	232b      	movmi	r3, #43	; 0x2b
 800f4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f4e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ee:	d015      	beq.n	800f51c <_vfiprintf_r+0x13c>
 800f4f0:	9a07      	ldr	r2, [sp, #28]
 800f4f2:	4654      	mov	r4, sl
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	f04f 0c0a 	mov.w	ip, #10
 800f4fa:	4621      	mov	r1, r4
 800f4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f500:	3b30      	subs	r3, #48	; 0x30
 800f502:	2b09      	cmp	r3, #9
 800f504:	d94e      	bls.n	800f5a4 <_vfiprintf_r+0x1c4>
 800f506:	b1b0      	cbz	r0, 800f536 <_vfiprintf_r+0x156>
 800f508:	9207      	str	r2, [sp, #28]
 800f50a:	e014      	b.n	800f536 <_vfiprintf_r+0x156>
 800f50c:	eba0 0308 	sub.w	r3, r0, r8
 800f510:	fa09 f303 	lsl.w	r3, r9, r3
 800f514:	4313      	orrs	r3, r2
 800f516:	9304      	str	r3, [sp, #16]
 800f518:	46a2      	mov	sl, r4
 800f51a:	e7d2      	b.n	800f4c2 <_vfiprintf_r+0xe2>
 800f51c:	9b03      	ldr	r3, [sp, #12]
 800f51e:	1d19      	adds	r1, r3, #4
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	9103      	str	r1, [sp, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	bfbb      	ittet	lt
 800f528:	425b      	neglt	r3, r3
 800f52a:	f042 0202 	orrlt.w	r2, r2, #2
 800f52e:	9307      	strge	r3, [sp, #28]
 800f530:	9307      	strlt	r3, [sp, #28]
 800f532:	bfb8      	it	lt
 800f534:	9204      	strlt	r2, [sp, #16]
 800f536:	7823      	ldrb	r3, [r4, #0]
 800f538:	2b2e      	cmp	r3, #46	; 0x2e
 800f53a:	d10c      	bne.n	800f556 <_vfiprintf_r+0x176>
 800f53c:	7863      	ldrb	r3, [r4, #1]
 800f53e:	2b2a      	cmp	r3, #42	; 0x2a
 800f540:	d135      	bne.n	800f5ae <_vfiprintf_r+0x1ce>
 800f542:	9b03      	ldr	r3, [sp, #12]
 800f544:	1d1a      	adds	r2, r3, #4
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	9203      	str	r2, [sp, #12]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	bfb8      	it	lt
 800f54e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f552:	3402      	adds	r4, #2
 800f554:	9305      	str	r3, [sp, #20]
 800f556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f63c <_vfiprintf_r+0x25c>
 800f55a:	7821      	ldrb	r1, [r4, #0]
 800f55c:	2203      	movs	r2, #3
 800f55e:	4650      	mov	r0, sl
 800f560:	f7f0 fe56 	bl	8000210 <memchr>
 800f564:	b140      	cbz	r0, 800f578 <_vfiprintf_r+0x198>
 800f566:	2340      	movs	r3, #64	; 0x40
 800f568:	eba0 000a 	sub.w	r0, r0, sl
 800f56c:	fa03 f000 	lsl.w	r0, r3, r0
 800f570:	9b04      	ldr	r3, [sp, #16]
 800f572:	4303      	orrs	r3, r0
 800f574:	3401      	adds	r4, #1
 800f576:	9304      	str	r3, [sp, #16]
 800f578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f57c:	482c      	ldr	r0, [pc, #176]	; (800f630 <_vfiprintf_r+0x250>)
 800f57e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f582:	2206      	movs	r2, #6
 800f584:	f7f0 fe44 	bl	8000210 <memchr>
 800f588:	2800      	cmp	r0, #0
 800f58a:	d03f      	beq.n	800f60c <_vfiprintf_r+0x22c>
 800f58c:	4b29      	ldr	r3, [pc, #164]	; (800f634 <_vfiprintf_r+0x254>)
 800f58e:	bb1b      	cbnz	r3, 800f5d8 <_vfiprintf_r+0x1f8>
 800f590:	9b03      	ldr	r3, [sp, #12]
 800f592:	3307      	adds	r3, #7
 800f594:	f023 0307 	bic.w	r3, r3, #7
 800f598:	3308      	adds	r3, #8
 800f59a:	9303      	str	r3, [sp, #12]
 800f59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59e:	443b      	add	r3, r7
 800f5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800f5a2:	e767      	b.n	800f474 <_vfiprintf_r+0x94>
 800f5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5a8:	460c      	mov	r4, r1
 800f5aa:	2001      	movs	r0, #1
 800f5ac:	e7a5      	b.n	800f4fa <_vfiprintf_r+0x11a>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	3401      	adds	r4, #1
 800f5b2:	9305      	str	r3, [sp, #20]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	f04f 0c0a 	mov.w	ip, #10
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5c0:	3a30      	subs	r2, #48	; 0x30
 800f5c2:	2a09      	cmp	r2, #9
 800f5c4:	d903      	bls.n	800f5ce <_vfiprintf_r+0x1ee>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d0c5      	beq.n	800f556 <_vfiprintf_r+0x176>
 800f5ca:	9105      	str	r1, [sp, #20]
 800f5cc:	e7c3      	b.n	800f556 <_vfiprintf_r+0x176>
 800f5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e7f0      	b.n	800f5ba <_vfiprintf_r+0x1da>
 800f5d8:	ab03      	add	r3, sp, #12
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	462a      	mov	r2, r5
 800f5de:	4b16      	ldr	r3, [pc, #88]	; (800f638 <_vfiprintf_r+0x258>)
 800f5e0:	a904      	add	r1, sp, #16
 800f5e2:	4630      	mov	r0, r6
 800f5e4:	f7fd fada 	bl	800cb9c <_printf_float>
 800f5e8:	4607      	mov	r7, r0
 800f5ea:	1c78      	adds	r0, r7, #1
 800f5ec:	d1d6      	bne.n	800f59c <_vfiprintf_r+0x1bc>
 800f5ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5f0:	07d9      	lsls	r1, r3, #31
 800f5f2:	d405      	bmi.n	800f600 <_vfiprintf_r+0x220>
 800f5f4:	89ab      	ldrh	r3, [r5, #12]
 800f5f6:	059a      	lsls	r2, r3, #22
 800f5f8:	d402      	bmi.n	800f600 <_vfiprintf_r+0x220>
 800f5fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5fc:	f7ff f89e 	bl	800e73c <__retarget_lock_release_recursive>
 800f600:	89ab      	ldrh	r3, [r5, #12]
 800f602:	065b      	lsls	r3, r3, #25
 800f604:	f53f af12 	bmi.w	800f42c <_vfiprintf_r+0x4c>
 800f608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f60a:	e711      	b.n	800f430 <_vfiprintf_r+0x50>
 800f60c:	ab03      	add	r3, sp, #12
 800f60e:	9300      	str	r3, [sp, #0]
 800f610:	462a      	mov	r2, r5
 800f612:	4b09      	ldr	r3, [pc, #36]	; (800f638 <_vfiprintf_r+0x258>)
 800f614:	a904      	add	r1, sp, #16
 800f616:	4630      	mov	r0, r6
 800f618:	f7fd fd64 	bl	800d0e4 <_printf_i>
 800f61c:	e7e4      	b.n	800f5e8 <_vfiprintf_r+0x208>
 800f61e:	bf00      	nop
 800f620:	08010108 	.word	0x08010108
 800f624:	08010128 	.word	0x08010128
 800f628:	080100e8 	.word	0x080100e8
 800f62c:	080102a4 	.word	0x080102a4
 800f630:	080102ae 	.word	0x080102ae
 800f634:	0800cb9d 	.word	0x0800cb9d
 800f638:	0800f3bb 	.word	0x0800f3bb
 800f63c:	080102aa 	.word	0x080102aa

0800f640 <_sbrk_r>:
 800f640:	b538      	push	{r3, r4, r5, lr}
 800f642:	4d06      	ldr	r5, [pc, #24]	; (800f65c <_sbrk_r+0x1c>)
 800f644:	2300      	movs	r3, #0
 800f646:	4604      	mov	r4, r0
 800f648:	4608      	mov	r0, r1
 800f64a:	602b      	str	r3, [r5, #0]
 800f64c:	f7f8 fce6 	bl	800801c <_sbrk>
 800f650:	1c43      	adds	r3, r0, #1
 800f652:	d102      	bne.n	800f65a <_sbrk_r+0x1a>
 800f654:	682b      	ldr	r3, [r5, #0]
 800f656:	b103      	cbz	r3, 800f65a <_sbrk_r+0x1a>
 800f658:	6023      	str	r3, [r4, #0]
 800f65a:	bd38      	pop	{r3, r4, r5, pc}
 800f65c:	20002e4c 	.word	0x20002e4c

0800f660 <__sread>:
 800f660:	b510      	push	{r4, lr}
 800f662:	460c      	mov	r4, r1
 800f664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f668:	f000 f904 	bl	800f874 <_read_r>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	bfab      	itete	ge
 800f670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f672:	89a3      	ldrhlt	r3, [r4, #12]
 800f674:	181b      	addge	r3, r3, r0
 800f676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f67a:	bfac      	ite	ge
 800f67c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f67e:	81a3      	strhlt	r3, [r4, #12]
 800f680:	bd10      	pop	{r4, pc}

0800f682 <__swrite>:
 800f682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f686:	461f      	mov	r7, r3
 800f688:	898b      	ldrh	r3, [r1, #12]
 800f68a:	05db      	lsls	r3, r3, #23
 800f68c:	4605      	mov	r5, r0
 800f68e:	460c      	mov	r4, r1
 800f690:	4616      	mov	r6, r2
 800f692:	d505      	bpl.n	800f6a0 <__swrite+0x1e>
 800f694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f698:	2302      	movs	r3, #2
 800f69a:	2200      	movs	r2, #0
 800f69c:	f000 f898 	bl	800f7d0 <_lseek_r>
 800f6a0:	89a3      	ldrh	r3, [r4, #12]
 800f6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6aa:	81a3      	strh	r3, [r4, #12]
 800f6ac:	4632      	mov	r2, r6
 800f6ae:	463b      	mov	r3, r7
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b6:	f000 b817 	b.w	800f6e8 <_write_r>

0800f6ba <__sseek>:
 800f6ba:	b510      	push	{r4, lr}
 800f6bc:	460c      	mov	r4, r1
 800f6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c2:	f000 f885 	bl	800f7d0 <_lseek_r>
 800f6c6:	1c43      	adds	r3, r0, #1
 800f6c8:	89a3      	ldrh	r3, [r4, #12]
 800f6ca:	bf15      	itete	ne
 800f6cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6d6:	81a3      	strheq	r3, [r4, #12]
 800f6d8:	bf18      	it	ne
 800f6da:	81a3      	strhne	r3, [r4, #12]
 800f6dc:	bd10      	pop	{r4, pc}

0800f6de <__sclose>:
 800f6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6e2:	f000 b831 	b.w	800f748 <_close_r>
	...

0800f6e8 <_write_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	4d07      	ldr	r5, [pc, #28]	; (800f708 <_write_r+0x20>)
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	4608      	mov	r0, r1
 800f6f0:	4611      	mov	r1, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	602a      	str	r2, [r5, #0]
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	f7f8 fc3f 	bl	8007f7a <_write>
 800f6fc:	1c43      	adds	r3, r0, #1
 800f6fe:	d102      	bne.n	800f706 <_write_r+0x1e>
 800f700:	682b      	ldr	r3, [r5, #0]
 800f702:	b103      	cbz	r3, 800f706 <_write_r+0x1e>
 800f704:	6023      	str	r3, [r4, #0]
 800f706:	bd38      	pop	{r3, r4, r5, pc}
 800f708:	20002e4c 	.word	0x20002e4c

0800f70c <__assert_func>:
 800f70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f70e:	4614      	mov	r4, r2
 800f710:	461a      	mov	r2, r3
 800f712:	4b09      	ldr	r3, [pc, #36]	; (800f738 <__assert_func+0x2c>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4605      	mov	r5, r0
 800f718:	68d8      	ldr	r0, [r3, #12]
 800f71a:	b14c      	cbz	r4, 800f730 <__assert_func+0x24>
 800f71c:	4b07      	ldr	r3, [pc, #28]	; (800f73c <__assert_func+0x30>)
 800f71e:	9100      	str	r1, [sp, #0]
 800f720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f724:	4906      	ldr	r1, [pc, #24]	; (800f740 <__assert_func+0x34>)
 800f726:	462b      	mov	r3, r5
 800f728:	f000 f81e 	bl	800f768 <fiprintf>
 800f72c:	f7fd f94f 	bl	800c9ce <abort>
 800f730:	4b04      	ldr	r3, [pc, #16]	; (800f744 <__assert_func+0x38>)
 800f732:	461c      	mov	r4, r3
 800f734:	e7f3      	b.n	800f71e <__assert_func+0x12>
 800f736:	bf00      	nop
 800f738:	20000edc 	.word	0x20000edc
 800f73c:	080102b5 	.word	0x080102b5
 800f740:	080102c2 	.word	0x080102c2
 800f744:	080102f0 	.word	0x080102f0

0800f748 <_close_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	4d06      	ldr	r5, [pc, #24]	; (800f764 <_close_r+0x1c>)
 800f74c:	2300      	movs	r3, #0
 800f74e:	4604      	mov	r4, r0
 800f750:	4608      	mov	r0, r1
 800f752:	602b      	str	r3, [r5, #0]
 800f754:	f7f8 fc2d 	bl	8007fb2 <_close>
 800f758:	1c43      	adds	r3, r0, #1
 800f75a:	d102      	bne.n	800f762 <_close_r+0x1a>
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	b103      	cbz	r3, 800f762 <_close_r+0x1a>
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	bd38      	pop	{r3, r4, r5, pc}
 800f764:	20002e4c 	.word	0x20002e4c

0800f768 <fiprintf>:
 800f768:	b40e      	push	{r1, r2, r3}
 800f76a:	b503      	push	{r0, r1, lr}
 800f76c:	4601      	mov	r1, r0
 800f76e:	ab03      	add	r3, sp, #12
 800f770:	4805      	ldr	r0, [pc, #20]	; (800f788 <fiprintf+0x20>)
 800f772:	f853 2b04 	ldr.w	r2, [r3], #4
 800f776:	6800      	ldr	r0, [r0, #0]
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	f7ff fe31 	bl	800f3e0 <_vfiprintf_r>
 800f77e:	b002      	add	sp, #8
 800f780:	f85d eb04 	ldr.w	lr, [sp], #4
 800f784:	b003      	add	sp, #12
 800f786:	4770      	bx	lr
 800f788:	20000edc 	.word	0x20000edc

0800f78c <_fstat_r>:
 800f78c:	b538      	push	{r3, r4, r5, lr}
 800f78e:	4d07      	ldr	r5, [pc, #28]	; (800f7ac <_fstat_r+0x20>)
 800f790:	2300      	movs	r3, #0
 800f792:	4604      	mov	r4, r0
 800f794:	4608      	mov	r0, r1
 800f796:	4611      	mov	r1, r2
 800f798:	602b      	str	r3, [r5, #0]
 800f79a:	f7f8 fc16 	bl	8007fca <_fstat>
 800f79e:	1c43      	adds	r3, r0, #1
 800f7a0:	d102      	bne.n	800f7a8 <_fstat_r+0x1c>
 800f7a2:	682b      	ldr	r3, [r5, #0]
 800f7a4:	b103      	cbz	r3, 800f7a8 <_fstat_r+0x1c>
 800f7a6:	6023      	str	r3, [r4, #0]
 800f7a8:	bd38      	pop	{r3, r4, r5, pc}
 800f7aa:	bf00      	nop
 800f7ac:	20002e4c 	.word	0x20002e4c

0800f7b0 <_isatty_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d06      	ldr	r5, [pc, #24]	; (800f7cc <_isatty_r+0x1c>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f7f8 fc15 	bl	8007fea <_isatty>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_isatty_r+0x1a>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_isatty_r+0x1a>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	20002e4c 	.word	0x20002e4c

0800f7d0 <_lseek_r>:
 800f7d0:	b538      	push	{r3, r4, r5, lr}
 800f7d2:	4d07      	ldr	r5, [pc, #28]	; (800f7f0 <_lseek_r+0x20>)
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	4608      	mov	r0, r1
 800f7d8:	4611      	mov	r1, r2
 800f7da:	2200      	movs	r2, #0
 800f7dc:	602a      	str	r2, [r5, #0]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	f7f8 fc0e 	bl	8008000 <_lseek>
 800f7e4:	1c43      	adds	r3, r0, #1
 800f7e6:	d102      	bne.n	800f7ee <_lseek_r+0x1e>
 800f7e8:	682b      	ldr	r3, [r5, #0]
 800f7ea:	b103      	cbz	r3, 800f7ee <_lseek_r+0x1e>
 800f7ec:	6023      	str	r3, [r4, #0]
 800f7ee:	bd38      	pop	{r3, r4, r5, pc}
 800f7f0:	20002e4c 	.word	0x20002e4c

0800f7f4 <__ascii_mbtowc>:
 800f7f4:	b082      	sub	sp, #8
 800f7f6:	b901      	cbnz	r1, 800f7fa <__ascii_mbtowc+0x6>
 800f7f8:	a901      	add	r1, sp, #4
 800f7fa:	b142      	cbz	r2, 800f80e <__ascii_mbtowc+0x1a>
 800f7fc:	b14b      	cbz	r3, 800f812 <__ascii_mbtowc+0x1e>
 800f7fe:	7813      	ldrb	r3, [r2, #0]
 800f800:	600b      	str	r3, [r1, #0]
 800f802:	7812      	ldrb	r2, [r2, #0]
 800f804:	1e10      	subs	r0, r2, #0
 800f806:	bf18      	it	ne
 800f808:	2001      	movne	r0, #1
 800f80a:	b002      	add	sp, #8
 800f80c:	4770      	bx	lr
 800f80e:	4610      	mov	r0, r2
 800f810:	e7fb      	b.n	800f80a <__ascii_mbtowc+0x16>
 800f812:	f06f 0001 	mvn.w	r0, #1
 800f816:	e7f8      	b.n	800f80a <__ascii_mbtowc+0x16>

0800f818 <memmove>:
 800f818:	4288      	cmp	r0, r1
 800f81a:	b510      	push	{r4, lr}
 800f81c:	eb01 0402 	add.w	r4, r1, r2
 800f820:	d902      	bls.n	800f828 <memmove+0x10>
 800f822:	4284      	cmp	r4, r0
 800f824:	4623      	mov	r3, r4
 800f826:	d807      	bhi.n	800f838 <memmove+0x20>
 800f828:	1e43      	subs	r3, r0, #1
 800f82a:	42a1      	cmp	r1, r4
 800f82c:	d008      	beq.n	800f840 <memmove+0x28>
 800f82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f836:	e7f8      	b.n	800f82a <memmove+0x12>
 800f838:	4402      	add	r2, r0
 800f83a:	4601      	mov	r1, r0
 800f83c:	428a      	cmp	r2, r1
 800f83e:	d100      	bne.n	800f842 <memmove+0x2a>
 800f840:	bd10      	pop	{r4, pc}
 800f842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f84a:	e7f7      	b.n	800f83c <memmove+0x24>

0800f84c <__malloc_lock>:
 800f84c:	4801      	ldr	r0, [pc, #4]	; (800f854 <__malloc_lock+0x8>)
 800f84e:	f7fe bf74 	b.w	800e73a <__retarget_lock_acquire_recursive>
 800f852:	bf00      	nop
 800f854:	20002e44 	.word	0x20002e44

0800f858 <__malloc_unlock>:
 800f858:	4801      	ldr	r0, [pc, #4]	; (800f860 <__malloc_unlock+0x8>)
 800f85a:	f7fe bf6f 	b.w	800e73c <__retarget_lock_release_recursive>
 800f85e:	bf00      	nop
 800f860:	20002e44 	.word	0x20002e44

0800f864 <_malloc_usable_size_r>:
 800f864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f868:	1f18      	subs	r0, r3, #4
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	bfbc      	itt	lt
 800f86e:	580b      	ldrlt	r3, [r1, r0]
 800f870:	18c0      	addlt	r0, r0, r3
 800f872:	4770      	bx	lr

0800f874 <_read_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d07      	ldr	r5, [pc, #28]	; (800f894 <_read_r+0x20>)
 800f878:	4604      	mov	r4, r0
 800f87a:	4608      	mov	r0, r1
 800f87c:	4611      	mov	r1, r2
 800f87e:	2200      	movs	r2, #0
 800f880:	602a      	str	r2, [r5, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	f7f8 fb5c 	bl	8007f40 <_read>
 800f888:	1c43      	adds	r3, r0, #1
 800f88a:	d102      	bne.n	800f892 <_read_r+0x1e>
 800f88c:	682b      	ldr	r3, [r5, #0]
 800f88e:	b103      	cbz	r3, 800f892 <_read_r+0x1e>
 800f890:	6023      	str	r3, [r4, #0]
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	20002e4c 	.word	0x20002e4c

0800f898 <__ascii_wctomb>:
 800f898:	b149      	cbz	r1, 800f8ae <__ascii_wctomb+0x16>
 800f89a:	2aff      	cmp	r2, #255	; 0xff
 800f89c:	bf85      	ittet	hi
 800f89e:	238a      	movhi	r3, #138	; 0x8a
 800f8a0:	6003      	strhi	r3, [r0, #0]
 800f8a2:	700a      	strbls	r2, [r1, #0]
 800f8a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f8a8:	bf98      	it	ls
 800f8aa:	2001      	movls	r0, #1
 800f8ac:	4770      	bx	lr
 800f8ae:	4608      	mov	r0, r1
 800f8b0:	4770      	bx	lr
	...

0800f8b4 <_init>:
 800f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b6:	bf00      	nop
 800f8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ba:	bc08      	pop	{r3}
 800f8bc:	469e      	mov	lr, r3
 800f8be:	4770      	bx	lr

0800f8c0 <_fini>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	bf00      	nop
 800f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c6:	bc08      	pop	{r3}
 800f8c8:	469e      	mov	lr, r3
 800f8ca:	4770      	bx	lr
